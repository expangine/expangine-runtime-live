{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"expangine-runtime\"","webpack://[name]/./LiveRuntime.ts","webpack://[name]/./helper.ts","webpack://[name]/./Expressions.ts","webpack://[name]/./Any.ts","webpack://[name]/./Boolean.ts","webpack://[name]/./Color.ts","webpack://[name]/./Date.ts","webpack://[name]/./List.ts","webpack://[name]/./Map.ts","webpack://[name]/./Number.ts","webpack://[name]/./Object.ts","webpack://[name]/./Text.ts","webpack://[name]/./Tuple.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wrapCommandWithReturn","cmd","context","result","returnProperty","getCommandWithReturn","expr","provider","this","getCommand","run","defs","getExpression","LiveRuntime","saveScope","scope","popped","prop","alias","restoreScope","saved","undefined","preserveScope","props","map","forEach","last","_optional","defaultValue","_bool","_typed","isValid","invalidValueDefault","invalidValue","_typedDynamic","_boolMaybe","_number","Number","NaN","_numberMaybe","_text","_textMaybe","_list","_listMaybe","_map","Map","_mapMaybe","_object","_objectMaybe","_color","g","b","a","_colorMaybe","_date","Date","_dateMaybe","_asList","getValue","_asMap","_asObject","_asTuple","_colorOrNumber","hasSubs","x","traversePath","path","previous","step","end","length","next","setExpression","parts","sub","set","currentVariable","params","e","op","getOperation","Error","defaults","getOperationScopeDefaults","scopeAlias","operationCommand","chain","data","cases","test","otherwise","caseExpression","valueCommand","tests","defaultCase","isEqual","noScope","matches","expression","expressions","defaultResult","and","pass","or","variable","start","body","breakVariable","max","maxIterations","iterations","stop","dir","condition","vars","defined","sections","template","split","section","index","_source","source","reduce","out","func","getFunction","command","options","args","returnValue","elements","ops","setOperation","cmp","copy","isDefined","getDefined","coalesce","isNotEqual","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","asAny","asBoolean","asColor","baseType","normalize","asDate","asList","asMap","asNumber","parseFloat","isFinite","asObject","asText","asTuple","maybe","xor","not","isTrue","isFalse","compareColor","build","component","clamp","add","addend","alpha","adds","scale","addendScale","subtrahend","mul","multiplier","div","divisor","divSafe","mod","format","formatId","getFormat","formatter","parse","lerp","delta","lighten","amount","darken","toHSL","fromColor","fromHSL","toColor","luminance","contrast","valueL","testL","Math","min","invert","opaque","distance","dist","named","getName","closestName","closestDistance","constants","entries","blend","top","bottom","modeName","blender","BlendFunctions","epsilon","formatMap","bestfit","y","abs","inv","multiply","screen","overlay","hard","soft","dodge","burn","divide","addition","diff","now","today","day","tomorrow","yesterday","parseAsUTC","fromText","fromTimestamp","fromTimestampSeconds","valueOf","update","getTime","unit","startOf","endOf","daysInMonth","daysInYear","weeksInYear","absolute","adjust","timezoneOffset","toText","toISOText","toISOString","id","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isBetween","startInclusive","endInclusive","startCompare","endCompare","isStartOf","isEndOf","isDST","isLeapYear","count","list","sameItem","item","push","prev","addFirst","unshift","addLast","insert","splice","remove","handleListIsEqual","_","removeFirst","shift","removeLast","pop","removeAt","removeWhere","handleListIteration","removed","where","contains","find","reverse","clampedStart","deepCopy","handleList","slice","half","floor","j","swap","exclude","k","overlap","overlapping","sort","compare","shuffle","times","random","unique","skip","duplicates","once","take","drop","append","concat","prepend","indexOf","lastIndexOf","findIndex","first","randomList","taken","join","prefix","sum","delimiter","suffix","each","filter","mapped","transform","fail","initial","reduced","less","more","group","groups","by","grouping","keyValue","newGrouping","toListMap","getKey","keyList","toMap","handleAggregate","agg","avg","std","values","squareAvg","v","sqrt","variance","median","bitand","bitor","bitxor","isEmpty","isNotEmpty","equal","tryCastValue","toString","isType","val","arr","temp","handle","initialAggregate","aggregate","getAggregate","initialResult","onItem","earlyExit","newResult","handleMatch","getDefaultResult","matchResult","existing","existingValue","has","delete","keys","pairs","clear","size","handleMap","deepCopyKey","entriesCopy","transformKey","entriesTransformed","toPlainObject","plain","pi","PI","pi2","piHalf","E","sqrt2","SQRT2","sqrt12","SQRT1_2","ln2","LN2","ln10","LN10","log2e","LOG2E","log10e","LOG10E","pow","exponent","atan2","hypot","choose","num","den","denom","gcd","bitAnd","bitOr","bitXor","sq","cbrt","ceil","up","down","round","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","f","bitFlip","triangleHeight","base","side1","side2","HALF","TWO","rnd","gap","whole","include","includeMax","toBaseText","minDigits","minPlaces","maxPlaces","useExponent","separator","thousandSeparator","to","toExponential","toFixed","toPrecision","systemSeparator","toLocaleString","substring","SEPARATOR_OFFSET","isZero","minInclusive","maxInclusive","isWhole","eps","isDecimal","isPositive","isNegative","isDivisible","as","bs","mergeValues","target","merge","merged","lower","toLowerCase","upper","toUpperCase","char","charAt","outside","replace","repeat","repeated","limit","chars","search","trim","startsWith","endsWith","soundex","LETTERS_ONLY","ALLOWED_ONLY","MAP","q","z","distanceMatrix","Array","fill","indicator","ignoreCase","like","pattern","valueCased","regexPattern","regex","RegExp","match","pad","padding","toNumber","isLower","localeCompare","isUpper","buildValues","built","tuple","element"],"mappings":"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","file":"expangine-runtime-live.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"expangine-runtime\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"expangine-runtime\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime-live\"] = factory(require(\"expangine-runtime\"));\n\telse\n\t\troot[\"expangine-runtime-live\"] = factory(root[\"expangine-runtime\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Runtime, Command, defs, Expression, CommandProvider } from 'expangine-runtime';\n\n\n\nexport type LiveContext = Record<string, any> | (any[] & Record<string, any>);\n\nexport type LiveResult = any;\n\nexport type LiveCommand = Command<LiveContext, LiveResult>;\n\nexport type LiveCommandMap<K extends string | number | symbol = string> = Record<K, LiveCommand>;\n\nexport type LiveProvider = CommandProvider<LiveContext, LiveResult>;\n\nexport class LiveRuntimeImpl extends Runtime<LiveContext, LiveResult>\n{\n\n  public constructor()\n  {\n    super(defs);\n  }\n\n  public wrapCommandWithReturn(cmd: LiveCommand): LiveCommand\n  {\n    return (context) => {\n      const result = cmd(context);\n\n      return this.returnProperty in context\n        ? context[this.returnProperty]\n        : result;\n    };\n  }\n\n  public getCommandWithReturn(expr: Expression, provider: LiveProvider = this): LiveCommand\n  {\n    return this.wrapCommandWithReturn(this.getCommand(expr, provider));\n  }\n\n  public run(expr: any, context: LiveContext, provider: LiveProvider = this): LiveResult\n  {\n    return this.getCommandWithReturn(this.defs.getExpression(expr), provider)(context);\n  }\n\n}\n\nexport const LiveRuntime = new LiveRuntimeImpl();\n","\nimport { isNumber, isString, isArray, isMap, isObject, isDate, isBoolean, isColor, Color } from 'expangine-runtime';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\n\nexport function saveScope<K extends string>(context: LiveContext, scope: Record<string, K>): Record<K, any> \n{\n  const popped = {} as Record<K, string>;\n\n  for (const prop in scope) \n  {\n    const alias = scope[prop];\n\n    popped[alias] = context[alias]\n  }\n\n  return popped;\n}\n\nexport function restoreScope<K extends string>(context: LiveContext, saved: Record<K, any>) \n{\n  for (const prop in saved)\n  { \n    if (saved[prop] === undefined)\n    {\n      delete context[prop];\n    }\n    else\n    {\n      context[prop] = saved[prop];\n    }\n  }\n}\n\nexport function preserveScope<R = any>(context: LiveContext, props: string[], run: () => R): R\n{\n  const saved = props.map((p) => context[p]);\n\n  const result = run();\n\n  saved.forEach((last, i) => \n    last === undefined\n      ? delete context[props[i]]\n      : context[props[i]] = last\n  );\n\n  return result;\n}\n\nexport function _optional (cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: LiveResult): LiveResult \n{\n  return cmd ? cmd(context) : defaultValue;\n}\n\nexport function _bool (cmd: LiveCommand | undefined, context: LiveContext, defaultValue: boolean = false): boolean\n{\n  return cmd ? !!cmd(context) : defaultValue;\n}\n\nexport function _typed<T> (isValid: (value: any) => value is T, invalidValueDefault: T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue;\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue;\n  };\n}\n\nexport function _typedDynamic<T> (isValid: (value: any) => value is T, invalidValueDefault: () => T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: () => T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue();\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue();\n  };\n}\n\nexport const _boolMaybe = _typed<boolean | undefined> (isBoolean, undefined);\n\nexport const _number = _typed (isNumber, Number.NaN);\n\nexport const _numberMaybe = _typed<number | undefined> (isNumber, undefined);\n\nexport const _text = _typed (isString, '');\n\nexport const _textMaybe = _typed<string | undefined> (isString, undefined);\n\nexport const _list  = _typedDynamic<any[]> (isArray, () => []);\n\nexport const _listMaybe = _typed<any[] | undefined> (isArray, undefined);\n\nexport const _map = _typedDynamic<Map<any, any>> (isMap, () => new Map());\n\nexport const _mapMaybe = _typed<Map<any, any> | undefined> (isMap, undefined);\n\nexport const _object = _typedDynamic<any>(isObject, () => ({}));\n\nexport const _objectMaybe = _typed<any | undefined>(isObject, undefined);\n\nexport const _color = _typedDynamic<Color>(isColor, () => ({ r: 255, g: 255, b: 255, a: 255 }));\n\nexport const _colorMaybe = _typed<any | undefined>(isColor, undefined);\n\nexport const _date = _typedDynamic<Date>(isDate, () => new Date());\n\nexport const _dateMaybe = _typed<Date | undefined> (isDate, undefined);\n\nexport function _asList(getValue: LiveCommand, context: LiveContext)\n{\n  return [ getValue(context) ];\n}\n\nexport function _asMap(getValue: LiveCommand, context: LiveContext)\n{\n  return new Map([['value', getValue(context) ]]);\n}\n\nexport function _asObject(getValue: LiveCommand, context: LiveContext)\n{\n  return { value: getValue(context) };\n}\n\nexport function _asTuple(getValue: LiveCommand, context: any)\n{\n  return [ getValue(context) ];\n}\n\nexport function _colorOrNumber(getValue: LiveCommand, context: any)\n{\n  const value = getValue(context);\n\n  if (isColor(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value))\n  {\n    return { r: value, g: value, b: value, a: value };\n  }\n\n  return { r: 255, g: 255, b: 255, a: 255 };\n}\n","\nimport { Runtime, ConstantExpression, GetExpression, OperationExpression, ChainExpression, \n  IfExpression, NotExpression, AndExpression, OrExpression, ForExpression, \n  WhileExpression, DefineExpression, SwitchExpression, SetExpression, \n  DoExpression, TemplateExpression, UpdateExpression, InvokeExpression, \n  ReturnExpression, NoExpression, TupleExpression, ObjectExpression, SubExpression,\n  isUndefined, objectMap, isObject, isArray, isString, copy } from 'expangine-runtime';\nimport { preserveScope } from './helper';\nimport { LiveCommand, LiveCommandMap, LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n\n  function hasSubs(x: any)\n  {\n    return isObject(x) || isArray(x) || isString(x);\n  }\n\n  function traversePath(context: any, value: any, path: LiveCommand[])\n  {\n    const end = path.length - 1;\n    let previous;\n    let step;\n\n    for (let i = 0; i <= end && !isUndefined(value); i++) \n    {\n      step = path[i](context);\n      previous = value;\n\n      const next = value instanceof Map\n        ? value.get(step)\n        : value === null\n          ? undefined\n          : value[step];\n\n      if (isUndefined(next) && i !== end) \n      {\n        return { end: false, previous, step, value: undefined };\n      }\n\n      value = next;\n    }\n\n    return { end: true, previous, step, value };\n  }\n\n  run.setExpression(ConstantExpression, (expr, provider) => \n  {\n    return () => copy(expr.value)\n  });\n\n  run.setExpression(GetExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n\n    return (context) => traversePath(context, context, parts).value;\n  });\n\n  run.setExpression(SetExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n\n    return (context) => \n    {\n      const { end, previous, step } = traversePath(context, context, parts);\n\n      if (end) \n      {\n        if (previous instanceof Map)\n        {\n          previous.set(step, getValue(context));\n        }\n        else if (hasSubs(previous))\n        {\n          previous[step] = getValue(context);\n        }\n        else\n        {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(UpdateExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n    const currentVariable: string = expr.currentVariable;\n\n    return (context) => \n    {\n      const { end, previous, step, value } = traversePath(context, context, parts);\n\n      if (end)\n      {\n        return preserveScope(context, [currentVariable], () => \n        {\n          context[currentVariable] = value;\n        \n          if (previous instanceof Map)\n          {\n            previous.set(step, getValue(context));\n          }\n          else if (hasSubs(previous))\n          {\n            previous[step] = getValue(context);\n          }\n          else\n          {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(SubExpression, (expr, provider) => \n  {\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n\n    return (context) => traversePath(context, getValue(context), parts).value;\n  });\n\n  run.setExpression(OperationExpression, (expr, provider) => \n  {\n    const params: LiveCommandMap = objectMap(expr.params, e => provider.getCommand(e));\n    const op = provider.getOperation(expr.name);\n\n    if (!op) \n    { \n      throw new Error(`Operation with ${expr.name} is not defined in the given runtime.`);\n    }\n    \n    const defaults = provider.getOperationScopeDefaults(expr.name);\n    let scopeAlias = expr.scopeAlias;\n\n    if (defaults) \n    {\n      for (const prop in defaults) \n      {\n        if (!(prop in scopeAlias)) \n        { \n          if (scopeAlias === expr.scopeAlias) \n          {\n            scopeAlias = { ...scopeAlias };\n          }\n\n          scopeAlias[prop] = defaults[prop];\n        }\n      }\n    }\n\n    const operationCommand = op(params, scopeAlias);\n\n    return (context) =>\n    {\n      if (provider.returnProperty in context) return;\n\n      return operationCommand(context);\n    };\n  });\n\n  run.setExpression(ChainExpression, (expr, provider) => \n  { \n    const chain: LiveCommand[] = expr.chain.map(data => provider.getCommand(data));\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      let last;\n\n      for (const cmd of chain)\n      {\n        last = cmd(context);\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n      }\n\n      return last;\n    };\n  });\n\n  run.setExpression(IfExpression, (expr, provider) => \n  {\n    const cases: [LiveCommand, LiveCommand][] = expr.cases.map(([test, result]) => [provider.getCommand(test), provider.getCommand(result)]);\n    const otherwise: LiveCommand = provider.getCommand(expr.otherwise);\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const caseExpression of cases)\n      {\n        const [test, result] = caseExpression;\n\n        if (test(context)) \n        {\n          return provider.returnProperty in context\n            ? undefined\n            : result(context);\n        }\n      }\n      \n      if (provider.returnProperty in context) return;\n\n      return otherwise(context);\n    };\n  });\n\n  run.setExpression(SwitchExpression, (expr, provider) => \n  {\n    const valueCommand: LiveCommand = provider.getCommand(expr.value);\n    const cases: [LiveCommand[], LiveCommand][] = expr.cases.map(([tests, result]) => [\n      tests.map(t => provider.getCommand(t)),\n      provider.getCommand(result)\n    ]);\n    const defaultCase: LiveCommand = provider.getCommand(expr.defaultCase);\n    const isEqual = provider.getOperation(expr.op);\n    const noScope = {};\n    \n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      const value = valueCommand(context);\n\n      if (provider.returnProperty in context) return;\n\n      for (const [tests, result] of cases)\n      {\n        let matches = false;\n\n        for (const test of tests) \n        { \n          if (isEqual({ value: () => value, test }, noScope)(context)) \n          {\n            matches = true;\n            break;\n          }\n\n          if (provider.returnProperty in context) return;\n        }\n\n        if (matches) \n        {\n          return result(context);\n        }\n      }\n\n      return defaultCase(context);\n    };\n  });\n\n  run.setExpression(NotExpression, (expr, provider) => \n  {\n    const expression: LiveCommand = provider.getCommand(expr.expression);\n\n    return (context) => !expression(context);\n  });\n\n  run.setExpression(AndExpression, (expr, provider) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n    const defaultResult: boolean = expressions.length > 0;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const and of expressions)\n      {\n        if (!and(context) || provider.returnProperty in context)\n        {\n          return false;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(OrExpression, (expr, provider) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n    const defaultResult: boolean = expressions.length === 0;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const or of expressions)\n      {\n        const pass = or(context);\n\n        if (pass || provider.returnProperty in context)\n        {\n          return pass;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(ForExpression, (expr, provider) => \n  {\n    const variable: string = expr.variable;\n    const start: LiveCommand = provider.getCommand(expr.start);\n    const end: LiveCommand = provider.getCommand(expr.end);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [variable, breakVariable], () => \n      {\n        context[breakVariable] = false;\n\n        let i = start(context);\n        let iterations = 0;\n        let stop = end(context);\n        let last;\n        const dir = i < stop ? 1 : -1;\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n\n        while ((dir === 1 ? i <= stop : i >= stop) && iterations++ < max) \n        {\n          context[variable] = i;\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n\n          i += dir;\n          stop = end(context);\n\n          if (provider.returnProperty in context) return;\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(WhileExpression, (expr, provider) => \n  {\n    const condition: LiveCommand = provider.getCommand(expr.condition);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        while (condition(context) && iterations++ < max)\n        {\n          if (provider.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DoExpression, (expr, provider) => \n  {\n    const condition: LiveCommand = provider.getCommand(expr.condition);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        do\n        {\n          if (provider.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n\n        } while(condition(context) && iterations++ < max);\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DefineExpression, (expr, provider) => \n  {\n    const define: [string, LiveCommand][] = expr.define.map(([name, e]) => [name, provider.getCommand(e)]);\n    const vars: string[] = define.map(([name]) => name);\n    const body: LiveCommand = provider.getCommand(expr.body);\n\n    return (context) =>\n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, vars, () =>\n      {\n        for (const [name, defined] of define)\n        {\n          if (provider.returnProperty in context)\n          {\n            return;\n          }\n\n          context[name] = defined(context);\n        }\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n\n        return body(context);\n      });\n    };\n  });\n\n  run.setExpression(TemplateExpression, (expr, provider) => \n  {\n    const SECTION_TYPES = 2;\n    const SECTION_INDEX_CONSTANT = 0;\n\n    const params: LiveCommandMap = objectMap(expr.params, e => provider.getCommand(e));\n    const template: string = expr.template;\n\n    const sections = template.split(/[\\{\\}]/).map((section, index) => {\n      return index % SECTION_TYPES === SECTION_INDEX_CONSTANT\n        ? (_source: any) => section\n        : (source: any) => source && section in source ? source[section] : '';\n    });\n\n    return (context) =>\n    {\n      const source = objectMap(params, p => p(context));\n\n      return sections.reduce((out, section) => out + section(source), '');\n    };\n  });\n\n  run.setExpression(InvokeExpression, (expr, provider) =>\n  {\n    const func = provider.getFunction(expr.name);\n    const command = provider.getCommand(func.options.expression);\n    const args = objectMap(expr.args, a => provider.getCommand(a));\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      const params = objectMap(args, a => a(context));\n\n      command(params);\n\n      return params[provider.returnProperty];\n    };\n  });\n\n  run.setExpression(ReturnExpression, (expr, provider) =>\n  {\n    const returnValue = provider.getCommand(expr.value);\n\n    return (context) => context[provider.returnProperty] = returnValue(context);\n  });\n\n  run.setExpression(TupleExpression, (expr, provider) =>\n  {\n    const elements: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n\n    return (context) => elements.map(cmd => cmd(context));\n  });\n\n  run.setExpression(ObjectExpression, (expr, provider) =>\n  {\n    const props: LiveCommandMap = objectMap(expr.props, e => provider.getCommand(e));\n\n    return (context) => objectMap(props, cmd => cmd(context));\n  });\n\n  run.setExpression(NoExpression, () => () => undefined);\n\n}","import { Runtime, AnyOps, parse, compare, copy, toString, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _asList, _asTuple, _asMap, _asObject, restoreScope, saveScope } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = AnyOps;\n\n  // Operations\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.isDefined, (params) => (context) => {\n    const value = params.value(context);\n    \n    return value !== null && value !== undefined;\n  });\n\n  run.setOperation(ops.getDefined, (params, scope) => (context) => {\n    const value = params.value(context);\n    const isDefined = value !== null && value !== undefined;\n  \n    if (isDefined) {\n      const saved = saveScope(context, scope);\n      context[scope.defined] = value;\n      params.defined(context);\n      restoreScope(context, saved);\n    }\n\n    return isDefined;\n  });\n\n  run.setOperation(ops.coalesce, (params) => (context) => {\n    const a = params.a(context);\n    if (a !== null && a !== undefined) return a;\n    const b = params.b(context);\n    if (b !== null && b !== undefined) return b;\n    const c = params.c(context);\n    if (c !== null && c !== undefined) return c;\n    const d = params.d(context);\n    if (d !== null && d !== undefined) return d;\n    const e = params.e(context);\n    if (e !== null && e !== undefined) return e;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    true\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    toString(params.value(context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n};","\nimport { Runtime, BooleanOps, isBoolean, COMPONENT_MAX } from 'expangine-runtime';\nimport { _bool, _asList, _asObject, _asTuple, _asMap, _boolMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = BooleanOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    false\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _boolMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.and, (params) => (context) => \n    _bool(params.a, context) && _bool(params.b, context)\n  );\n\n  run.setOperation(ops.or, (params) => (context) => \n    _bool(params.a, context) || _bool(params.b, context)\n  );\n\n  run.setOperation(ops.xor, (params) => (context) => \n    _bool(params.a, context) !== _bool(params.b, context)\n  );\n\n  run.setOperation(ops.not, (params) => (context) => \n    !_bool(params.a, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    (_bool(params.value, context) ? 1 : 0) - (_bool(params.test, context) ? 1 : 0)\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isBoolean(params.value(context))\n  );\n\n  run.setOperation(ops.isTrue, (params) => (context) => \n    _bool(params.value, context, false)\n  );\n\n  run.setOperation(ops.isFalse, (params) => (context) => \n    !_bool(params.value, context, false)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = params.value(context);\n\n    return value ? 1 : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) ? 'true' : 'false'\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ColorOps, COMPONENT_MAX, Color, clampComponent, ColorType, ColorSpaceHSL, ColorNames, isColor, ColorSpaceRGB } from 'expangine-runtime';\nimport { _color, _colorMaybe, _number, saveScope, restoreScope, _colorOrNumber, _bool, _text, _object, _asList, _asMap, _asTuple } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: no-bitwise\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ColorOps;\n\n  // Static \n\n  run.setOperation(ops.create, () => () =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _colorMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0)\n  );\n\n  run.setOperation(ops.copy, (params) => (context) => \n    ({ ..._color(params.value, context) })\n  );\n\n  run.setOperation(ops.build, (params) => (context) => ({\n    r: _number(params.r, context, COMPONENT_MAX),\n    g: _number(params.g, context, COMPONENT_MAX),\n    b: _number(params.b, context, COMPONENT_MAX),\n    a: _number(params.a, context, COMPONENT_MAX),\n  }));\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.op, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.test] = test.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.test] = test.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.test] = test.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.test] = test.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.clamp, (params) => (context) => {\n    const value = _color(params.value, context);\n    \n    return {\n      r: clampComponent(value.r),\n      g: clampComponent(value.g),\n      b: clampComponent(value.b),\n      a: clampComponent(value.a),\n    };\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r,\n      g: value.g + addend.g,\n      b: value.b + addend.b,\n      a: alpha ? value.a + addend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.adds, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const scale = _colorOrNumber(params.addendScale, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r * scale.r,\n      g: value.g + addend.g * scale.g,\n      b: value.b + addend.b * scale.b,\n      a: alpha ? value.a + addend.a * scale.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _color(params.value, context);\n    const subtrahend = _colorOrNumber(params.subtrahend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r - subtrahend.r,\n      g: value.g - subtrahend.g,\n      b: value.b - subtrahend.b,\n      a: alpha ? value.a - subtrahend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.mul, (params) => (context) => {\n    const value = _color(params.value, context);\n    const multiplier = _colorOrNumber(params.multiplier, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r * multiplier.r,\n      g: value.g * multiplier.g,\n      b: value.b * multiplier.b,\n      a: alpha ? value.a * multiplier.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.div, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: divSafe(value.r, divisor.r),\n      g: divSafe(value.g, divisor.g),\n      b: divSafe(value.b, divisor.b),\n      a: alpha ? divSafe(value.a, divisor.a) : value.a,\n    };\n  });\n\n  run.setOperation(ops.mod, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r % divisor.r,\n      g: value.g % divisor.g,\n      b: value.b % divisor.b,\n      a: alpha ? value.a % divisor.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.format, (params) => (context) => {\n    const value = _color(params.value, context);\n    const formatId = _text(params.format, context);\n    const format = ColorType.getFormat(formatId);\n\n    if (!format) {\n      return '';\n    }\n\n    return format.formatter(value);\n  });\n\n  run.setOperation(ops.parse, (params) => (context) => {\n    const value = params.value(context);\n    \n    return ColorType.baseType.normalize(value);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _color(params.start, context);\n    const end = _color(params.end, context);\n    const delta = _number(params.delta, context, 0);\n\n    return {\n      r: (end.r - start.r) * delta + start.r,\n      g: (end.g - start.g) * delta + start.g,\n      b: (end.b - start.b) * delta + start.b,\n      a: (end.a - start.a) * delta + start.a,\n    };\n  });\n\n  run.setOperation(ops.lighten, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = _number(params.amount, context, 0);\n\n    return {\n      r: value.r + (COMPONENT_MAX - value.r) * amount,\n      g: value.g + (COMPONENT_MAX - value.g) * amount,\n      b: value.b + (COMPONENT_MAX - value.b) * amount,\n      a: value.a + (COMPONENT_MAX - value.a) * amount,\n    };\n  });\n\n  run.setOperation(ops.darken, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = 1 - _number(params.amount, context, 0);\n\n    return {\n      r: value.r * amount,\n      g: value.g * amount,\n      b: value.b * amount,\n      a: value.a * amount,\n    };\n  });\n\n  run.setOperation(ops.toHSL, (params) => (context) =>\n    ColorSpaceHSL.fromColor(_color(params.value, context))\n  );\n\n  run.setOperation(ops.fromHSL, (params) => (context) =>\n    ColorSpaceHSL.toColor(_object(params.value, context))\n  );\n\n  run.setOperation(ops.luminance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const L = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722;\n\n    return L / COMPONENT_MAX;\n  });\n\n  run.setOperation(ops.contrast, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const valueL = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722; \n    const testL = test.r * 0.2126 + test.g * 0.7152 + test.b * 0.0722;\n    const L1 = Math.max(valueL, testL);\n    const L2 = Math.min(valueL, testL);\n\n    return (L1 + 0.05) / (L2 + 0.05);\n  });\n\n  run.setOperation(ops.invert, (params) => (context) => {\n    const value = _color(params.value, context);\n    const alpha = _bool(params.alpha, context, false);\n\n    return {\n      r: COMPONENT_MAX - value.r,\n      g: COMPONENT_MAX - value.g,\n      b: COMPONENT_MAX - value.b,\n      a: alpha ? COMPONENT_MAX - value.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.opaque, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = COMPONENT_MAX;\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.alpha, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = _number(params.alpha, context, COMPONENT_MAX);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.distance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    \n    return dist(value, test);\n  });\n\n  run.setOperation(ops.named, (params) => (context) => {\n    const value = _color(params.name, context);\n\n    return {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    };\n  });\n\n  run.setOperation(ops.getName, (params) => (context) => {\n    const value = _color(params.value, context);\n    let closestName: string = '';\n    let closestDistance: number = -1;\n\n    for (const [name, named] of ColorNames.options.constants.entries()) {\n      const distance = dist(value, named);\n      if (closestDistance === -1 || distance < closestDistance) {\n        closestName = name;\n        closestDistance = distance;\n      }\n    }\n\n    return closestName;\n  });\n\n  run.setOperation(ops.blend, (params) => (context) => {\n    const top = _color(params.top, context);\n    const bottom = _color(params.bottom, context);\n    const modeName = params.mode(context);\n    const blender = BlendFunctions[modeName];\n\n    if (!blender) {\n      return top;\n    }\n\n    return {\n      r: blender(bottom.r, top.r),\n      g: blender(bottom.g, top.g),\n      b: blender(bottom.b, top.b),\n      a: top.a,\n    };\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isColor(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, () => () =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asDate, () => () =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = _color(params.value, context);\n\n    return (value.r & 0xFF) | \n      ((value.g & 0xFF) << 8) |\n      ((value.b & 0xFF) << 16) |\n      ((value.a & 0xFF) << 24);\n  })\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    ColorSpaceRGB.formatMap.bestfit.formatter(_color(params.value, context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compareColor(x: Color, y: Color, epsilon: number): number\n{\n  const r = Math.abs(x.r - y.r) <= epsilon;\n  const g = Math.abs(x.g - y.g) <= epsilon;\n  const b = Math.abs(x.b - y.b) <= epsilon;\n  const a = Math.abs(x.a - y.a) <= epsilon;\n\n  return r && g && b && a\n    ? 0\n    : (x.r + x.g + x.b + x.a) - (y.r + y.g + y.b + y.a);\n}\n\nfunction divSafe(a: number, b: number): number\n{\n  return b === 0 ? 0 : a / b;\n}\n\nfunction dist(a: Color, b: Color): number\n{\n  return Math.abs(a.r - b.r) + \n    Math.abs(a.g - b.g) + \n    Math.abs(a.b - b.b) + \n    Math.abs(a.a - b.a);\n}\n\nfunction mul(a: number, b: number): number\n{\n  return (a * b + COMPONENT_MAX) >> 8;\n}\n\nfunction div(a: number, b: number): number\n{\n  return b === 0 ? 0 : ((a << 8) - a) / b;\n}\n\nfunction inv(a: number): number\n{\n  return COMPONENT_MAX - a;\n}\n\nconst BlendFunctions: Record<string, (a: number, b: number) => number> = {\n  multiply:   (a, b) => mul(a, b),\n  screen:     (a, b) => inv(mul(inv(a), inv(b))),\n  overlay:    (a, b) => a < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  hard:       (a, b) => b < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  soft:       (a, b) => mul(inv(2 * b), mul(a, a)) + 2 * mul(b, a),\n  dodge:      (a, b) => div(a, inv(b)),\n  burn:       (a, b) => div(inv(b), a),\n  divide:     (a, b) => a === b ? COMPONENT_MAX : div(a, b),\n  addition:   (a, b) => clampComponent(a + b),\n  sub:        (a, b) => clampComponent(a - b),\n  diff:       (a, b) => clampComponent(b - a),\n  darken:     (a, b) => Math.min(a, b),\n  lighten:    (a, b) => Math.max(a, b),\n};","\nimport { Runtime, DateOps, DateType, currentLocale, compareDates, startOf, mutate, add, getters, setters, endOf, getDaysInMonth, getDaysInYear, getWeeksInYear, diff, adjusters, getDateOffset, isDaylightSavingTime, isLeapYear, Unit, parse, DateFormat, isDate, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _date, _text, _bool, _asList, _asMap, _asObject, _asTuple, _dateMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = DateOps;\n\n  const MILLIS_IN_SECONDS = 1000;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.now, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.today, (params) => (context) =>\n    startOf.day(new Date())\n  );\n\n  run.setOperation(ops.tomorrow, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, +1))\n  );\n\n  run.setOperation(ops.yesterday, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, -1))\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _dateMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.parse, (params) => (context) => \n    _bool(params.parseAsUTC, context, false)\n      ? new DateType({ parseAsUTC: true }).normalize(params.value(context))\n      : DateType.baseType.normalize(params.value(context))\n  );\n\n  run.setOperation(ops.fromText, (params) => (context) => \n    DateType.baseType.normalize(_text(params.value, context))\n  );\n\n  run.setOperation(ops.fromTimestamp, (params) => (context) => \n    new Date(_number(params.value, context, Date.now()))\n  );\n\n  run.setOperation(ops.fromTimestampSeconds, (params) => (context) => \n    new Date(_number(params.value, context, Date.now() / MILLIS_IN_SECONDS) * MILLIS_IN_SECONDS)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() < test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.max, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() > test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.get, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    \n    return prop in getters ? getters[prop](value) : -1;\n  });\n\n  run.setOperation(ops.set, (params) => (context) => {\n    let value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    const update = _number(params.set, context, 0);\n\n    if (prop in setters) {\n      value = new Date(value.getTime());\n      setters[prop](value, update);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    let value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 1);\n\n    if (unit in add) {\n      value = new Date(value.getTime());\n      add[unit](value, amount);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    let value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 1);\n\n    if (unit in add) {\n      value = new Date(value.getTime());\n      add[unit](value, -amount);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in startOf ? mutate(value, startOf[unit]) : value;\n  });\n\n  run.setOperation(ops.endOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in endOf ? mutate(value, endOf[unit]) : value;\n  });\n\n  run.setOperation(ops.daysInMonth, (params) => (context) => \n    getDaysInMonth(_date(params.value, context))\n  );\n\n  run.setOperation(ops.daysInYear, (params) => (context) => \n    getDaysInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.weeksInYear, (params) => (context) => \n    getWeeksInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    new Date(_date(params.value, context).getTime())\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n\n    return unit in startOf ? compareDates(value, test, unit) : 0;\n  });\n\n  run.setOperation(ops.diff, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis');\n    const absolute = _bool(params.absolute, context, true);\n    const adjust = _text(params.adjust, context, 'down');\n\n    if (!(unit in diff) || !(adjust in adjusters))\n    {\n      return Number.NaN;\n    }\n\n    const amount = adjusters[adjust]( diff[unit](value, test) );\n\n    return absolute ? Math.abs(amount) : amount;\n  });\n\n  run.setOperation(ops.timezoneOffset, (params) => (context) => \n    getDateOffset(_date(params.value, context))\n  );\n\n  run.setOperation(ops.toText, (params) => (context) =>\n    DateFormat.format(_text(params.format, context), [_date(params.value, context), currentLocale])\n  );\n\n  run.setOperation(ops.toISOText, (params) => (context) => \n    _date(params.value, context).toISOString()\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isDate(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) === 0\n  );\n\n  run.setOperation(ops.isBefore, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isBeforeOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isAfter, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isAfterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _date(params.value, context);\n    const start = _date(params.start, context);\n    const end = _date(params.end, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    const startInclusive = _bool(params.startInclusive, context, true);\n    const endInclusive = _bool(params.endInclusive, context, false);\n\n    const startCompare = compareDates(value, start, unit);\n    const endCompare = compareDates(value, end, unit);\n    \n    const startOffset = startInclusive ? 0 : 1;\n    const endOffset = endInclusive ? 0 : -1;\n\n    return startCompare >= startOffset && endCompare <= endOffset;\n  });\n\n  run.setOperation(ops.isStartOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in startOf\n      ? mutate(value, startOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isEndOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in endOf\n      ? mutate(value, endOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isDST, (params) => (context) => \n    isDaylightSavingTime(_date(params.value, context))\n  );\n\n  run.setOperation(ops.isLeapYear, (params) => (context) => \n    isLeapYear(_date(params.value, context))\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    _date(params.value, context).getTime()\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ListOps, getCompare, isBoolean, isEmpty, isDate, isNumber, isString, isArray, COMPONENT_MAX, isColor } from 'expangine-runtime';\nimport { _list, _optional, _number, saveScope, restoreScope, _text, _bool, _asTuple, _asObject, _numberMaybe, _listMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ListOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) => \n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.build, (params, scope) => (context) => {\n    const n = _number(params.count, context);\n    const list: any[] = [];\n\n    if (n <= 0) \n    {\n      return list;\n    }\n\n    const saved = saveScope(context, scope);\n\n    if (_bool(params.sameItem, context, false)) \n    {\n      context[scope.index] = 0;\n      context[scope.last] = undefined;\n      context[scope.list] = list;\n      context[scope.count] = n;\n\n      const item = params.item(context);\n\n      for (let i = 0; i < n; i++) \n      {\n        list[i] = item;\n      }\n    } \n    else \n    {\n      let last;\n\n      for (let i = 0; i < n; i++) \n      {\n        context[scope.index] = i;\n        context[scope.last] = last;\n        context[scope.list] = list;\n        context[scope.count] = n;\n\n        const item = params.item(context);\n\n        last = item;\n        list.push(item);\n      }\n    }\n\n    restoreScope(context, saved);\n\n    return list;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.list, context)[_number(params.index, context)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context);\n    const prev = list[index];\n    list[index] = params.value(context);\n\n    return prev;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addFirst, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.unshift(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addLast, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.insert, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    const index = _number(params.index, context, 0);\n    if (item !== undefined) {\n      list.splice(index, 0, item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.remove, (params, scope) => (context) => \n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n, \n      (_, i, list) => (list.splice(i, 1), i), \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.removeFirst, (params, scope) => (context) => \n    _list(params.list, context).shift()\n  );\n\n  run.setOperation(ops.removeLast, (params, scope) => (context) => \n    _list(params.list, context).pop()\n  );\n\n  run.setOperation(ops.removeAt, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context, -1);\n    let item;\n    if (index >= 0 && index < list.length) {\n      item = list[index];\n      list.splice(index, 1);\n    }\n\n    return item;\n  });\n\n  run.setOperation(ops.removeWhere, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => n - 1, \n      n => -1,\n      [],\n      (item, index, list, removed) => {\n        if (params.where(context)) {\n          removed.push(item);\n          list.splice(index, 1);\n        }\n        \n        return removed;\n      }\n    )\n  );\n\n  run.setOperation(ops.contains, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n,\n      () => true, \n      () => false\n    )\n  );\n\n  run.setOperation(ops.find, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return undefined;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      undefined,\n      (item, index) => {\n        if (params.where(context)) {\n          return item;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.copy, (params, scope) => (context) => \n    params.deepCopy\n      ? handleList(\n          _list(params.list, context), \n          context, \n          scope, \n          list => list.map(item => {\n            context[scope.copy] = item;\n            \n            return params.deepCopy(context);\n          })\n        )\n      : _list(params.list, context).slice()\n  );\n\n  run.setOperation(ops.reverse, (params) => (context) => {\n    const list = _list(params.list, context);\n    const half = Math.floor(list.length / 2); \n    \n    for (let i = 0, j = list.length - 1; i < half; i++, j--) { \n      swap(list, i, j);\n    }\n    \n    return list;\n  });\n\n  run.setOperation(ops.exclude, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const exclude = _list(params.exclude, context);\n\n    for (const item of exclude) \n    {\n      handleListIsEqual(list, context, params, scope, item, n => 0, n => n, (_, k) => (list.splice(k, 1), true), () => false);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.overlap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const overlap = _list(params.overlap, context);\n    const overlapping: any[] = [];\n\n    for (const item of overlap) \n    {\n      if (handleListIsEqual(list, context, params, scope, item, n => 0, n => n, () => true, () => false))\n      {\n        overlapping.push(item)\n      }\n    }\n\n    return overlapping;\n  });\n\n  run.setOperation(ops.sort, (params, scope) => (context) =>\n    handleList(\n      _list(params.list, context), \n      context, \n      scope, \n      list => {\n        list.sort((value, test) => {\n          context[scope.list] = list;\n          context[scope.value] = value;\n          context[scope.test] = test;\n\n          return _number(params.compare, context, 0);\n        });\n\n        return list;\n      }\n    )\n  );\n\n  run.setOperation(ops.shuffle, (params) => (context) => {\n    const list = _list(params.list, context);\n    let times = _number(params.times, context, 1);\n    const n = list.length;\n\n    while (--times >= 0) {\n      for (let i = 0; i < n; i++) {\n        swap(list, i, Math.floor(Math.random() * n));\n      }\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.unique, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const skip = {};\n    const unique = [];\n\n    for (let i = 0; i < list.length - 1; i++) {\n      if (skip[i]) {\n        continue;\n      }\n\n      const item = list[i];\n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (!exists) {\n        unique.push(item);\n      }\n    }\n\n    return unique;\n  });\n\n  run.setOperation(ops.duplicates, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const once = _bool(params.once, context, false);\n    const skip = {};\n    const duplicates = [];\n\n    for (let i = 0; i < list.length; i++) {\n\n      const item = list[i];\n\n      if (skip[i]) {\n        if (once) {\n          continue;\n        } else {\n          duplicates.push(item);\n        }\n      }\n      \n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (exists) {\n        duplicates.push(item);\n      }\n    }\n\n    return duplicates;\n  });\n\n  run.setOperation(ops.take, (params) => (context) => \n    _list(params.list, context).slice(0, _number(params.count, context))\n  );\n\n  run.setOperation(ops.skip, (params) => (context) => \n    _list(params.list, context).slice(_number(params.count, context))\n  );\n\n  run.setOperation(ops.drop, (params) => (context) => {\n    const list = _list(params.list, context);\n    const count = _number(params.count, context);\n\n    return list.slice(0, list.length - count);\n  });\n\n  run.setOperation(ops.append, (params) => (context) => {\n    const list = _list(params.list, context);\n    const append = _list(params.append, context);\n\n    return list.concat(append);\n  });\n\n  run.setOperation(ops.prepend, (params) => (context) => {\n    const list = _list(params.list, context);\n    const prepend = _list(params.prepend, context);\n\n    return prepend.concat(list);\n  });\n\n  run.setOperation(ops.indexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n, _number(params.start, context, 0))), \n      n => n, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.lastIndexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context),\n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n - 1, _number(params.start, context, n - 1))), \n      n => -1, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.findIndex, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return -1;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      -1,\n      (item, index) => {\n        if (params.where(context)) {\n          return index;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.last, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[list.length - 1];\n  });\n\n  run.setOperation(ops.first, (params) => (context) => \n    _list(params.list, context)[0]\n  );\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _list(params.list, context).length\n  );\n\n  run.setOperation(ops.randomList, (params) => (context) => {\n    const list = _list(params.list, context);\n    const n = list.length;\n    const count = Math.min(_number(params.count, context, 0), n);\n\n    if (count === n)\n    {\n      return list.slice();\n    }\n\n    const taken = {};\n    const random = [];\n\n    while (random.length < count)\n    {\n      const i = Math.floor(Math.random() * n);\n\n      if (!taken[i])\n      {\n        random.push(list[i]);\n        taken[i] = true;\n      }\n    }\n\n    return random;\n  });\n\n  run.setOperation(ops.random, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[Math.floor(Math.random() * list.length)];\n  });\n\n  // Iteration\n\n  run.setOperation(ops.join, (params, scope) => (context) =>\n    _text(params.prefix, context) + \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n,\n      '',\n      (item, index, list, sum) => (\n        sum\n          ? sum \n            + _text(params.delimiter, context, ', ') \n            + _text(params.toText, context, item)\n          : sum\n            + _text(params.toText, context, item)\n      )\n    ) +\n    _text(params.suffix, context)\n  );\n\n  run.setOperation(ops.each, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const reverse = _bool(params.reverse, context, false);\n\n    handleListIteration(list, context, scope, \n      n => reverse ? n - 1 : 0, \n      n => reverse ? 0 - 1 : n, \n      undefined,\n      () => params.each(context)\n    );\n\n    return list;\n  });\n\n  run.setOperation(ops.filter, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context),\n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (params.filter(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.not, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (!params.not(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.map, (params, scope) => (context) => \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, mapped) => {\n        mapped.push(params.transform(context));\n        \n        return mapped;\n      }\n    )\n  );\n\n  run.setOperation(ops.split, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      { pass: [], fail: [] },\n      (item, index, list, result) => {\n        if (params.pass(context)) {\n          result.pass.push(item);\n        } else {\n          result.fail.push(item);\n        }\n\n        return result;\n      }\n    )\n  );\n\n  run.setOperation(ops.reduce, (params, scope) => (context) =>\n    handleListIteration(_list(params.list, context), context, scope, \n      n => 0, \n      n => n, \n      params.initial(context),\n      (item, index, list, reduced) => {\n        context[scope.reduced] = reduced;\n\n        return params.reduce(context);\n      }\n    )\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context) => {\n    const list = _list(params.value, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return list.length - test.length;\n    }\n\n    let less = 0, more = 0;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n    });\n\n    return getCompare(less, more);\n  });\n\n  run.setOperation(ops.group, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      type Grouping = { by: any, group: any[] };\n\n      const map = new Map<any, Grouping>();\n      const groups: Grouping[] = [];\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const by = params.by(context);\n        const grouping = map.get(by);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (grouping) {\n          grouping.group.push(keyValue);\n        } else {\n          const newGrouping: Grouping = {\n            by, group: [ keyValue ],\n          };\n          groups.push(newGrouping);\n          map.set(by, newGrouping);\n        }\n      }\n\n      return groups;\n    });\n  });\n\n  run.setOperation(ops.toListMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map<any, any[]>();\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const keyList = map.get(key);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (keyList) {\n          keyList.push(keyValue);\n        } else {\n          map.set(key, [\n            keyValue\n          ]);\n        }\n      }\n\n      return map;\n    });\n  });\n\n  run.setOperation(ops.toMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map();\n\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = item;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const value = _optional(params.getValue, context, item);\n\n        map.set(key, value);\n      }\n\n      return map;\n    });\n  });\n\n  // Aggregates\n\n  run.setOperation(ops.min, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.min(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.max, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.max(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.sum, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : value + agg;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.avg, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0 },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg.count === 0 ? null : agg.sum / agg.count,\n    )\n  );\n\n  run.setOperation(ops.std, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / agg.count;\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.variance, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         if (agg.count === 1) {\n           return 0;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / (agg.count - 1);\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.median, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => agg.values.length === 0\n        ? null\n        : agg.values.length % 2 === 1\n          ? agg.values[Math.floor(agg.values.length / 2)]\n          : (\n              agg.values[Math.floor(agg.values.length / 2) - 1] +\n              agg.values[Math.floor(agg.values.length / 2)]\n          ) / 2,\n    )\n  );\n\n  run.setOperation(ops.bitand, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0xffffffff,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg & value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg | value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitxor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg ^ value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length > 0\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return false;\n    }\n\n    let equal = true;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        if (!params.isEqual(context)) {\n          equal = false;\n          break;\n        }\n      }\n    });\n\n    return equal;\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => !isEmpty(v))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _list(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => {\n    const value = _list(params.value, context);\n\n    return new Map(value.map((v, i) => [i.toString(), v]));\n  });\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.length)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, () => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}\n\nfunction swap(arr: any[], i: number, k: number)\n{\n  const temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\n\nfunction handleList<R>(list: any[], context: object, scope: Record<string, string>, handle: (list: any[]) => R): R\n{\n  const saved = saveScope(context, scope);\n\n  const result = handle(list);\n\n  restoreScope(context, saved);\n\n  return result;\n}\n\nfunction handleAggregate<A>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  initialAggregate: A,\n  aggregate: (current: any, index: number, list: any[], aggregate: A) => A,\n  getAggregate: (aggregate: A) => number | null,\n): number | null {\n  return handleList(list, context, scope, () =>\n  {\n    let agg: A | null = initialAggregate;\n\n    for (let i = 0; i < list.length; i++)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      agg = aggregate(item, i, list, agg);\n    }\n\n    return getAggregate(agg);\n  });\n}\n\nfunction handleListIteration<R>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  start: (n: number) => number,\n  end: (n: number) => number,\n  initialResult: R,\n  onItem: (current: any, index: number, list: any[], lastResult: R) => R,\n  earlyExit: boolean = false\n): R \n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n    let result = initialResult;\n\n    while (i !== e)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      const newResult = onItem(item, i, list, result);\n\n      if (earlyExit)\n      {\n        if (newResult !== undefined)\n        {\n          return newResult;\n        }\n      }\n      else\n      {\n        result = newResult;\n      }\n\n      if (list[i] === item || i !== 1)\n      {\n        i += d;\n      }\n    }\n\n    return result;\n  });\n}\n\nfunction handleListIsEqual<R>(\n  list: any[],\n  context: object, \n  params: Record<'list' | 'isEqual', LiveCommand>, \n  scope: Record<'list' | 'value' | 'test', string>, \n  value: any, \n  start: (n: number) => number,\n  end: (n: number) => number,\n  handleMatch: (current: any, index: number, list: any[]) => R | undefined,\n  getDefaultResult: (list: any[]) => R\n): R\n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n\n    while (i !== e)\n    {\n      const test = list[i];\n      const next = list[i + d];\n\n      context[scope.list] = list;\n      context[scope.value] = value;\n      context[scope.test] = test;\n\n      if (params.isEqual(context)) \n      {\n        const matchResult = handleMatch(test, i, list);\n\n        if (matchResult !== undefined)\n        {\n          return matchResult;\n        }\n        else if (list[i] === next)\n        {\n          i -= d;\n        }\n      }\n\n      i += d;\n    }\n\n    return getDefaultResult(list);\n  });\n}","import { Runtime, MapOps, toArray, getCompare, isMap, isBoolean, isDate, isNumber, isObject, isString, isArray, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { saveScope, restoreScope, _map, _optional, _number, _mapMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = MapOps;\n    \n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Map()\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _mapMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) => \n    _map(params.map, context).get(params.key(context))\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const key = params.key(context);\n    const existing = map.get(key);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = existing;\n\n    const value = params.value(context);\n\n    map.set(key, value);\n\n    restoreScope(context, saved);\n\n    return existing;\n  });\n\n  run.setOperation(ops.has, (params) => (context) =>\n    _map(params.map, context).has(params.key(context))\n  );\n\n  run.setOperation(ops.delete, (params) => (context) =>\n    _map(params.map, context).delete(params.key(context))\n  );\n\n  run.setOperation(ops.keys, (params) => (context) =>\n    toArray(_map(params.map, context).keys())\n  );\n\n  run.setOperation(ops.values, (params) => (context) =>\n    toArray(_map(params.map, context).values())\n  );\n\n  run.setOperation(ops.entries, (params) => (context) => {\n    const map = _map(params.map, context);\n    const entries: { keys: any[], values: any[] } = { keys: [], values: [] };\n\n    for (const [key, value] of map.entries()) {\n      entries.keys.push(key);\n      entries.values.push(value);\n    }\n\n    return entries;\n  });\n\n  run.setOperation(ops.pairs, (params) => (context) => {\n    const map = _map(params.map, context);\n    const pairs: Array<{ key: any, value: any }> = [];\n\n    for (const [key, value] of map.entries()) {\n      pairs.push({ key, value });\n    }\n\n    return pairs;\n  });\n\n  run.setOperation(ops.clear, (params) => (context) => {\n    const map = _map(params.map, context);\n    map.clear();\n\n    return map;\n  });\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _map(params.map, context).size\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    return handleMap(map, context, scope, () => {\n      let less = 0, more = 0;\n\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          more++;\n          continue;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n\n      for (const key of test.keys()) {\n        if (!map.has(key)) {\n          less++;\n        }\n      }\n\n      return getCompare(less, more);\n    });\n  }));\n\n  run.setOperation(ops.copy, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.deepCopy && !params.deepCopyKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesCopy: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesCopy.push([\n          _optional(params.deepCopyKey, context, key),\n          _optional(params.deepCopy, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesCopy);\n  });\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.transform && !params.transformKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesTransformed: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesTransformed.push([\n          _optional(params.transformKey, context, key),\n          _optional(params.transform, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesTransformed);\n  });\n\n  run.setOperation(ops.toPlainObject, (params) => (context) => {\n    const map = _map(params.map, context);\n    const plain = Object.create(null);\n\n    for (const [key, value] of map.entries()) {\n      plain[key] = value;\n    }\n\n    return plain;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isMap(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    if (map.size !== test.size) {\n      return false;\n    }\n\n    return handleMap(map, context, scope, () => {\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          return false;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        if (!params.isEqual(context)) { \n          return false;\n        }\n      }\n\n      return true;\n    });\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.size > 0)\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => new Date())\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    toArray(_map(params.value, context).values())\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.size)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => [v])\n  );\n\n}\n\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isMap(val) && isType(val.get('value'))\n    ? val.get('value')\n    : otherwise(val);\n}\n\nfunction handleMap<R>(map: Map<any, any>, context: LiveContext, scope: Record<string, string>, handle: (map: Map<any, any>) => R): R\n{\n  const saved = saveScope(context, scope);\n  \n  const result = handle(map);\n\n  restoreScope(context, saved);\n\n  return result;\n}","import { Runtime, NumberOps, parse, isNumber, isUndefined, isString, isWhole } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _textMaybe, _asTuple, _asObject, _asMap, _asList } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nconst DEFAULT_BASE = 10;\n\nexport default function(run: Runtime<LiveContext, LiveResult>, epsilon: number = 0.000001)\n{\n  const ops = NumberOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    0\n  );\n\n  run.setOperation(ops.pi, (params) => (context) =>\n    Math.PI\n  );\n\n  run.setOperation(ops.pi2, (params) => (context) =>\n    Math.PI + Math.PI\n  );\n\n  run.setOperation(ops.piHalf, (params) => (context) =>\n    // tslint:disable-next-line: no-magic-numbers\n    Math.PI * 0.5\n  );\n\n  run.setOperation(ops.e, (params) => (context) =>\n    Math.E\n  );\n\n  run.setOperation(ops.sqrt2, (params) => (context) =>\n    Math.SQRT2\n  );\n\n  run.setOperation(ops.sqrt12, (params) => (context) =>\n    Math.SQRT1_2\n  );\n\n  run.setOperation(ops.ln2, (params) => (context) =>\n    Math.LN2\n  );\n\n  run.setOperation(ops.ln10, (params) => (context) =>\n    Math.LN10\n  );\n\n  run.setOperation(ops.log2e, (params) => (context) =>\n    Math.LOG2E\n  );\n\n  run.setOperation(ops.log10e, (params) => (context) =>\n    Math.LOG10E\n  );\n\n  // Binary Operations\n\n  run.setOperation(ops.add, (params) => (context) => \n    _number(params.value, context) + _number(params.addend, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _number(params.value, context) - _number(params.subtrahend, context)\n  );\n\n  run.setOperation(ops.mul, (params) => (context) => \n    _number(params.value, context) * _number(params.multiplier, context)\n  );\n\n  run.setOperation(ops.div, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.mod, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => \n    Math.min(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.max, (params) => (context) => \n    Math.max(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.pow, (params) => (context) => \n    Math.pow(_number(params.value, context), _number(params.exponent, context))\n  );\n\n  run.setOperation(ops.atan2, (params) => (context) => \n    Math.atan2(_number(params.y, context), _number(params.x, context))\n  );\n\n  run.setOperation(ops.hypot, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n\n    return Math.sqrt(a * a + b * b);\n  });\n\n  run.setOperation(ops.choose, (params) => (context) => {\n    const n = _number(params.n, context);\n    const k = _number(params.k, context);\n    if (!isFinite(n) || !isFinite(k)) {\n      return Number.NaN;\n    }\n\n    return choose(n, k);\n  });\n\n  run.setOperation(ops.gcd, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n    if (!isFinite(a) || !isFinite(b)) {\n      return Number.NaN;\n    }\n\n    return gcd(a, b);\n  });\n\n  run.setOperation(ops.bitAnd, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) & _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitOr, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) | _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitXor, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) ^ _number(params.b, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    _number(params.value, context) - _number(params.test, context)\n  );\n\n  // Unary Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _numberMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.sqrt, (params) => (context) => \n    Math.sqrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sq, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value * value;\n  });\n\n  run.setOperation(ops.cbrt, (params) => (context) => \n    Math.cbrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.floor, (params) => (context) => \n    Math.floor(_number(params.value, context))\n  );\n\n  run.setOperation(ops.ceil, (params) => (context) => \n    Math.ceil(_number(params.value, context))\n  );\n\n  run.setOperation(ops.up, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.down, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value > 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.round, (params) => (context) => \n    Math.round(_number(params.value, context))\n  );\n\n  run.setOperation(ops.abs, (params) => (context) => \n    Math.abs(_number(params.value, context))\n  );\n\n  run.setOperation(ops.neg, (params) => (context) => \n    -_number(params.value, context)\n  );\n\n  run.setOperation(ops.sign, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value === 0 ? 0 : value < 0 ? -1 : 1;\n  });\n\n  run.setOperation(ops.log, (params) => (context) => \n    Math.log(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sin, (params) => (context) => \n    Math.sin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cos, (params) => (context) => \n    Math.cos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.tan, (params) => (context) => \n    Math.tan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sinh, (params) => (context) => \n    Math.sinh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cosh, (params) => (context) => \n    Math.cosh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.asin, (params) => (context) => \n    Math.asin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.acos, (params) => (context) => \n    Math.acos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.atan, (params) => (context) => \n    Math.atan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.factorial, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return isFinite(value) ? factorial(value) : value;\n  });\n\n  run.setOperation(ops.bitFlip, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    ~_number(params.value, context)\n  );\n\n  // Other\n\n  run.setOperation(ops.clamp, (params) => (context) => \n    Math.max(_number(params.min, context), Math.min(_number(params.value, context), _number(params.max, context)))\n  );\n\n  run.setOperation(ops.triangleHeight, (params) => (context) => {\n    const base = _number(params.base, context);\n    const side1 = _number(params.side1, context);\n    const side2 = _number(params.side2, context);\n    if (!isFinite(base) || !isFinite(side1) || !isFinite(side2)) {\n      return Number.NaN;\n    }\n\n    return triangleHeight(base, side1, side2);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _number(params.start, context);\n    const end = _number(params.end, context);\n    const delta = _number(params.delta, context);\n\n    return (end - start) * delta + start;\n  });\n\n  // Generators\n\n  run.setOperation(ops.rnd, (params) => (context) => {\n    const min = _number(params.min, context, 0);\n    const max = _number(params.max, context, 1);\n    const gap = max - min;\n    const whole = _bool(params.whole, context, false);\n    const include = _bool(params.includeMax, context, true);\n\n    return whole\n      ? include\n        ? Math.floor((gap + 1) * Math.random()) + min\n        : Math.floor(gap * Math.random()) + min\n      : Math.random() * gap + min;\n  });\n\n  // Formatters\n\n  run.setOperation(ops.toBaseText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const base = _number(params.base, context, DEFAULT_BASE);\n    const min = _number(params.minDigits, context, 0);\n    \n    let x = value.toString(base);\n\n    while (x.length < min) x = '0' + x;\n    \n    return x;\n  });\n\n  run.setOperation(ops.toText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const prefix = _text(params.prefix, context);\n    const suffix = _text(params.suffix, context);\n    const minPlaces = _numberMaybe(params.minPlaces, context);\n    const maxPlaces = _numberMaybe(params.maxPlaces, context);\n    const useExponent = _bool(params.useExponent, context, false);\n    const separator = _textMaybe(params.thousandSeparator, context);\n    \n    let to = '';\n\n    if (useExponent) {\n      to = value.toExponential(isUndefined(maxPlaces) ? minPlaces : maxPlaces);\n    } else if (isNumber(minPlaces)) {\n      to = value.toFixed(minPlaces);\n    } else {\n      to = value.toPrecision(maxPlaces);\n    }\n\n    const SEPARATOR_NUMBER = 1.1;\n    const SEPARATOR_OFFSET = 3;\n\n    if (isString(separator)) {\n      const systemSeparator = SEPARATOR_NUMBER.toLocaleString().substring(1, SEPARATOR_OFFSET - 1);\n      let index = to.indexOf(systemSeparator);\n      if (index === -1) {\n        index = to.length;\n      }\n      index -= SEPARATOR_OFFSET;\n      while (index > 0) {\n        to = to.substring(0, index) + separator + to.substring(index);\n        index -= SEPARATOR_OFFSET;\n      }\n    }\n    \n    return prefix + to + suffix;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isNumber(params.value(context))\n  );\n\n  run.setOperation(ops.isZero, (params) => (context) => \n    Math.abs(_number(params.value, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) > _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    _number(params.value, context) < _number(params.test, context)\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    _number(params.value, context) <= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    _number(params.value, context) > _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    _number(params.value, context) >= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _number(params.value, context);\n    const min = _number(params.min, context);\n    const max = _number(params.max, context);\n    const minInclusive = _bool(params.minInclusive, context, true);\n    const maxInclusive = _bool(params.maxInclusive, context, true);\n\n    const minCompare = value - min;\n    const maxCompare = value - max;\n\n    const minOffset = minInclusive ? 0 : 1;\n    const maxOffset = maxInclusive ? 0 : -1;\n\n    return minCompare >= minOffset && maxCompare <= maxOffset;\n  });\n\n  run.setOperation(ops.isWhole, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isDecimal, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return !isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isPositive, (params) => (context) =>\n    _number(params.value, context) >= 0\n  );\n\n  run.setOperation(ops.isNegative, (params) => (context) =>\n    _number(params.value, context) < 0\n  );\n\n  run.setOperation(ops.isDivisible, (params) => (context) =>\n    Math.abs(_number(params.value, context) % _number(params.by, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    // tslint:disable: no-magic-numbers no-bitwise\n    const r = value & 0xFF;\n    const g = (value >> 8) & 0xFF;\n    const b = (value >> 16) & 0xFF;\n    const a = (value >> 24) & 0xFF;\n    // tslint:enable: no-magic-numbers no-bitwise\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\n\nfunction factorial (x: number): number {\n  let f = x;\n  while (--x > 1) {\n    f *= x;\n  }\n\n  return f;\n}\n\nfunction gcd (a: number, b: number): number {\n  const as = Math.abs(a);\n  const bs = Math.abs(b);\n  let x = Math.max(as, bs);\n  let y = Math.min(as, bs);\n\n  for (;;) {\n    if (y === 0) return x;\n    x %= y;\n    if (x === 0) return y;\n    y %= x;\n  }\n}\n\nfunction choose(n: number, k: number): number \n{\n  let num = 1; \n  let den = 1;\n  let denom = 0;\n\n  // tslint:disable-next-line: no-bitwise\n  if (k > (n >> 1))\n  {\n    k = n - k;\n  }\n\n  while (k >= 1)\n  {\n    num *= n--;\n    den *= k--;\n    denom = gcd( num, den );\n    num /= denom;\n    den /= denom;\n  }\n\n  return num;\n}\n\nconst HALF = 0.5;\nconst TWO = 2;\n\nfunction triangleHeight(base: number, side1: number, side2: number): number \n{\n  const p = (base + side1 + side2) * HALF;\n  const area = Math.sqrt( p * (p - base) * (p - side1) * (p - side2) );\n  const height = area * TWO / base;\n\n  return height;\n}","import { Runtime, ObjectOps, compare, copy, toString, isEmpty, isObject, isBoolean, isDate, isArray, isMap, isNumber, isString, isColor, COMPONENT_MAX, ColorType } from 'expangine-runtime';\nimport { _object, restoreScope, saveScope, _objectMaybe, _optional } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ObjectOps;\n\n  // Static \n\n  run.setOperation(ops.create, (params) => (context) =>\n    Object.create(null)\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _objectMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.has, (params) => (context) =>\n    params.key(context) in _object(params.object, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _object(params.object, context)[params.key(context)]\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = object[key];\n\n    const value = params.value(context);\n\n    object[key] = value;\n\n    restoreScope(context, saved);\n\n    return object;\n  });\n\n  run.setOperation(ops.delete, (params) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const value = object[key];\n\n    delete object[key];\n\n    return value;\n  });\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(_object(params.object, context))\n  );\n\n  function mergeValues(target: any, merge: any) \n  {\n    if (isObject(merge)) \n    {\n      for (const prop in merge) \n      {\n        const value = merge[prop];\n\n        if (value !== undefined && value !== null) \n        {\n          target[prop] = value;\n        }\n      }\n    }\n  }\n\n  run.setOperation(ops.merge, (params) => (context) => {\n    const merged = {};\n    mergeValues(merged, params.a(context));\n    mergeValues(merged, params.b(context));\n    mergeValues(merged, _optional(params.c, context));\n    mergeValues(merged, _optional(params.d, context));\n    mergeValues(merged, _optional(params.e, context));\n\n    return merged;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isObject(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, () => true)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = params.value(context);\n\n    if (isObject(value) && isColor(value.value)) {\n      return value.value;\n    }\n\n    return ColorType.baseType.normalize(value) \n      || ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX });\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, v => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, () => 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, v => toString(v))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => [v])\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isObject(val) && isType(val.value)\n    ? val.value\n    : otherwise(val);\n}","import { Runtime, TextOps, isString, parse, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _asList, _asMap, _asObject, _asTuple, _textMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TextOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) => \n    ''\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _textMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.append, (params) => (context) => \n    _text(params.value, context) + _text(params.append, context)\n  );\n\n  run.setOperation(ops.prepend, (params) => (context) => \n    _text(params.prepend, context) + _text(params.value, context)\n  );\n\n  run.setOperation(ops.lower, (params) => (context) => \n    _text(params.value, context).toLowerCase()\n  );\n\n  run.setOperation(ops.upper, (params) => (context) => \n    _text(params.value, context).toUpperCase()\n  );\n\n  run.setOperation(ops.char, (params) => (context) => {\n    const value = _text(params.value, context);\n    const index = _number(params.index, context);\n\n    return index <= value.length ? value.charAt(index) : _text(params.outside, context);\n  });\n\n  run.setOperation(ops.replace, (params) => (context) => \n    _text(params.value, context).replace(_text(params.find, context), _text(params.replace, context))\n  );\n\n  run.setOperation(ops.repeat, (params) => (context) => {\n    const value = _number(params.value, context);\n    let times = _number(params.times, context);\n    let repeated = '';\n    while (--times >= 0){ \n      repeated += value;\n    }\n\n    return repeated;\n  });\n\n  run.setOperation(ops.split, (params) => (context) => \n    _text(params.value, context).split(_text(params.by, context), _numberMaybe(params.limit, context))\n  );\n\n  run.setOperation(ops.chars, (params) => (context) => \n    _text(params.value, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _text(params.value, context).substring(_number(params.start, context, 0), _numberMaybe(params.end, context))\n  );\n\n  run.setOperation(ops.indexOf, (params) => (context) => \n    _text(params.value, context).indexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.lastIndexOf, (params) => (context) => \n    _text(params.value, context).lastIndexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.trim, (params) => (context) => {\n    let value = _text(params.value, context);\n    if (_bool(params.start, context, true)) {\n      value = value.replace(/^\\w+/, '');\n    }\n    if (_bool(params.end, context, true)) {\n      value = value.replace(/\\w+$/, '');\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(0, test.length) === test;\n  });\n\n  run.setOperation(ops.endsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(value.length - test.length) === test;\n  });\n\n  run.setOperation(ops.soundex, (params) => {\n    const LETTERS_ONLY = /[^a-z]/g;\n    const ALLOWED_ONLY = /[^bfpvcgjkqsxzdtlmnr]/g;\n    const SOUNDEX_MIN_DEFAULT = 4;\n    const MAP = {\n      b: 1, f: 1, p: 1, v: 1,\n      c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2,\n      d: 3, t: 3,\n      l: 4,\n      m: 5, n: 5,\n      r: 6\n    };\n\n    return (context) => {\n      let value = _text(params.value, context);\n      const max = _numberMaybe(params.max, context);\n      const min = _number(params.min, context, SOUNDEX_MIN_DEFAULT);\n\n      value = value.toLowerCase();\n      value = value.replace(LETTERS_ONLY, '');\n      value = value.charAt(0) + value.substring(1).replace(ALLOWED_ONLY, '');\n\n      let soundex = value.charAt(0);\n\n      for (let i = 1; i < value.length; i++) {\n        soundex += MAP[value.charAt(i)];\n      }\n      \n      let last = soundex.charAt(1)\n      for (let i = 2; i < soundex.length; i++) { \n        if (soundex.charAt(i) === last) {\n          soundex = soundex.substring(0, i) + soundex.substring(i + 1);\n          i--;\n        } else {\n          last = soundex.charAt(i);\n        }\n      }\n\n      if (isFinite(max)) {\n        soundex = soundex.substring(0, max + 1);\n      }\n\n      while (soundex.length < min) {\n        soundex += '0';\n      }\n\n      return soundex;\n    };\n  });\n\n  run.setOperation(ops.distance, (params) => {\n    const distance = (a: string, b: string): number => {\n      const distanceMatrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n\n      for (let i = 0; i <= a.length; i += 1) {\n        distanceMatrix[0][i] = i;\n      }\n\n      for (let j = 0; j <= b.length; j += 1) {\n        distanceMatrix[j][0] = j;\n      }\n\n      for (let j = 1; j <= b.length; j += 1) {\n        for (let i = 1; i <= a.length; i += 1) {\n          const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n          distanceMatrix[j][i] = Math.min(\n            distanceMatrix[j][i - 1] + 1,\n            distanceMatrix[j - 1][i] + 1,\n            distanceMatrix[j - 1][i - 1] + indicator,\n          );\n        }\n      }\n\n      return distanceMatrix[b.length][a.length];\n    };\n    \n    return (context) => {\n      const value = _text(params.value, context);\n      const test = _text(params.test, context);\n\n      return distance(value, test);\n    };\n  });\n\n  run.setOperation(ops.length, (params) => (context) =>\n    _text(params.value, context).length\n  );\n\n  run.setOperation(ops.compare, (params) => (context) =>\n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false))\n  );\n\n  run.setOperation(ops.like, (params) => (context) => {\n    const value = _text(params.value, context);\n    const pattern = _text(params.pattern, context);\n    const ignoreCase = _bool(params.ignoreCase, context, false);\n    \n    const valueCased = ignoreCase ? value.toLowerCase() : value;\n    const patternCased = ignoreCase ? pattern.toLowerCase() : pattern;\n\n    const regexPattern = patternCased\n      .split('%')\n      .map(x => x ? x.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : x)\n      .join('.*')\n    ;\n\n    const regex = new RegExp('^' + regexPattern + '$');\n\n    return !!valueCased.match(regex);\n  });\n\n  run.setOperation(ops.pad, (params) => (context) => {\n    let value = _text(params.value, context);\n    const padding = _text(params.padding, context) || ' ';\n    const append = _bool(params.append, context);\n    const min = _number(params.min, context);\n    const max = _numberMaybe(params.max, context);\n\n    if (append) { \n      while (value.length < min) {\n        value = value + padding;\n      }\n    } else {\n      while (value.length < min) {\n        value = padding + value;\n      }\n    }\n\n    if (max !== undefined) {\n      if (value.length > max) {\n        if (append) {\n          value = value.substring(0, max);\n        } else {\n          value = value.substring(max - value.length, max);\n        }\n      }\n    }\n\n    return value;\n  });\n\n\n  // Other\n\n\n  // Generators\n\n\n  // Formatters\n\n  run.setOperation(ops.toNumber, (params) => (context) => {\n    const value = parseFloat(_text(params.value, context));\n\n    return isFinite(value) \n      ? value \n      : _number(params.invalidValue, context, 0);\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isString(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params) => (context) => \n    _text(params.value, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params) => (context) => \n    _text(params.value, context).length !== 0\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) >= 0\n  );\n\n  run.setOperation(ops.isLower, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toLowerCase()) === 0;\n  });\n\n  run.setOperation(ops.isUpper, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toUpperCase()) === 0;\n  });\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    /^(true|t|1|y|x)$/.test(_text(params.value, context))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compare(a: string, b: string, ignoreCase: boolean): number \n{\n  return ignoreCase\n    ? a.toLowerCase().localeCompare(b.toLowerCase())\n    : a.localeCompare(b);\n}","import { Runtime, TupleOps, compare, copy, isBoolean, isDate, isEmpty, isNumber, isString, isArray, isMap, isObject, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { _list, _number, _listMaybe, _optional } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TupleOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  function buildValues(built: any[], values: any)\n  {\n    if (isArray(values))\n    {\n      built.push(...values);\n    }\n    else\n    {\n      built.push(values);\n    }\n  }\n\n  run.setOperation(ops.build, (params) => (context) => {\n    const built: any[] = [];\n\n    buildValues(built, params.a(context));\n    buildValues(built, params.b(context));\n    buildValues(built, _optional(params.c, context));\n    buildValues(built, _optional(params.d, context));\n    buildValues(built, _optional(params.e, context));\n\n    return built;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.value, context)[_number(params.index, context, 0)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const tuple = _list(params.value, context);\n    const index = _number(params.index, context, 0);\n    const existing = tuple[index];\n    tuple[index] = params.element(context);\n    \n    return existing;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.find ? v.find(isBoolean) || false : false)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => v.find ? v.find(isDate) || new Date() : new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, (v) => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.find ? v.find(isNumber) || 0 : 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => v.find ? v.find(isString) || '' : '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    params.value(context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}","export * from './LiveRuntime';\n\nimport { LiveRuntime } from './LiveRuntime';\nimport { default as addLiveExpressions } from './Expressions';\nimport { default as addLiveAny } from './Any';\nimport { default as addLiveBoolean } from './Boolean';\nimport { default as addLiveColor } from './Color';\nimport { default as addLiveDate } from './Date';\nimport { default as addLiveList } from './List';\nimport { default as addLiveMap } from './Map';\nimport { default as addLiveNumber } from './Number';\nimport { default as addLiveObject } from './Object';\nimport { default as addLiveText } from './Text';\nimport { default as addLiveTuple } from './Tuple';\n\n\naddLiveExpressions(LiveRuntime);\naddLiveAny(LiveRuntime);\naddLiveBoolean(LiveRuntime);\naddLiveColor(LiveRuntime);\naddLiveDate(LiveRuntime);\naddLiveList(LiveRuntime);\naddLiveMap(LiveRuntime);\naddLiveNumber(LiveRuntime);\naddLiveObject(LiveRuntime);\naddLiveText(LiveRuntime);\naddLiveTuple(LiveRuntime);\n\n\nexport {\n  addLiveExpressions,\n  addLiveAny,\n  addLiveBoolean,\n  addLiveColor,\n  addLiveDate,\n  addLiveList,\n  addLiveMap,\n  addLiveNumber,\n  addLiveObject,\n  addLiveText,\n  addLiveTuple,\n};"],"sourceRoot":""}