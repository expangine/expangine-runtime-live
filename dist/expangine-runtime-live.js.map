{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"expangine-runtime\"","webpack://[name]/./LiveRuntime.ts","webpack://[name]/./helper.ts","webpack://[name]/./Expressions.ts","webpack://[name]/./Any.ts","webpack://[name]/./Boolean.ts","webpack://[name]/./Color.ts","webpack://[name]/./Date.ts","webpack://[name]/./List.ts","webpack://[name]/./Map.ts","webpack://[name]/./Number.ts","webpack://[name]/./Object.ts","webpack://[name]/./Text.ts","webpack://[name]/./Tuple.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LiveRuntime","saveScope","context","scope","popped","prop","alias","restoreScope","saved","undefined","preserveScope","props","run","map","result","forEach","last","_optional","cmd","defaultValue","_bool","_typed","isValid","invalidValueDefault","invalidValue","_typedDynamic","_boolMaybe","_number","Number","NaN","_numberMaybe","_text","_textMaybe","_list","_listMaybe","_map","Map","_mapMaybe","_object","_objectMaybe","_color","g","b","a","_colorMaybe","_date","Date","_dateMaybe","_asList","getValue","_asMap","_asObject","_asTuple","_colorOrNumber","hasSubs","x","traversePath","path","previous","step","end","length","next","setExpression","expr","_thisRun","thisRun","parts","sub","getCommand","set","currentVariable","params","e","op","getOperation","Error","defaults","getOperationScopeDefaults","scopeAlias","operationCommand","returnProperty","chain","data","cases","test","otherwise","caseExpression","valueCommand","tests","defaultCase","isEqual","noScope","matches","expression","expressions","defaultResult","and","pass","or","variable","start","body","breakVariable","max","maxIterations","iterations","stop","dir","condition","vars","defined","sections","template","split","section","index","_source","source","reduce","out","func","getFunction","command","options","args","returnValue","elements","ops","setOperation","cmp","copy","isDefined","getDefined","coalesce","isNotEqual","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","asAny","asBoolean","asColor","baseType","normalize","asDate","asList","asMap","asNumber","parseFloat","isFinite","asObject","asText","asTuple","maybe","xor","not","isTrue","isFalse","compareColor","build","component","clamp","add","addend","alpha","adds","scale","addendScale","subtrahend","mul","multiplier","div","divisor","divSafe","mod","format","formatId","getFormat","formatter","parse","lerp","delta","lighten","amount","darken","toHSL","fromColor","fromHSL","toColor","luminance","contrast","valueL","testL","Math","min","invert","opaque","distance","dist","named","getName","closestName","closestDistance","constants","entries","blend","top","bottom","modeName","blender","BlendFunctions","epsilon","formatMap","bestfit","y","abs","inv","multiply","screen","overlay","hard","soft","dodge","burn","divide","addition","diff","now","today","day","tomorrow","yesterday","parseAsUTC","fromText","fromTimestamp","fromTimestampSeconds","valueOf","update","unit","startOf","endOf","daysInMonth","daysInYear","weeksInYear","getTime","absolute","adjust","timezoneOffset","toText","toISOText","toISOString","id","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isBetween","startInclusive","endInclusive","startCompare","endCompare","isStartOf","isEndOf","isDST","isLeapYear","count","list","sameItem","item","push","prev","addFirst","unshift","addLast","insert","splice","remove","handleListIsEqual","_","removeFirst","shift","removeLast","pop","removeAt","removeWhere","handleListIteration","removed","where","contains","find","reverse","clampedStart","deepCopy","handleList","slice","half","floor","j","swap","exclude","k","overlap","overlapping","sort","compare","shuffle","times","random","unique","skip","duplicates","once","take","drop","append","concat","prepend","indexOf","lastIndexOf","findIndex","first","randomList","taken","join","prefix","sum","delimiter","suffix","each","filter","mapped","transform","fail","initial","reduced","less","more","group","groups","by","grouping","keyValue","newGrouping","toListMap","getKey","keyList","toMap","handleAggregate","agg","avg","std","values","squareAvg","v","sqrt","variance","median","bitand","bitor","bitxor","isEmpty","isNotEmpty","equal","tryCastValue","toString","isType","val","arr","temp","handle","initialAggregate","aggregate","getAggregate","initialResult","onItem","earlyExit","newResult","handleMatch","getDefaultResult","matchResult","existing","existingValue","has","delete","keys","pairs","clear","size","handleMap","deepCopyKey","entriesCopy","transformKey","entriesTransformed","toPlainObject","plain","pi","PI","pi2","piHalf","E","sqrt2","SQRT2","sqrt12","SQRT1_2","ln2","LN2","ln10","LN10","log2e","LOG2E","log10e","LOG10E","pow","exponent","atan2","hypot","choose","num","den","denom","gcd","bitAnd","bitOr","bitXor","sq","cbrt","ceil","up","down","round","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","f","bitFlip","triangleHeight","base","side1","side2","HALF","TWO","rnd","gap","whole","include","includeMax","toBaseText","minDigits","minPlaces","maxPlaces","useExponent","separator","thousandSeparator","to","toExponential","toFixed","toPrecision","systemSeparator","toLocaleString","substring","SEPARATOR_OFFSET","isZero","minInclusive","maxInclusive","isWhole","eps","isDecimal","isPositive","isNegative","isDivisible","as","bs","lower","toLowerCase","upper","toUpperCase","char","charAt","outside","replace","repeat","repeated","limit","chars","search","trim","startsWith","endsWith","soundex","LETTERS_ONLY","ALLOWED_ONLY","MAP","q","z","distanceMatrix","Array","fill","indicator","ignoreCase","like","pattern","regexPattern","regex","RegExp","match","pad","padding","toNumber","isLower","localeCompare","isUpper","tuple","element"],"mappings":"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","file":"expangine-runtime-live.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"expangine-runtime\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"expangine-runtime\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime-live\"] = factory(require(\"expangine-runtime\"));\n\telse\n\t\troot[\"expangine-runtime-live\"] = factory(root[\"expangine-runtime\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Runtime, Command, defs } from 'expangine-runtime';\n\n\n\nexport type LiveContext = Record<string, any> | (any[] & Record<string, any>);\n\nexport type LiveResult = any;\n\nexport type LiveCommand = Command<LiveContext, LiveResult>;\n\nexport type LiveCommandMap<K extends string | number | symbol = string> = Record<K, LiveCommand>;\n\nexport const LiveRuntime = new Runtime<LiveContext, LiveResult>(defs);\n","\nimport { isNumber, isString, isArray, isMap, isObject, isDate, isBoolean, isColor, Color } from 'expangine-runtime';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\n\nexport function saveScope<K extends string>(context: LiveContext, scope: Record<string, K>): Record<K, any> \n{\n  const popped = {} as Record<K, string>;\n\n  for (const prop in scope) \n  {\n    const alias = scope[prop];\n\n    popped[alias] = context[alias]\n  }\n\n  return popped;\n}\n\nexport function restoreScope<K extends string>(context: LiveContext, saved: Record<K, any>) \n{\n  for (const prop in saved)\n  { \n    if (saved[prop] === undefined)\n    {\n      delete context[prop];\n    }\n    else\n    {\n      context[prop] = saved[prop];\n    }\n  }\n}\n\nexport function preserveScope<R = any>(context: LiveContext, props: string[], run: () => R): R\n{\n  const saved = props.map((p) => context[p]);\n\n  const result = run();\n\n  saved.forEach((last, i) => \n    last === undefined\n      ? delete context[props[i]]\n      : context[props[i]] = last\n  );\n\n  return result;\n}\n\nexport function _optional (cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: LiveResult): LiveResult \n{\n  return cmd ? cmd(context) : defaultValue;\n}\n\nexport function _bool (cmd: LiveCommand | undefined, context: LiveContext, defaultValue: boolean = false): boolean\n{\n  return cmd ? !!cmd(context) : defaultValue;\n}\n\nexport function _typed<T> (isValid: (value: any) => value is T, invalidValueDefault: T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue;\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue;\n  };\n}\n\nexport function _typedDynamic<T> (isValid: (value: any) => value is T, invalidValueDefault: () => T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: () => T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue();\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue();\n  };\n}\n\nexport const _boolMaybe = _typed<boolean | undefined> (isBoolean, undefined);\n\nexport const _number = _typed (isNumber, Number.NaN);\n\nexport const _numberMaybe = _typed<number | undefined> (isNumber, undefined);\n\nexport const _text = _typed (isString, '');\n\nexport const _textMaybe = _typed<string | undefined> (isString, undefined);\n\nexport const _list  = _typedDynamic<any[]> (isArray, () => []);\n\nexport const _listMaybe = _typed<any[] | undefined> (isArray, undefined);\n\nexport const _map = _typedDynamic<Map<any, any>> (isMap, () => new Map());\n\nexport const _mapMaybe = _typed<Map<any, any> | undefined> (isMap, undefined);\n\nexport const _object = _typedDynamic<any>(isObject, () => ({}));\n\nexport const _objectMaybe = _typed<any | undefined>(isObject, undefined);\n\nexport const _color = _typedDynamic<Color>(isColor, () => ({ r: 255, g: 255, b: 255, a: 255 }));\n\nexport const _colorMaybe = _typed<any | undefined>(isColor, undefined);\n\nexport const _date = _typedDynamic<Date>(isDate, () => new Date());\n\nexport const _dateMaybe = _typed<Date | undefined> (isDate, undefined);\n\nexport function _asList(getValue: LiveCommand, context: LiveContext)\n{\n  return [ getValue(context) ];\n}\n\nexport function _asMap(getValue: LiveCommand, context: LiveContext)\n{\n  return new Map([['value', getValue(context) ]]);\n}\n\nexport function _asObject(getValue: LiveCommand, context: LiveContext)\n{\n  return { value: getValue(context) };\n}\n\nexport function _asTuple(getValue: LiveCommand, context: any)\n{\n  return [ getValue(context) ];\n}\n\nexport function _colorOrNumber(getValue: LiveCommand, context: any)\n{\n  const value = getValue(context);\n\n  if (isColor(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value))\n  {\n    return { r: value, g: value, b: value, a: value };\n  }\n\n  return { r: 255, g: 255, b: 255, a: 255 };\n}\n","\nimport { Runtime, ConstantExpression, GetExpression, OperationExpression, ChainExpression, \n  IfExpression, NotExpression, AndExpression, OrExpression, ForExpression, \n  WhileExpression, DefineExpression, SwitchExpression, SetExpression, \n  DoExpression, TemplateExpression, UpdateExpression, InvokeExpression, \n  ReturnExpression, NoExpression, TupleExpression, ObjectExpression, SubExpression,\n  isUndefined, objectMap, isObject, isArray, isString } from 'expangine-runtime';\nimport { preserveScope } from './helper';\nimport { LiveCommand, LiveCommandMap, LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n\n  function hasSubs(x: any)\n  {\n    return isObject(x) || isArray(x) || isString(x);\n  }\n\n  function traversePath(context: any, value: any, path: LiveCommand[])\n  {\n    const end = path.length - 1;\n    let previous;\n    let step;\n\n    for (let i = 0; i <= end && !isUndefined(value); i++) \n    {\n      step = path[i](context);\n      previous = value;\n\n      const next = value instanceof Map\n        ? value.get(step)\n        : value === null\n          ? undefined\n          : value[step];\n\n      if (isUndefined(next) && i !== end) \n      {\n        return { end: false, previous, step, value: undefined };\n      }\n\n      value = next;\n    }\n\n    return { end: true, previous, step, value };\n  }\n\n  run.setExpression(ConstantExpression, (expr, _thisRun) => \n  {\n    return () => expr.value\n  });\n\n  run.setExpression(GetExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n\n    return (context) => traversePath(context, context, parts).value;\n  });\n\n  run.setExpression(SetExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n    const getValue: LiveCommand = thisRun.getCommand(expr.value);\n\n    return (context) => \n    {\n      const { end, previous, step } = traversePath(context, context, parts);\n\n      if (end) \n      {\n        if (previous instanceof Map)\n        {\n          previous.set(step, getValue(context));\n        }\n        else if (hasSubs(previous))\n        {\n          previous[step] = getValue(context);\n        }\n        else\n        {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(UpdateExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n    const getValue: LiveCommand = thisRun.getCommand(expr.value);\n    const currentVariable: string = expr.currentVariable;\n\n    return (context) => \n    {\n      const { end, previous, step, value } = traversePath(context, context, parts);\n\n      if (end)\n      {\n        return preserveScope(context, [currentVariable], () => \n        {\n          context[currentVariable] = value;\n        \n          if (previous instanceof Map)\n          {\n            previous.set(step, getValue(context));\n          }\n          else if (hasSubs(previous))\n          {\n            previous[step] = getValue(context);\n          }\n          else\n          {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(SubExpression, (expr, thisRun) => \n  {\n    const getValue: LiveCommand = thisRun.getCommand(expr.value);\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n\n    return (context) => traversePath(context, getValue(context), parts).value;\n  });\n\n  run.setExpression(OperationExpression, (expr, thisRun) => \n  {\n    const params: LiveCommandMap = objectMap(expr.params, e => thisRun.getCommand(e));\n    const op = thisRun.getOperation(expr.name);\n\n    if (!op) \n    { \n      throw new Error(`Operation with ${expr.name} is not defined in the given runtime.`);\n    }\n    \n    const defaults = thisRun.getOperationScopeDefaults(expr.name);\n    let scopeAlias = expr.scopeAlias;\n\n    if (defaults) \n    {\n      for (const prop in defaults) \n      {\n        if (!(prop in scopeAlias)) \n        { \n          if (scopeAlias === expr.scopeAlias) \n          {\n            scopeAlias = { ...scopeAlias };\n          }\n\n          scopeAlias[prop] = defaults[prop];\n        }\n      }\n    }\n\n    const operationCommand = op(params, scopeAlias);\n\n    return (context) =>\n    {\n      if (thisRun.returnProperty in context) return;\n\n      return operationCommand(context);\n    };\n  });\n\n  run.setExpression(ChainExpression, (expr, thisRun) => \n  { \n    const chain: LiveCommand[] = expr.chain.map(data => thisRun.getCommand(data));\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      let last;\n\n      for (const cmd of chain)\n      {\n        last = cmd(context);\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n      }\n\n      return last;\n    };\n  });\n\n  run.setExpression(IfExpression, (expr, thisRun) => \n  {\n    const cases: [LiveCommand, LiveCommand][] = expr.cases.map(([test, result]) => [thisRun.getCommand(test), thisRun.getCommand(result)]);\n    const otherwise: LiveCommand = thisRun.getCommand(expr.otherwise);\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const caseExpression of cases)\n      {\n        const [test, result] = caseExpression;\n\n        if (test(context)) \n        {\n          return thisRun.returnProperty in context\n            ? undefined\n            : result(context);\n        }\n      }\n      \n      if (thisRun.returnProperty in context) return;\n\n      return otherwise(context);\n    };\n  });\n\n  run.setExpression(SwitchExpression, (expr, thisRun) => \n  {\n    const valueCommand: LiveCommand = thisRun.getCommand(expr.value);\n    const cases: [LiveCommand[], LiveCommand][] = expr.cases.map(([tests, result]) => [\n      tests.map(t => thisRun.getCommand(t)),\n      thisRun.getCommand(result)\n    ]);\n    const defaultCase: LiveCommand = thisRun.getCommand(expr.defaultCase);\n    const isEqual = thisRun.getOperation(expr.op);\n    const noScope = {};\n    \n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      const value = valueCommand(context);\n\n      if (thisRun.returnProperty in context) return;\n\n      for (const [tests, result] of cases)\n      {\n        let matches = false;\n\n        for (const test of tests) \n        { \n          if (isEqual({ value: () => value, test }, noScope)(context)) \n          {\n            matches = true;\n            break;\n          }\n\n          if (thisRun.returnProperty in context) return;\n        }\n\n        if (matches) \n        {\n          return result(context);\n        }\n      }\n\n      return defaultCase(context);\n    };\n  });\n\n  run.setExpression(NotExpression, (expr, thisRun) => \n  {\n    const expression: LiveCommand = thisRun.getCommand(expr.expression);\n\n    return (context) => !expression(context);\n  });\n\n  run.setExpression(AndExpression, (expr, thisRun) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n    const defaultResult: boolean = expressions.length > 0;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const and of expressions)\n      {\n        if (!and(context) || thisRun.returnProperty in context)\n        {\n          return false;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(OrExpression, (expr, thisRun) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n    const defaultResult: boolean = expressions.length === 0;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const or of expressions)\n      {\n        const pass = or(context);\n\n        if (pass || thisRun.returnProperty in context)\n        {\n          return pass;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(ForExpression, (expr, thisRun) => \n  {\n    const variable: string = expr.variable;\n    const start: LiveCommand = thisRun.getCommand(expr.start);\n    const end: LiveCommand = thisRun.getCommand(expr.end);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [variable, breakVariable], () => \n      {\n        context[breakVariable] = false;\n\n        let i = start(context);\n        let iterations = 0;\n        let stop = end(context);\n        let last;\n        const dir = i < stop ? 1 : -1;\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n\n        while ((dir === 1 ? i <= stop : i >= stop) && iterations++ < max) \n        {\n          context[variable] = i;\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n\n          i += dir;\n          stop = end(context);\n\n          if (thisRun.returnProperty in context) return;\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(WhileExpression, (expr, thisRun) => \n  {\n    const condition: LiveCommand = thisRun.getCommand(expr.condition);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        while (condition(context) && iterations++ < max)\n        {\n          if (thisRun.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DoExpression, (expr, thisRun) => \n  {\n    const condition: LiveCommand = thisRun.getCommand(expr.condition);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        do\n        {\n          if (thisRun.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n\n        } while(condition(context) && iterations++ < max);\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DefineExpression, (expr, thisRun) => \n  {\n    const define: [string, LiveCommand][] = expr.define.map(([name, e]) => [name, thisRun.getCommand(e)]);\n    const vars: string[] = define.map(([name]) => name);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n\n    return (context) =>\n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, vars, () =>\n      {\n        for (const [name, defined] of define)\n        {\n          if (thisRun.returnProperty in context)\n          {\n            return;\n          }\n\n          context[name] = defined(context);\n        }\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n\n        return body(context);\n      });\n    };\n  });\n\n  run.setExpression(TemplateExpression, (expr, thisRun) => \n  {\n    const SECTION_TYPES = 2;\n    const SECTION_INDEX_CONSTANT = 0;\n\n    const params: LiveCommandMap = objectMap(expr.params, e => thisRun.getCommand(e));\n    const template: string = expr.template;\n\n    const sections = template.split(/[\\{\\}]/).map((section, index) => {\n      return index % SECTION_TYPES === SECTION_INDEX_CONSTANT\n        ? (_source: any) => section\n        : (source: any) => source && section in source ? source[section] : '';\n    });\n\n    return (context) =>\n    {\n      const source = objectMap(params, p => p(context));\n\n      return sections.reduce((out, section) => out + section(source), '');\n    };\n  });\n\n  run.setExpression(InvokeExpression, (expr, thisRun) =>\n  {\n    const func = thisRun.getFunction(expr.name);\n    const command = thisRun.getCommand(func.options.expression);\n    const args = objectMap(expr.args, a => thisRun.getCommand(a));\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      const params = objectMap(args, a => a(context));\n\n      command(params);\n\n      return params[thisRun.returnProperty];\n    };\n  });\n\n  run.setExpression(ReturnExpression, (expr, thisRun) =>\n  {\n    const returnValue = thisRun.getCommand(expr.value);\n\n    return (context) => context[thisRun.returnProperty] = returnValue(context);\n  });\n\n  run.setExpression(TupleExpression, (expr, thisRun) =>\n  {\n    const elements: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n\n    return (context) => elements.map(cmd => cmd(context));\n  });\n\n  run.setExpression(ObjectExpression, (expr, thisRun) =>\n  {\n    const props: LiveCommandMap = objectMap(expr.props, e => thisRun.getCommand(e));\n\n    return (context) => objectMap(props, cmd => cmd(context));\n  });\n\n  run.setExpression(NoExpression, () => () => undefined);\n\n}","import { Runtime, AnyOps, parse, compare, copy, toString, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _asList, _asTuple, _asMap, _asObject, restoreScope, saveScope } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = AnyOps;\n\n  // Operations\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.isDefined, (params) => (context) => {\n    const value = params.value(context);\n    \n    return value !== null && value !== undefined;\n  });\n\n  run.setOperation(ops.getDefined, (params, scope) => (context) => {\n    const value = params.value(context);\n    const isDefined = value !== null && value !== undefined;\n  \n    if (isDefined) {\n      const saved = saveScope(context, scope);\n      context[scope.defined] = value;\n      params.defined(context);\n      restoreScope(context, saved);\n    }\n\n    return isDefined;\n  });\n\n  run.setOperation(ops.coalesce, (params) => (context) => {\n    const a = params.a(context);\n    if (a !== null && a !== undefined) return a;\n    const b = params.b(context);\n    if (b !== null && b !== undefined) return b;\n    const c = params.c(context);\n    if (c !== null && c !== undefined) return c;\n    const d = params.d(context);\n    if (d !== null && d !== undefined) return d;\n    const e = params.e(context);\n    if (e !== null && e !== undefined) return e;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    true\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    toString(params.value(context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n};","\nimport { Runtime, BooleanOps, isBoolean, COMPONENT_MAX } from 'expangine-runtime';\nimport { _bool, _asList, _asObject, _asTuple, _asMap, _boolMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = BooleanOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    false\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _boolMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.and, (params) => (context) => \n    _bool(params.a, context) && _bool(params.b, context)\n  );\n\n  run.setOperation(ops.or, (params) => (context) => \n    _bool(params.a, context) || _bool(params.b, context)\n  );\n\n  run.setOperation(ops.xor, (params) => (context) => \n    _bool(params.a, context) !== _bool(params.b, context)\n  );\n\n  run.setOperation(ops.not, (params) => (context) => \n    !_bool(params.a, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    (_bool(params.value, context) ? 1 : 0) - (_bool(params.test, context) ? 1 : 0)\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isBoolean(params.value(context))\n  );\n\n  run.setOperation(ops.isTrue, (params) => (context) => \n    _bool(params.value, context, false)\n  );\n\n  run.setOperation(ops.isFalse, (params) => (context) => \n    !_bool(params.value, context, false)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = params.value(context);\n\n    return value ? 1 : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) ? 'true' : 'false'\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ColorOps, COMPONENT_MAX, Color, clampComponent, ColorType, ColorSpaceHSL, ColorNames, isColor, ColorSpaceRGB } from 'expangine-runtime';\nimport { _color, _colorMaybe, _number, saveScope, restoreScope, _colorOrNumber, _bool, _text, _object, _asList, _asMap, _asTuple } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: no-bitwise\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ColorOps;\n\n  // Static \n\n  run.setOperation(ops.create, () => () =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _colorMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0)\n  );\n\n  run.setOperation(ops.copy, (params) => (context) => \n    ({ ..._color(params.value, context) })\n  );\n\n  run.setOperation(ops.build, (params) => (context) => ({\n    r: _number(params.r, context, COMPONENT_MAX),\n    g: _number(params.g, context, COMPONENT_MAX),\n    b: _number(params.b, context, COMPONENT_MAX),\n    a: _number(params.a, context, COMPONENT_MAX),\n  }));\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.op, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.test] = test.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.test] = test.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.test] = test.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.test] = test.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.clamp, (params) => (context) => {\n    const value = _color(params.value, context);\n    \n    return {\n      r: clampComponent(value.r),\n      g: clampComponent(value.g),\n      b: clampComponent(value.b),\n      a: clampComponent(value.a),\n    };\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r,\n      g: value.g + addend.g,\n      b: value.b + addend.b,\n      a: alpha ? value.a + addend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.adds, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const scale = _colorOrNumber(params.addendScale, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r * scale.r,\n      g: value.g + addend.g * scale.g,\n      b: value.b + addend.b * scale.b,\n      a: alpha ? value.a + addend.a * scale.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _color(params.value, context);\n    const subtrahend = _colorOrNumber(params.subtrahend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r - subtrahend.r,\n      g: value.g - subtrahend.g,\n      b: value.b - subtrahend.b,\n      a: alpha ? value.a - subtrahend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.mul, (params) => (context) => {\n    const value = _color(params.value, context);\n    const multiplier = _colorOrNumber(params.multiplier, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r * multiplier.r,\n      g: value.g * multiplier.g,\n      b: value.b * multiplier.b,\n      a: alpha ? value.a * multiplier.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.div, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: divSafe(value.r, divisor.r),\n      g: divSafe(value.g, divisor.g),\n      b: divSafe(value.b, divisor.b),\n      a: alpha ? divSafe(value.a, divisor.a) : value.a,\n    };\n  });\n\n  run.setOperation(ops.mod, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r % divisor.r,\n      g: value.g % divisor.g,\n      b: value.b % divisor.b,\n      a: alpha ? value.a % divisor.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.format, (params) => (context) => {\n    const value = _color(params.value, context);\n    const formatId = _text(params.format, context);\n    const format = ColorType.getFormat(formatId);\n\n    if (!format) {\n      return '';\n    }\n\n    return format.formatter(value);\n  });\n\n  run.setOperation(ops.parse, (params) => (context) => {\n    const value = params.value(context);\n    \n    return ColorType.baseType.normalize(value);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _color(params.start, context);\n    const end = _color(params.end, context);\n    const delta = _number(params.delta, context, 0);\n\n    return {\n      r: (end.r - start.r) * delta + start.r,\n      g: (end.g - start.g) * delta + start.g,\n      b: (end.b - start.b) * delta + start.b,\n      a: (end.a - start.a) * delta + start.a,\n    };\n  });\n\n  run.setOperation(ops.lighten, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = _number(params.amount, context, 0);\n\n    return {\n      r: value.r + (COMPONENT_MAX - value.r) * amount,\n      g: value.g + (COMPONENT_MAX - value.g) * amount,\n      b: value.b + (COMPONENT_MAX - value.b) * amount,\n      a: value.a + (COMPONENT_MAX - value.a) * amount,\n    };\n  });\n\n  run.setOperation(ops.darken, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = 1 - _number(params.amount, context, 0);\n\n    return {\n      r: value.r * amount,\n      g: value.g * amount,\n      b: value.b * amount,\n      a: value.a * amount,\n    };\n  });\n\n  run.setOperation(ops.toHSL, (params) => (context) =>\n    ColorSpaceHSL.fromColor(_color(params.value, context))\n  );\n\n  run.setOperation(ops.fromHSL, (params) => (context) =>\n    ColorSpaceHSL.toColor(_object(params.value, context))\n  );\n\n  run.setOperation(ops.luminance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const L = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722;\n\n    return L / COMPONENT_MAX;\n  });\n\n  run.setOperation(ops.contrast, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const valueL = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722; \n    const testL = test.r * 0.2126 + test.g * 0.7152 + test.b * 0.0722;\n    const L1 = Math.max(valueL, testL);\n    const L2 = Math.min(valueL, testL);\n\n    return (L1 + 0.05) / (L2 + 0.05);\n  });\n\n  run.setOperation(ops.invert, (params) => (context) => {\n    const value = _color(params.value, context);\n    const alpha = _bool(params.alpha, context, false);\n\n    return {\n      r: COMPONENT_MAX - value.r,\n      g: COMPONENT_MAX - value.g,\n      b: COMPONENT_MAX - value.b,\n      a: alpha ? COMPONENT_MAX - value.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.opaque, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = COMPONENT_MAX;\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.alpha, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = _number(params.alpha, context, COMPONENT_MAX);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.distance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    \n    return dist(value, test);\n  });\n\n  run.setOperation(ops.named, (params) => (context) => {\n    const value = _color(params.name, context);\n\n    return value;\n  });\n\n  run.setOperation(ops.getName, (params) => (context) => {\n    const value = _color(params.value, context);\n    let closestName: string = '';\n    let closestDistance: number = -1;\n\n    for (const [name, named] of ColorNames.options.constants.entries()) {\n      const distance = dist(value, named);\n      if (closestDistance === -1 || distance < closestDistance) {\n        closestName = name;\n        closestDistance = distance;\n      }\n    }\n\n    return closestName;\n  });\n\n  run.setOperation(ops.blend, (params) => (context) => {\n    const top = _color(params.top, context);\n    const bottom = _color(params.bottom, context);\n    const modeName = params.mode(context);\n    const blender = BlendFunctions[modeName];\n\n    if (!blender) {\n      return top;\n    }\n\n    return {\n      r: blender(bottom.r, top.r),\n      g: blender(bottom.g, top.g),\n      b: blender(bottom.b, top.b),\n      a: top.a,\n    };\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isColor(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, () => () =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asDate, () => () =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = _color(params.value, context);\n\n    return (value.r & 0xFF) | \n      ((value.g & 0xFF) << 8) |\n      ((value.b & 0xFF) << 16) |\n      ((value.a & 0xFF) << 24);\n  })\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    ColorSpaceRGB.formatMap.bestfit.formatter(_color(params.value, context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compareColor(x: Color, y: Color, epsilon: number): number\n{\n  const r = Math.abs(x.r - y.r) <= epsilon;\n  const g = Math.abs(x.g - y.g) <= epsilon;\n  const b = Math.abs(x.b - y.b) <= epsilon;\n  const a = Math.abs(x.a - y.a) <= epsilon;\n\n  return r && g && b && a\n    ? 0\n    : (x.r + x.g + x.b + x.a) - (y.r + y.g + y.b + y.a);\n}\n\nfunction divSafe(a: number, b: number): number\n{\n  return b === 0 ? 0 : a / b;\n}\n\nfunction dist(a: Color, b: Color): number\n{\n  return Math.abs(a.r - b.r) + \n    Math.abs(a.g - b.g) + \n    Math.abs(a.b - b.b) + \n    Math.abs(a.a - b.a);\n}\n\nfunction mul(a: number, b: number): number\n{\n  return (a * b + COMPONENT_MAX) >> 8;\n}\n\nfunction div(a: number, b: number): number\n{\n  return b === 0 ? 0 : ((a << 8) - a) / b;\n}\n\nfunction inv(a: number): number\n{\n  return COMPONENT_MAX - a;\n}\n\nconst BlendFunctions: Record<string, (a: number, b: number) => number> = {\n  multiply:   (a, b) => mul(a, b),\n  screen:     (a, b) => inv(mul(inv(a), inv(b))),\n  overlay:    (a, b) => a < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  hard:       (a, b) => b < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  soft:       (a, b) => mul(inv(2 * b), mul(a, a)) + 2 * mul(b, a),\n  dodge:      (a, b) => div(a, inv(b)),\n  burn:       (a, b) => div(inv(b), a),\n  divide:     (a, b) => a === b ? COMPONENT_MAX : div(a, b),\n  addition:   (a, b) => clampComponent(a + b),\n  sub:        (a, b) => clampComponent(a - b),\n  diff:       (a, b) => clampComponent(b - a),\n  darken:     (a, b) => Math.min(a, b),\n  lighten:    (a, b) => Math.max(a, b),\n};","\nimport { Runtime, DateOps, DateType, currentLocale, compareDates, startOf, mutate, add, getters, setters, endOf, getDaysInMonth, getDaysInYear, getWeeksInYear, diff, adjusters, getDateOffset, isDaylightSavingTime, isLeapYear, Unit, parse, DateFormat, isDate, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _date, _text, _bool, _asList, _asMap, _asObject, _asTuple, _dateMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = DateOps;\n\n  const MILLIS_IN_SECONDS = 1000;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.now, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.today, (params) => (context) =>\n    startOf.day(new Date())\n  );\n\n  run.setOperation(ops.tomorrow, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, +1))\n  );\n\n  run.setOperation(ops.yesterday, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, -1))\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _dateMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.parse, (params) => (context) => \n    _bool(params.parseAsUTC, context, false)\n      ? new DateType({ parseAsUTC: true }).normalize(params.value(context))\n      : DateType.baseType.normalize(params.value(context))\n  );\n\n  run.setOperation(ops.fromText, (params) => (context) => \n    DateType.baseType.normalize(_text(params.value, context))\n  );\n\n  run.setOperation(ops.fromTimestamp, (params) => (context) => \n    new Date(_number(params.value, context, Date.now()))\n  );\n\n  run.setOperation(ops.fromTimestampSeconds, (params) => (context) => \n    new Date(_number(params.value, context, Date.now() / MILLIS_IN_SECONDS) * MILLIS_IN_SECONDS)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() < test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.max, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() > test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.get, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    \n    return prop in getters ? getters[prop](value) : -1;\n  });\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    const update = _number(params.set, context, 0);\n\n    return prop in setters ? setters[prop](value, update) : value;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 0);\n\n    return unit in add ? add[unit](value, amount) : value;\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 0);\n\n    return unit in add ? add[unit](value, -amount) : value;\n  });\n\n  run.setOperation(ops.startOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in startOf ? mutate(value, startOf[unit]) : value;\n  });\n\n  run.setOperation(ops.endOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in endOf ? mutate(value, endOf[unit]) : value;\n  });\n\n  run.setOperation(ops.daysInMonth, (params) => (context) => \n    getDaysInMonth(_date(params.value, context))\n  );\n\n  run.setOperation(ops.daysInYear, (params) => (context) => \n    getDaysInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.weeksInYear, (params) => (context) => \n    getWeeksInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    new Date(_date(params.value, context).getTime())\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n\n    return unit in startOf ? compareDates(value, test, unit) : 0;\n  });\n\n  run.setOperation(ops.diff, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis');\n    const absolute = _bool(params.absolute, context, true);\n    const adjust = _text(params.adjust, context, 'down');\n\n    if (!(unit in diff) || !(adjust in adjusters))\n    {\n      return Number.NaN;\n    }\n\n    const amount = adjusters[adjust]( diff[unit](value, test) );\n\n    return absolute ? Math.abs(amount) : amount;\n  });\n\n  run.setOperation(ops.timezoneOffset, (params) => (context) => \n    getDateOffset(_date(params.value, context))\n  );\n\n  run.setOperation(ops.toText, (params) => (context) =>\n    DateFormat.format(_text(params.format, context), [_date(params.value, context), currentLocale])\n  );\n\n  run.setOperation(ops.toISOText, (params) => (context) => \n    _date(params.value, context).toISOString()\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isDate(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) === 0\n  );\n\n  run.setOperation(ops.isBefore, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isBeforeOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isAfter, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isAfterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _date(params.value, context);\n    const start = _date(params.start, context);\n    const end = _date(params.end, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    const startInclusive = _bool(params.startInclusive, context, true);\n    const endInclusive = _bool(params.endInclusive, context, false);\n\n    const startCompare = compareDates(value, start, unit);\n    const endCompare = compareDates(value, end, unit);\n    \n    const startOffset = startInclusive ? 0 : 1;\n    const endOffset = endInclusive ? 0 : -1;\n\n    return startCompare >= startOffset && endCompare <= endOffset;\n  });\n\n  run.setOperation(ops.isStartOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in startOf\n      ? mutate(value, startOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isEndOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in endOf\n      ? mutate(value, endOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isDST, (params) => (context) => \n    isDaylightSavingTime(_date(params.value, context))\n  );\n\n  run.setOperation(ops.isLeapYear, (params) => (context) => \n    isLeapYear(_date(params.value, context))\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    _date(params.value, context).getTime()\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ListOps, getCompare, isBoolean, isEmpty, isDate, isNumber, isString, isArray, COMPONENT_MAX, isColor } from 'expangine-runtime';\nimport { _list, _optional, _number, saveScope, restoreScope, _text, _bool, _asTuple, _asObject, _numberMaybe, _listMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ListOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) => \n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.build, (params, scope) => (context) => {\n    const n = _number(params.count, context);\n    const list: any[] = [];\n\n    if (n <= 0) \n    {\n      return list;\n    }\n\n    const saved = saveScope(context, scope);\n\n    if (_bool(params.sameItem, context, false)) \n    {\n      context[scope.index] = 0;\n      context[scope.last] = undefined;\n      context[scope.list] = list;\n      context[scope.count] = n;\n\n      const item = params.item(context);\n\n      for (let i = 0; i < n; i++) \n      {\n        list[i] = item;\n      }\n    } \n    else \n    {\n      let last;\n\n      for (let i = 0; i < n; i++) \n      {\n        context[scope.index] = i;\n        context[scope.last] = last;\n        context[scope.list] = list;\n        context[scope.count] = n;\n\n        const item = params.item(context);\n\n        last = item;\n        list.push(item);\n      }\n    }\n\n    restoreScope(context, saved);\n\n    return list;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.list, context)[_number(params.index, context)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context);\n    const prev = list[index];\n    list[index] = params.value(context);\n\n    return prev;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addFirst, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.unshift(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addLast, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.insert, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    const index = _number(params.index, context, 0);\n    if (item !== undefined) {\n      list.splice(index, 0, item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.remove, (params, scope) => (context) => \n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n, \n      (_, i, list) => (list.splice(i, 1), i), \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.removeFirst, (params, scope) => (context) => \n    _list(params.list, context).shift()\n  );\n\n  run.setOperation(ops.removeLast, (params, scope) => (context) => \n    _list(params.list, context).pop()\n  );\n\n  run.setOperation(ops.removeAt, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context, -1);\n    let item;\n    if (index >= 0 && index < list.length) {\n      item = list[index];\n      list.splice(index, 1);\n    }\n\n    return item;\n  });\n\n  run.setOperation(ops.removeWhere, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => n - 1, \n      n => -1,\n      [],\n      (item, index, list, removed) => {\n        if (params.where(context)) {\n          removed.push(item);\n          list.splice(index, 1);\n        }\n        \n        return removed;\n      }\n    )\n  );\n\n  run.setOperation(ops.contains, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n,\n      () => true, \n      () => false\n    )\n  );\n\n  run.setOperation(ops.find, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return undefined;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      undefined,\n      (item, index) => {\n        if (params.where(context)) {\n          return item;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.copy, (params, scope) => (context) => \n    params.deepCopy\n      ? handleList(\n          _list(params.list, context), \n          context, \n          scope, \n          list => list.map(item => {\n            context[scope.copy] = item;\n            \n            return params.deepCopy(context);\n          })\n        )\n      : _list(params.list, context).slice()\n  );\n\n  run.setOperation(ops.reverse, (params) => (context) => {\n    const list = _list(params.list, context);\n    const half = Math.floor(list.length / 2); \n    \n    for (let i = 0, j = list.length - 1; i < half; i++, j--) { \n      swap(list, i, j);\n    }\n    \n    return list;\n  });\n\n  run.setOperation(ops.exclude, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const exclude = _list(params.exclude, context);\n\n    for (const item of exclude) \n    {\n      handleListIsEqual(list, context, params, scope, item, n => 0, n => n, (_, k) => (list.splice(k, 1), true), () => false);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.overlap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const overlap = _list(params.overlap, context);\n    const overlapping: any[] = [];\n\n    for (const item of overlap) \n    {\n      if (handleListIsEqual(list, context, params, scope, item, n => 0, n => n, () => true, () => false))\n      {\n        overlapping.push(item)\n      }\n    }\n\n    return overlapping;\n  });\n\n  run.setOperation(ops.sort, (params, scope) => (context) =>\n    handleList(\n      _list(params.list, context), \n      context, \n      scope, \n      list => {\n        list.sort((value, test) => {\n          context[scope.list] = list;\n          context[scope.value] = value;\n          context[scope.test] = test;\n\n          return _number(params.compare, context, 0);\n        });\n\n        return list;\n      }\n    )\n  );\n\n  run.setOperation(ops.shuffle, (params) => (context) => {\n    const list = _list(params.list, context);\n    let times = _number(params.times, context, 1);\n    const n = list.length;\n\n    while (--times >= 0) {\n      for (let i = 0; i < n; i++) {\n        swap(list, i, Math.floor(Math.random() * n));\n      }\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.unique, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const skip = {};\n    const unique = [];\n\n    for (let i = 0; i < list.length - 1; i++) {\n      if (skip[i]) {\n        continue;\n      }\n\n      const item = list[i];\n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (!exists) {\n        unique.push(item);\n      }\n    }\n\n    return unique;\n  });\n\n  run.setOperation(ops.duplicates, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const once = _bool(params.once, context, false);\n    const skip = {};\n    const duplicates = [];\n\n    for (let i = 0; i < list.length; i++) {\n\n      const item = list[i];\n\n      if (skip[i]) {\n        if (once) {\n          continue;\n        } else {\n          duplicates.push(item);\n        }\n      }\n      \n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (exists) {\n        duplicates.push(item);\n      }\n    }\n\n    return duplicates;\n  });\n\n  run.setOperation(ops.take, (params) => (context) => \n    _list(params.list, context).slice(0, _number(params.count, context))\n  );\n\n  run.setOperation(ops.skip, (params) => (context) => \n    _list(params.list, context).slice(_number(params.count, context))\n  );\n\n  run.setOperation(ops.drop, (params) => (context) => {\n    const list = _list(params.list, context);\n    const count = _number(params.count, context);\n\n    return list.slice(0, list.length - count);\n  });\n\n  run.setOperation(ops.append, (params) => (context) => {\n    const list = _list(params.list, context);\n    const append = _list(params.append, context);\n\n    return list.concat(append);\n  });\n\n  run.setOperation(ops.prepend, (params) => (context) => {\n    const list = _list(params.list, context);\n    const prepend = _list(params.prepend, context);\n\n    return prepend.concat(list);\n  });\n\n  run.setOperation(ops.indexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n, _number(params.start, context, 0))), \n      n => n, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.lastIndexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context),\n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n - 1, _number(params.start, context, n - 1))), \n      n => -1, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.findIndex, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return -1;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      -1,\n      (item, index) => {\n        if (params.where(context)) {\n          return index;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.last, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[list.length - 1];\n  });\n\n  run.setOperation(ops.first, (params) => (context) => \n    _list(params.list, context)[0]\n  );\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _list(params.list, context).length\n  );\n\n  run.setOperation(ops.randomList, (params) => (context) => {\n    const list = _list(params.list, context);\n    const n = list.length;\n    const count = Math.min(_number(params.count, context, 0), n);\n\n    if (count === n)\n    {\n      return list.slice();\n    }\n\n    const taken = {};\n    const random = [];\n\n    while (random.length < count)\n    {\n      const i = Math.floor(Math.random() * n);\n\n      if (!taken[i])\n      {\n        random.push(list[i]);\n        taken[i] = true;\n      }\n    }\n\n    return random;\n  });\n\n  run.setOperation(ops.random, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[Math.floor(Math.random() * list.length)];\n  });\n\n  // Iteration\n\n  run.setOperation(ops.join, (params, scope) => (context) =>\n    _text(params.prefix, context) + \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n,\n      '',\n      (item, index, list, sum) => (\n        sum\n          ? sum \n            + _text(params.delimiter, context, ', ') \n            + _text(params.toText, context, item)\n          : sum\n            + _text(params.toText, context, item)\n      )\n    ) +\n    _text(params.suffix, context)\n  );\n\n  run.setOperation(ops.each, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const reverse = _bool(params.reverse, context, false);\n\n    handleListIteration(list, context, scope, \n      n => reverse ? n - 1 : 0, \n      n => reverse ? 0 - 1 : n, \n      undefined,\n      () => params.each(context)\n    );\n\n    return list;\n  });\n\n  run.setOperation(ops.filter, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context),\n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (params.filter(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.not, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (!params.not(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.map, (params, scope) => (context) => \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, mapped) => {\n        mapped.push(params.transform(context));\n        \n        return mapped;\n      }\n    )\n  );\n\n  run.setOperation(ops.split, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      { pass: [], fail: [] },\n      (item, index, list, result) => {\n        if (params.pass(context)) {\n          result.pass.push(item);\n        } else {\n          result.fail.push(item);\n        }\n\n        return result;\n      }\n    )\n  );\n\n  run.setOperation(ops.reduce, (params, scope) => (context) =>\n    handleListIteration(_list(params.list, context), context, scope, \n      n => 0, \n      n => n, \n      params.initial(context),\n      (item, index, list, reduced) => {\n        context[scope.reduced] = reduced;\n\n        return params.reduce(context);\n      }\n    )\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context) => {\n    const list = _list(params.value, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return list.length - test.length;\n    }\n\n    let less = 0, more = 0;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n    });\n\n    return getCompare(less, more);\n  });\n\n  run.setOperation(ops.group, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      type Grouping = { by: any, group: any[] };\n\n      const map = new Map<any, Grouping>();\n      const groups: Grouping[] = [];\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const by = params.by(context);\n        const grouping = map.get(by);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (grouping) {\n          grouping.group.push(keyValue);\n        } else {\n          const newGrouping: Grouping = {\n            by, group: [ keyValue ],\n          };\n          groups.push(newGrouping);\n          map.set(by, newGrouping);\n        }\n      }\n\n      return groups;\n    });\n  });\n\n  run.setOperation(ops.toListMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map<any, any[]>();\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const keyList = map.get(key);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (keyList) {\n          keyList.push(keyValue);\n        } else {\n          map.set(key, [\n            keyValue\n          ]);\n        }\n      }\n\n      return map;\n    });\n  });\n\n  run.setOperation(ops.toMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map();\n\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = item;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const value = _optional(params.getValue, context, item);\n\n        map.set(key, value);\n      }\n\n      return map;\n    });\n  });\n\n  // Aggregates\n\n  run.setOperation(ops.min, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.min(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.max, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.max(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.sum, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : value + agg;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.avg, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0 },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg.count === 0 ? null : agg.sum / agg.count,\n    )\n  );\n\n  run.setOperation(ops.std, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / agg.count;\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.variance, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         if (agg.count === 1) {\n           return 0;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / (agg.count - 1);\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.median, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => agg.values.length === 0\n        ? null\n        : agg.values.length % 2 === 1\n          ? agg.values[Math.floor(agg.values.length / 2)]\n          : (\n              agg.values[Math.floor(agg.values.length / 2) - 1] +\n              agg.values[Math.floor(agg.values.length / 2)]\n          ) / 2,\n    )\n  );\n\n  run.setOperation(ops.bitand, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0xffffffff,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg & value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg | value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitxor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg ^ value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length > 0\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return false;\n    }\n\n    let equal = true;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        if (!params.isEqual(context)) {\n          equal = false;\n          break;\n        }\n      }\n    });\n\n    return equal;\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => !isEmpty(v))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _list(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => {\n    const value = _list(params.value, context);\n\n    return new Map(value.map((v, i) => [i.toString(), v]));\n  });\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.length)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, () => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}\n\nfunction swap(arr: any[], i: number, k: number)\n{\n  const temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\n\nfunction handleList<R>(list: any[], context: object, scope: Record<string, string>, handle: (list: any[]) => R): R\n{\n  const saved = saveScope(context, scope);\n\n  const result = handle(list);\n\n  restoreScope(context, saved);\n\n  return result;\n}\n\nfunction handleAggregate<A>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  initialAggregate: A,\n  aggregate: (current: any, index: number, list: any[], aggregate: A) => A,\n  getAggregate: (aggregate: A) => number | null,\n): number | null {\n  return handleList(list, context, scope, () =>\n  {\n    let agg: A | null = initialAggregate;\n\n    for (let i = 0; i < list.length; i++)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      agg = aggregate(item, i, list, agg);\n    }\n\n    return getAggregate(agg);\n  });\n}\n\nfunction handleListIteration<R>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  start: (n: number) => number,\n  end: (n: number) => number,\n  initialResult: R,\n  onItem: (current: any, index: number, list: any[], lastResult: R) => R,\n  earlyExit: boolean = false\n): R \n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n    let result = initialResult;\n\n    while (i !== e)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      const newResult = onItem(item, i, list, result);\n\n      if (earlyExit)\n      {\n        if (newResult !== undefined)\n        {\n          return newResult;\n        }\n      }\n      else\n      {\n        result = newResult;\n      }\n\n      if (list[i] === item || i !== 1)\n      {\n        i += d;\n      }\n    }\n\n    return result;\n  });\n}\n\nfunction handleListIsEqual<R>(\n  list: any[],\n  context: object, \n  params: Record<'list' | 'isEqual', LiveCommand>, \n  scope: Record<'list' | 'value' | 'test', string>, \n  value: any, \n  start: (n: number) => number,\n  end: (n: number) => number,\n  handleMatch: (current: any, index: number, list: any[]) => R | undefined,\n  getDefaultResult: (list: any[]) => R\n): R\n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n\n    while (i !== e)\n    {\n      const test = list[i];\n      const next = list[i + d];\n\n      context[scope.list] = list;\n      context[scope.value] = value;\n      context[scope.test] = test;\n\n      if (params.isEqual(context)) \n      {\n        const matchResult = handleMatch(test, i, list);\n\n        if (matchResult !== undefined)\n        {\n          return matchResult;\n        }\n        else if (list[i] === next)\n        {\n          i -= d;\n        }\n      }\n\n      i += d;\n    }\n\n    return getDefaultResult(list);\n  });\n}","import { Runtime, MapOps, toArray, getCompare, isMap, isBoolean, isDate, isNumber, isObject, isString, isArray, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { saveScope, restoreScope, _map, _optional, _number, _mapMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = MapOps;\n    \n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Map()\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _mapMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) => \n    _map(params.map, context).get(params.key(context))\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const key = params.key(context);\n    const existing = map.get(key);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = existing;\n\n    const value = params.value(context);\n\n    map.set(key, value);\n\n    restoreScope(context, saved);\n\n    return existing;\n  });\n\n  run.setOperation(ops.has, (params) => (context) =>\n    _map(params.map, context).has(params.key(context))\n  );\n\n  run.setOperation(ops.delete, (params) => (context) =>\n    _map(params.map, context).delete(params.key(context))\n  );\n\n  run.setOperation(ops.keys, (params) => (context) =>\n    toArray(_map(params.map, context).keys())\n  );\n\n  run.setOperation(ops.values, (params) => (context) =>\n    toArray(_map(params.map, context).values())\n  );\n\n  run.setOperation(ops.entries, (params) => (context) => {\n    const map = _map(params.map, context);\n    const entries: { keys: any[], values: any[] } = { keys: [], values: [] };\n\n    for (const [key, value] of map.entries()) {\n      entries.keys.push(key);\n      entries.values.push(value);\n    }\n\n    return entries;\n  });\n\n  run.setOperation(ops.pairs, (params) => (context) => {\n    const map = _map(params.map, context);\n    const pairs: Array<{ key: any, value: any }> = [];\n\n    for (const [key, value] of map.entries()) {\n      pairs.push({ key, value });\n    }\n\n    return pairs;\n  });\n\n  run.setOperation(ops.clear, (params) => (context) => {\n    const map = _map(params.map, context);\n    map.clear();\n\n    return map;\n  });\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _map(params.map, context).size\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    return handleMap(map, context, scope, () => {\n      let less = 0, more = 0;\n\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          more++;\n          continue;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n\n      for (const key of test.keys()) {\n        if (!map.has(key)) {\n          less++;\n        }\n      }\n\n      return getCompare(less, more);\n    });\n  }));\n\n  run.setOperation(ops.copy, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.deepCopy && !params.deepCopyKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesCopy: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesCopy.push([\n          _optional(params.deepCopyKey, context, key),\n          _optional(params.deepCopy, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesCopy);\n  });\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.transform && !params.transformKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesTransformed: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesTransformed.push([\n          _optional(params.transformKey, context, key),\n          _optional(params.transform, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesTransformed);\n  });\n\n  run.setOperation(ops.toPlainObject, (params) => (context) => {\n    const map = _map(params.map, context);\n    const plain = Object.create(null);\n\n    for (const [key, value] of map.entries()) {\n      plain[key] = value;\n    }\n\n    return plain;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isMap(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    if (map.size !== test.size) {\n      return false;\n    }\n\n    return handleMap(map, context, scope, () => {\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          return false;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        if (!params.isEqual(context)) { \n          return false;\n        }\n      }\n\n      return true;\n    });\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.size > 0)\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => new Date())\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    toArray(_map(params.value, context).values())\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.size)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => [v])\n  );\n\n}\n\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isMap(val) && isType(val.get('value'))\n    ? val.get('value')\n    : otherwise(val);\n}\n\nfunction handleMap<R>(map: Map<any, any>, context: LiveContext, scope: Record<string, string>, handle: (map: Map<any, any>) => R): R\n{\n  const saved = saveScope(context, scope);\n  \n  const result = handle(map);\n\n  restoreScope(context, saved);\n\n  return result;\n}","import { Runtime, NumberOps, parse, isNumber, isUndefined, isString, isWhole } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _textMaybe, _asTuple, _asObject, _asMap, _asList } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nconst DEFAULT_BASE = 10;\n\nexport default function(run: Runtime<LiveContext, LiveResult>, epsilon: number = 0.000001)\n{\n  const ops = NumberOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    0\n  );\n\n  run.setOperation(ops.pi, (params) => (context) =>\n    Math.PI\n  );\n\n  run.setOperation(ops.pi2, (params) => (context) =>\n    Math.PI + Math.PI\n  );\n\n  run.setOperation(ops.piHalf, (params) => (context) =>\n    // tslint:disable-next-line: no-magic-numbers\n    Math.PI * 0.5\n  );\n\n  run.setOperation(ops.e, (params) => (context) =>\n    Math.E\n  );\n\n  run.setOperation(ops.sqrt2, (params) => (context) =>\n    Math.SQRT2\n  );\n\n  run.setOperation(ops.sqrt12, (params) => (context) =>\n    Math.SQRT1_2\n  );\n\n  run.setOperation(ops.ln2, (params) => (context) =>\n    Math.LN2\n  );\n\n  run.setOperation(ops.ln10, (params) => (context) =>\n    Math.LN10\n  );\n\n  run.setOperation(ops.log2e, (params) => (context) =>\n    Math.LOG2E\n  );\n\n  run.setOperation(ops.log10e, (params) => (context) =>\n    Math.LOG10E\n  );\n\n  // Binary Operations\n\n  run.setOperation(ops.add, (params) => (context) => \n    _number(params.value, context) + _number(params.addend, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _number(params.value, context) - _number(params.subtrahend, context)\n  );\n\n  run.setOperation(ops.mul, (params) => (context) => \n    _number(params.value, context) * _number(params.multiplier, context)\n  );\n\n  run.setOperation(ops.div, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.mod, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => \n    Math.min(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.max, (params) => (context) => \n    Math.max(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.pow, (params) => (context) => \n    Math.pow(_number(params.value, context), _number(params.exponent, context))\n  );\n\n  run.setOperation(ops.atan2, (params) => (context) => \n    Math.atan2(_number(params.y, context), _number(params.x, context))\n  );\n\n  run.setOperation(ops.hypot, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n\n    return Math.sqrt(a * a + b * b);\n  });\n\n  run.setOperation(ops.choose, (params) => (context) => {\n    const n = _number(params.n, context);\n    const k = _number(params.k, context);\n    if (!isFinite(n) || !isFinite(k)) {\n      return Number.NaN;\n    }\n\n    return choose(n, k);\n  });\n\n  run.setOperation(ops.gcd, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n    if (!isFinite(a) || !isFinite(b)) {\n      return Number.NaN;\n    }\n\n    return gcd(a, b);\n  });\n\n  run.setOperation(ops.bitAnd, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) & _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitOr, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) | _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitXor, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) ^ _number(params.b, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    _number(params.value, context) - _number(params.test, context)\n  );\n\n  // Unary Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _numberMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.sqrt, (params) => (context) => \n    Math.sqrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sq, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value * value;\n  });\n\n  run.setOperation(ops.cbrt, (params) => (context) => \n    Math.cbrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.floor, (params) => (context) => \n    Math.floor(_number(params.value, context))\n  );\n\n  run.setOperation(ops.ceil, (params) => (context) => \n    Math.ceil(_number(params.value, context))\n  );\n\n  run.setOperation(ops.up, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.down, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value > 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.round, (params) => (context) => \n    Math.round(_number(params.value, context))\n  );\n\n  run.setOperation(ops.abs, (params) => (context) => \n    Math.abs(_number(params.value, context))\n  );\n\n  run.setOperation(ops.neg, (params) => (context) => \n    -_number(params.value, context)\n  );\n\n  run.setOperation(ops.sign, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value === 0 ? 0 : value < 0 ? -1 : 1;\n  });\n\n  run.setOperation(ops.log, (params) => (context) => \n    Math.log(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sin, (params) => (context) => \n    Math.sin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cos, (params) => (context) => \n    Math.cos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.tan, (params) => (context) => \n    Math.tan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sinh, (params) => (context) => \n    Math.sinh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cosh, (params) => (context) => \n    Math.cosh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.asin, (params) => (context) => \n    Math.asin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.acos, (params) => (context) => \n    Math.acos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.atan, (params) => (context) => \n    Math.atan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.factorial, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return isFinite(value) ? factorial(value) : value;\n  });\n\n  run.setOperation(ops.bitFlip, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    ~_number(params.value, context)\n  );\n\n  // Other\n\n  run.setOperation(ops.clamp, (params) => (context) => \n    Math.max(_number(params.min, context), Math.min(_number(params.value, context), _number(params.max, context)))\n  );\n\n  run.setOperation(ops.triangleHeight, (params) => (context) => {\n    const base = _number(params.base, context);\n    const side1 = _number(params.side1, context);\n    const side2 = _number(params.side2, context);\n    if (!isFinite(base) || !isFinite(side1) || !isFinite(side2)) {\n      return Number.NaN;\n    }\n\n    return triangleHeight(base, side1, side2);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _number(params.start, context);\n    const end = _number(params.end, context);\n    const delta = _number(params.delta, context);\n\n    return (end - start) * delta + start;\n  });\n\n  // Generators\n\n  run.setOperation(ops.rnd, (params) => (context) => {\n    const min = _number(params.min, context, 0);\n    const max = _number(params.max, context, 1);\n    const gap = max - min;\n    const whole = _bool(params.whole, context, false);\n    const include = _bool(params.includeMax, context, true);\n\n    return whole\n      ? include\n        ? Math.floor((gap + 1) * Math.random()) + min\n        : Math.floor(gap * Math.random()) + min\n      : Math.random() * gap + min;\n  });\n\n  // Formatters\n\n  run.setOperation(ops.toBaseText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const base = _number(params.base, context, DEFAULT_BASE);\n    const min = _number(params.minDigits, context, 0);\n    \n    let x = value.toString(base);\n\n    while (x.length < min) x = '0' + x;\n    \n    return x;\n  });\n\n  run.setOperation(ops.toText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const prefix = _text(params.prefix, context);\n    const suffix = _text(params.suffix, context);\n    const minPlaces = _numberMaybe(params.minPlaces, context);\n    const maxPlaces = _numberMaybe(params.maxPlaces, context);\n    const useExponent = _bool(params.useExponent, context, false);\n    const separator = _textMaybe(params.thousandSeparator, context);\n    \n    let to = '';\n\n    if (useExponent) {\n      to = value.toExponential(isUndefined(maxPlaces) ? minPlaces : maxPlaces);\n    } else if (isNumber(minPlaces)) {\n      to = value.toFixed(minPlaces);\n    } else {\n      to = value.toPrecision(maxPlaces);\n    }\n\n    const SEPARATOR_NUMBER = 1.1;\n    const SEPARATOR_OFFSET = 3;\n\n    if (isString(separator)) {\n      const systemSeparator = SEPARATOR_NUMBER.toLocaleString().substring(1, SEPARATOR_OFFSET - 1);\n      let index = to.indexOf(systemSeparator);\n      if (index === -1) {\n        index = to.length;\n      }\n      index -= SEPARATOR_OFFSET;\n      while (index > 0) {\n        to = to.substring(0, index) + separator + to.substring(index);\n        index -= SEPARATOR_OFFSET;\n      }\n    }\n    \n    return prefix + to + suffix;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isNumber(params.value(context))\n  );\n\n  run.setOperation(ops.isZero, (params) => (context) => \n    Math.abs(_number(params.value, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) > _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    _number(params.value, context) < _number(params.test, context)\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    _number(params.value, context) <= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    _number(params.value, context) > _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    _number(params.value, context) >= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _number(params.value, context);\n    const min = _number(params.min, context);\n    const max = _number(params.max, context);\n    const minInclusive = _bool(params.minInclusive, context, true);\n    const maxInclusive = _bool(params.maxInclusive, context, true);\n\n    const minCompare = value - min;\n    const maxCompare = value - max;\n\n    const minOffset = minInclusive ? 0 : 1;\n    const maxOffset = maxInclusive ? 0 : -1;\n\n    return minCompare >= minOffset && maxCompare <= maxOffset;\n  });\n\n  run.setOperation(ops.isWhole, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isDecimal, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return !isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isPositive, (params) => (context) =>\n    _number(params.value, context) >= 0\n  );\n\n  run.setOperation(ops.isNegative, (params) => (context) =>\n    _number(params.value, context) < 0\n  );\n\n  run.setOperation(ops.isDivisible, (params) => (context) =>\n    Math.abs(_number(params.value, context) % _number(params.by, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    // tslint:disable: no-magic-numbers no-bitwise\n    const r = value & 0xFF;\n    const g = (value >> 8) & 0xFF;\n    const b = (value >> 16) & 0xFF;\n    const a = (value >> 24) & 0xFF;\n    // tslint:enable: no-magic-numbers no-bitwise\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\n\nfunction factorial (x: number): number {\n  let f = x;\n  while (--x > 1) {\n    f *= x;\n  }\n\n  return f;\n}\n\nfunction gcd (a: number, b: number): number {\n  const as = Math.abs(a);\n  const bs = Math.abs(b);\n  let x = Math.max(as, bs);\n  let y = Math.min(as, bs);\n\n  for (;;) {\n    if (y === 0) return x;\n    x %= y;\n    if (x === 0) return y;\n    y %= x;\n  }\n}\n\nfunction choose(n: number, k: number): number \n{\n  let num = 1; \n  let den = 1;\n  let denom = 0;\n\n  // tslint:disable-next-line: no-bitwise\n  if (k > (n >> 1))\n  {\n    k = n - k;\n  }\n\n  while (k >= 1)\n  {\n    num *= n--;\n    den *= k--;\n    denom = gcd( num, den );\n    num /= denom;\n    den /= denom;\n  }\n\n  return num;\n}\n\nconst HALF = 0.5;\nconst TWO = 2;\n\nfunction triangleHeight(base: number, side1: number, side2: number): number \n{\n  const p = (base + side1 + side2) * HALF;\n  const area = Math.sqrt( p * (p - base) * (p - side1) * (p - side2) );\n  const height = area * TWO / base;\n\n  return height;\n}","import { Runtime, ObjectOps, compare, copy, toString, isEmpty, isObject, isBoolean, isDate, isArray, isMap, isNumber, isString, isColor, COMPONENT_MAX, ColorType } from 'expangine-runtime';\nimport { _object, restoreScope, saveScope, _objectMaybe } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ObjectOps;\n\n  // Static \n\n  run.setOperation(ops.create, (params) => (context) =>\n    Object.create(null)\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _objectMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.has, (params) => (context) =>\n    params.key(context) in _object(params.object, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _object(params.object, context)[params.key(context)]\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = object[key];\n\n    const value = params.value(context);\n\n    object[key] = value;\n\n    restoreScope(context, saved);\n\n    return object;\n  });\n\n  run.setOperation(ops.delete, (params) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const value = object[key];\n\n    delete object[key];\n\n    return value;\n  });\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(_object(params.object, context))\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isObject(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, () => true)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = params.value(context);\n\n    if (isObject(value) && isColor(value.value)) {\n      return value.value;\n    }\n\n    return ColorType.baseType.normalize(value) \n      || ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX });\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, v => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, () => 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, v => toString(v))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => [v])\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isObject(val) && isType(val.value)\n    ? val.value\n    : otherwise(val);\n}","import { Runtime, TextOps, isString, parse, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _asList, _asMap, _asObject, _asTuple, _textMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TextOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) => \n    ''\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _textMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.append, (params) => (context) => \n    _text(params.value, context) + _text(params.append, context)\n  );\n\n  run.setOperation(ops.prepend, (params) => (context) => \n    _text(params.prepend, context) + _text(params.value, context)\n  );\n\n  run.setOperation(ops.lower, (params) => (context) => \n    _text(params.value, context).toLowerCase()\n  );\n\n  run.setOperation(ops.upper, (params) => (context) => \n    _text(params.value, context).toUpperCase()\n  );\n\n  run.setOperation(ops.char, (params) => (context) => {\n    const value = _text(params.value, context);\n    const index = _number(params.index, context);\n\n    return index <= value.length ? value.charAt(index) : _text(params.outside, context);\n  });\n\n  run.setOperation(ops.replace, (params) => (context) => \n    _text(params.value, context).replace(_text(params.find, context), _text(params.replace, context))\n  );\n\n  run.setOperation(ops.repeat, (params) => (context) => {\n    const value = _number(params.value, context);\n    let times = _number(params.times, context);\n    let repeated = '';\n    while (--times >= 0){ \n      repeated += value;\n    }\n\n    return repeated;\n  });\n\n  run.setOperation(ops.split, (params) => (context) => \n    _text(params.value, context).split(_text(params.by, context), _numberMaybe(params.limit, context))\n  );\n\n  run.setOperation(ops.chars, (params) => (context) => \n    _text(params.value, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _text(params.value, context).substring(_number(params.start, context, 0), _numberMaybe(params.end, context))\n  );\n\n  run.setOperation(ops.indexOf, (params) => (context) => \n    _text(params.value, context).indexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.lastIndexOf, (params) => (context) => \n    _text(params.value, context).lastIndexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.trim, (params) => (context) => {\n    let value = _text(params.value, context);\n    if (_bool(params.start, context, true)) {\n      value = value.replace(/^\\w+/, '');\n    }\n    if (_bool(params.end, context, true)) {\n      value = value.replace(/\\w+$/, '');\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(0, test.length) === test;\n  });\n\n  run.setOperation(ops.endsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(value.length - test.length) === test;\n  });\n\n  run.setOperation(ops.soundex, (params) => {\n    const LETTERS_ONLY = /[^a-z]/g;\n    const ALLOWED_ONLY = /[^bfpvcgjkqsxzdtlmnr]/g;\n    const SOUNDEX_MIN_DEFAULT = 4;\n    const MAP = {\n      b: 1, f: 1, p: 1, v: 1,\n      c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2,\n      d: 3, t: 3,\n      l: 4,\n      m: 5, n: 5,\n      r: 6\n    };\n\n    return (context) => {\n      let value = _text(params.value, context);\n      const max = _numberMaybe(params.max, context);\n      const min = _number(params.min, context, SOUNDEX_MIN_DEFAULT);\n\n      value = value.toLowerCase();\n      value = value.replace(LETTERS_ONLY, '');\n      value = value.charAt(0) + value.substring(1).replace(ALLOWED_ONLY, '');\n\n      let soundex = value.charAt(0);\n\n      for (let i = 1; i < value.length; i++) {\n        soundex += MAP[value.charAt(i)];\n      }\n      \n      let last = soundex.charAt(1)\n      for (let i = 2; i < soundex.length; i++) { \n        if (soundex.charAt(i) === last) {\n          soundex = soundex.substring(0, i) + soundex.substring(i + 1);\n          i--;\n        } else {\n          last = soundex.charAt(i);\n        }\n      }\n\n      if (isFinite(max)) {\n        soundex = soundex.substring(0, max + 1);\n      }\n\n      while (soundex.length < min) {\n        soundex += '0';\n      }\n\n      return soundex;\n    };\n  });\n\n  run.setOperation(ops.distance, (params) => {\n    const distance = (a: string, b: string): number => {\n      const distanceMatrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n\n      for (let i = 0; i <= a.length; i += 1) {\n        distanceMatrix[0][i] = i;\n      }\n\n      for (let j = 0; j <= b.length; j += 1) {\n        distanceMatrix[j][0] = j;\n      }\n\n      for (let j = 1; j <= b.length; j += 1) {\n        for (let i = 1; i <= a.length; i += 1) {\n          const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n          distanceMatrix[j][i] = Math.min(\n            distanceMatrix[j][i - 1] + 1,\n            distanceMatrix[j - 1][i] + 1,\n            distanceMatrix[j - 1][i - 1] + indicator,\n          );\n        }\n      }\n\n      return distanceMatrix[b.length][a.length];\n    };\n    \n    return (context) => {\n      const value = _text(params.value, context);\n      const test = _text(params.test, context);\n\n      return distance(value, test);\n    };\n  });\n\n  run.setOperation(ops.length, (params) => (context) =>\n    _text(params.value, context).length\n  );\n\n  run.setOperation(ops.compare, (params) => (context) =>\n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false))\n  );\n\n  run.setOperation(ops.like, (params) => (context) => {\n    const value = _text(params.value, context);\n    const pattern = _text(params.pattern, context);\n    const ignoreCase = _bool(params.ignoreCase, context, false);\n    \n    const regexPattern = pattern\n      .split('%')\n      .map(x => x ? x.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : x)\n      .join('.*')\n    ;\n\n    const regex = new RegExp('^' + regexPattern + '$', ignoreCase ? 'i' : undefined);\n\n    return !!value.match(regex);\n  });\n\n  run.setOperation(ops.pad, (params) => (context) => {\n    let value = _text(params.value, context);\n    const padding = _text(params.padding, context) || ' ';\n    const append = _bool(params.append, context);\n    const min = _number(params.min, context);\n    const max = _numberMaybe(params.max, context);\n\n    if (append) { \n      while (value.length < min) {\n        value = value + padding;\n      }\n    } else {\n      while (value.length < min) {\n        value = padding + value;\n      }\n    }\n\n    if (max !== undefined) {\n      if (value.length > max) {\n        if (append) {\n          value = value.substring(0, max);\n        } else {\n          value = value.substring(max - value.length, max);\n        }\n      }\n    }\n\n    return value;\n  });\n\n\n  // Other\n\n\n  // Generators\n\n\n  // Formatters\n\n  run.setOperation(ops.toNumber, (params) => (context) => {\n    const value = parseFloat(_text(params.value, context));\n\n    return isFinite(value) \n      ? value \n      : _number(params.invalidValue, context, 0);\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isString(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params) => (context) => \n    _text(params.value, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params) => (context) => \n    _text(params.value, context).length !== 0\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) >= 0\n  );\n\n  run.setOperation(ops.isLower, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toLowerCase()) === 0;\n  });\n\n  run.setOperation(ops.isUpper, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toUpperCase()) === 0;\n  });\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    /^(true|t|1|y|x)$/.test(_text(params.value, context))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compare(a: string, b: string, ignoreCase: boolean): number \n{\n  return ignoreCase\n    ? a.toLowerCase().localeCompare(b.toLowerCase())\n    : a.localeCompare(b);\n}","import { Runtime, TupleOps, compare, copy, isBoolean, isDate, isEmpty, isNumber, isString, isArray, isMap, isObject, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { _list, _number, _listMaybe } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TupleOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.value, context)[_number(params.index, context, 0)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const tuple = _list(params.value, context);\n    const index = _number(params.index, context, 0);\n    const existing = tuple[index];\n    tuple[index] = params.element(context);\n    \n    return existing;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.find ? v.find(isBoolean) || false : false)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => v.find ? v.find(isDate) || new Date() : new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, (v) => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.find ? v.find(isNumber) || 0 : 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => v.find ? v.find(isString) || '' : '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    params.value(context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}","export * from './LiveRuntime';\n\nimport { LiveRuntime } from './LiveRuntime';\nimport { default as addLiveExpressions } from './Expressions';\nimport { default as addLiveAny } from './Any';\nimport { default as addLiveBoolean } from './Boolean';\nimport { default as addLiveColor } from './Color';\nimport { default as addLiveDate } from './Date';\nimport { default as addLiveList } from './List';\nimport { default as addLiveMap } from './Map';\nimport { default as addLiveNumber } from './Number';\nimport { default as addLiveObject } from './Object';\nimport { default as addLiveText } from './Text';\nimport { default as addLiveTuple } from './Tuple';\n\n\naddLiveExpressions(LiveRuntime);\naddLiveAny(LiveRuntime);\naddLiveBoolean(LiveRuntime);\naddLiveColor(LiveRuntime);\naddLiveDate(LiveRuntime);\naddLiveList(LiveRuntime);\naddLiveMap(LiveRuntime);\naddLiveNumber(LiveRuntime);\naddLiveObject(LiveRuntime);\naddLiveText(LiveRuntime);\naddLiveTuple(LiveRuntime);\n\n\nexport {\n  addLiveExpressions,\n  addLiveAny,\n  addLiveBoolean,\n  addLiveColor,\n  addLiveDate,\n  addLiveList,\n  addLiveMap,\n  addLiveNumber,\n  addLiveObject,\n  addLiveText,\n  addLiveTuple,\n};"],"sourceRoot":""}