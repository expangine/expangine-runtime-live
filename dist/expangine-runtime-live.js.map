{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"expangine-runtime\"","webpack://[name]/./LiveRuntime.ts","webpack://[name]/./helper.ts","webpack://[name]/./Expressions.ts","webpack://[name]/./Any.ts","webpack://[name]/./Boolean.ts","webpack://[name]/./Color.ts","webpack://[name]/./Date.ts","webpack://[name]/./List.ts","webpack://[name]/./Map.ts","webpack://[name]/./Number.ts","webpack://[name]/./Object.ts","webpack://[name]/./Text.ts","webpack://[name]/./Tuple.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wrapCommandWithReturn","cmd","context","result","returnProperty","getCommandWithReturn","expr","provider","this","getCommand","run","defs","getExpression","LiveRuntime","saveScope","scope","popped","prop","alias","restoreScope","saved","undefined","preserveScope","props","map","forEach","last","_optional","defaultValue","_bool","_typed","isValid","invalidValueDefault","invalidValue","_typedDynamic","_boolMaybe","_number","Number","NaN","_numberMaybe","_text","_textMaybe","_list","_listMaybe","_map","Map","_mapMaybe","_object","_objectMaybe","_color","g","b","a","_colorMaybe","_date","Date","_dateMaybe","_asList","getValue","_asMap","_asObject","_asTuple","_colorOrNumber","_regex","getPattern","RegExp","_regexFlag","flag","hasSubs","x","traversePath","path","previous","step","end","length","next","setExpression","parts","sub","set","currentVariable","params","e","op","getOperation","Error","defaults","getOperationScopeDefaults","scopeAlias","operationCommand","chain","data","cases","test","otherwise","caseExpression","valueCommand","tests","defaultCase","isEqual","noScope","matches","expression","expressions","defaultResult","and","pass","or","variable","start","body","breakVariable","max","maxIterations","iterations","stop","dir","condition","vars","defined","sections","template","split","section","index","_source","source","reduce","out","func","getFunction","command","options","args","returnValue","elements","ops","setOperation","cmp","copy","isDefined","getDefined","coalesce","isNotEqual","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","asAny","asBoolean","asColor","baseType","normalize","asDate","asList","asMap","asNumber","parseFloat","isFinite","asObject","asText","asTuple","maybe","xor","not","isTrue","isFalse","compareColor","build","component","clamp","add","addend","alpha","adds","scale","addendScale","subtrahend","mul","multiplier","div","divisor","divSafe","mod","format","formatId","getFormat","formatter","parse","lerp","delta","lighten","amount","darken","toHSL","fromColor","fromHSL","toColor","luminance","contrast","valueL","testL","Math","min","invert","opaque","distance","dist","named","getName","closestName","closestDistance","constants","entries","blend","top","bottom","modeName","blender","BlendFunctions","epsilon","formatMap","bestfit","y","abs","inv","multiply","screen","overlay","hard","soft","dodge","burn","divide","addition","diff","now","today","day","tomorrow","yesterday","parseAsUTC","fromText","fromTimestamp","fromTimestampSeconds","valueOf","update","getTime","unit","startOf","endOf","daysInMonth","daysInYear","weeksInYear","absolute","adjust","timezoneOffset","toText","toISOText","toISOString","id","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isBetween","startInclusive","endInclusive","startCompare","endCompare","isStartOf","isEndOf","isDST","isLeapYear","count","list","sameItem","item","push","prev","addFirst","unshift","addLast","insert","splice","remove","handleListIsEqual","_","removeFirst","shift","removeLast","pop","removeAt","removeWhere","handleListIteration","removed","where","contains","find","reverse","clampedStart","deepCopy","handleList","slice","half","floor","j","swap","exclude","k","overlap","overlapping","sort","compare","shuffle","times","random","unique","skip","duplicates","once","take","drop","append","concat","prepend","indexOf","lastIndexOf","findIndex","first","randomList","taken","join","prefix","sum","delimiter","suffix","each","filter","mapped","transform","fail","initial","reduced","less","more","group","groups","by","grouping","keyValue","newGrouping","toListMap","getKey","keyList","toMap","handleAggregate","agg","avg","std","values","squareAvg","v","sqrt","variance","median","bitand","bitor","bitxor","isEmpty","isNotEmpty","equal","tryCastValue","toString","isType","val","arr","temp","handle","initialAggregate","aggregate","getAggregate","initialResult","onItem","earlyExit","newResult","handleMatch","getDefaultResult","matchResult","existing","existingValue","has","delete","keys","pairs","clear","size","handleMap","deepCopyKey","entriesCopy","transformKey","entriesTransformed","toPlainObject","plain","pi","PI","pi2","piHalf","E","sqrt2","SQRT2","sqrt12","SQRT1_2","ln2","LN2","ln10","LN10","log2e","LOG2E","log10e","LOG10E","pow","exponent","atan2","hypot","choose","num","den","denom","gcd","bitAnd","bitOr","bitXor","sq","cbrt","ceil","up","down","round","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","f","bitFlip","triangleHeight","base","side1","side2","HALF","TWO","rnd","gap","whole","include","includeMax","toBaseText","minDigits","minPlaces","maxPlaces","useExponent","separator","thousandSeparator","to","toExponential","toFixed","toPrecision","systemSeparator","toLocaleString","substring","SEPARATOR_OFFSET","isZero","minInclusive","maxInclusive","isWhole","eps","isDecimal","isPositive","isNegative","isDivisible","as","bs","mergeValues","target","merge","merged","lower","toLowerCase","upper","toUpperCase","char","charAt","outside","replace","repeat","repeated","limit","chars","search","trim","startsWith","endsWith","soundex","LETTERS_ONLY","ALLOWED_ONLY","MAP","q","z","metaphone","distanceMatrix","Array","fill","indicator","ignoreCase","like","pattern","valueCased","regexPattern","regex","match","pad","padding","regexTest","multiline","regexSplit","regexMatch","regexMatchAll","lastIndex","exec","input","regexReplace","all","replacement","regexReplaceDynamic","givenArgs","parseInt","regexIndexOf","toNumber","isLower","localeCompare","isUpper","buildValues","built","tuple","element"],"mappings":"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","file":"expangine-runtime-live.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"expangine-runtime\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"expangine-runtime\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime-live\"] = factory(require(\"expangine-runtime\"));\n\telse\n\t\troot[\"expangine-runtime-live\"] = factory(root[\"expangine-runtime\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Runtime, Command, defs, Expression, CommandProvider } from 'expangine-runtime';\n\n\n\nexport type LiveContext = Record<string, any> | (any[] & Record<string, any>);\n\nexport type LiveResult = any;\n\nexport type LiveCommand = Command<LiveContext, LiveResult>;\n\nexport type LiveCommandMap<K extends string | number | symbol = string> = Record<K, LiveCommand>;\n\nexport type LiveProvider = CommandProvider<LiveContext, LiveResult>;\n\nexport class LiveRuntimeImpl extends Runtime<LiveContext, LiveResult>\n{\n\n  public constructor()\n  {\n    super(defs);\n  }\n\n  public wrapCommandWithReturn(cmd: LiveCommand): LiveCommand\n  {\n    return (context) => {\n      const result = cmd(context);\n\n      return this.returnProperty in context\n        ? context[this.returnProperty]\n        : result;\n    };\n  }\n\n  public getCommandWithReturn(expr: Expression, provider: LiveProvider = this): LiveCommand\n  {\n    return this.wrapCommandWithReturn(this.getCommand(expr, provider));\n  }\n\n  public run(expr: any, context: LiveContext, provider: LiveProvider = this): LiveResult\n  {\n    return this.getCommandWithReturn(this.defs.getExpression(expr), provider)(context);\n  }\n\n}\n\nexport const LiveRuntime = new LiveRuntimeImpl();\n","\nimport { isNumber, isString, isArray, isMap, isObject, isDate, isBoolean, isColor, Color, isFunction } from 'expangine-runtime';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\n\nexport function saveScope<K extends string>(context: LiveContext, scope: Record<string, K>): Record<K, any> \n{\n  const popped = {} as Record<K, string>;\n\n  for (const prop in scope) \n  {\n    const alias = scope[prop];\n\n    popped[alias] = context[alias]\n  }\n\n  return popped;\n}\n\nexport function restoreScope<K extends string>(context: LiveContext, saved: Record<K, any>) \n{\n  for (const prop in saved)\n  { \n    if (saved[prop] === undefined)\n    {\n      delete context[prop];\n    }\n    else\n    {\n      context[prop] = saved[prop];\n    }\n  }\n}\n\nexport function preserveScope<R = any>(context: LiveContext, props: string[], run: () => R): R\n{\n  const saved = props.map((p) => context[p]);\n\n  const result = run();\n\n  saved.forEach((last, i) => \n    last === undefined\n      ? delete context[props[i]]\n      : context[props[i]] = last\n  );\n\n  return result;\n}\n\nexport function _optional (cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: LiveResult): LiveResult \n{\n  return cmd ? cmd(context) : defaultValue;\n}\n\nexport function _bool (cmd: LiveCommand | undefined, context: LiveContext, defaultValue: boolean = false): boolean\n{\n  return cmd ? !!cmd(context) : defaultValue;\n}\n\nexport function _typed<T> (isValid: (value: any) => value is T, invalidValueDefault: T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue;\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue;\n  };\n}\n\nexport function _typedDynamic<T> (isValid: (value: any) => value is T, invalidValueDefault: () => T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: () => T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue();\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue();\n  };\n}\n\nexport const _boolMaybe = _typed<boolean | undefined> (isBoolean, undefined);\n\nexport const _number = _typed (isNumber, Number.NaN);\n\nexport const _numberMaybe = _typed<number | undefined> (isNumber, undefined);\n\nexport const _text = _typed (isString, '');\n\nexport const _textMaybe = _typed<string | undefined> (isString, undefined);\n\nexport const _list  = _typedDynamic<any[]> (isArray, () => []);\n\nexport const _listMaybe = _typed<any[] | undefined> (isArray, undefined);\n\nexport const _map = _typedDynamic<Map<any, any>> (isMap, () => new Map());\n\nexport const _mapMaybe = _typed<Map<any, any> | undefined> (isMap, undefined);\n\nexport const _object = _typedDynamic<any>(isObject, () => ({}));\n\nexport const _objectMaybe = _typed<any | undefined>(isObject, undefined);\n\nexport const _color = _typedDynamic<Color>(isColor, () => ({ r: 255, g: 255, b: 255, a: 255 }));\n\nexport const _colorMaybe = _typed<any | undefined>(isColor, undefined);\n\nexport const _date = _typedDynamic<Date>(isDate, () => new Date());\n\nexport const _dateMaybe = _typed<Date | undefined> (isDate, undefined);\n\nexport function _asList(getValue: LiveCommand, context: LiveContext)\n{\n  return [ getValue(context) ];\n}\n\nexport function _asMap(getValue: LiveCommand, context: LiveContext)\n{\n  return new Map([['value', getValue(context) ]]);\n}\n\nexport function _asObject(getValue: LiveCommand, context: LiveContext)\n{\n  return { value: getValue(context) };\n}\n\nexport function _asTuple(getValue: LiveCommand, context: any)\n{\n  return [ getValue(context) ];\n}\n\nexport function _colorOrNumber(getValue: LiveCommand, context: any)\n{\n  const value = getValue(context);\n\n  if (isColor(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value))\n  {\n    return { r: value, g: value, b: value, a: value };\n  }\n\n  return { r: 255, g: 255, b: 255, a: 255 };\n}\n\nexport function _regex(getPattern: LiveCommand, context: any, g?: LiveCommand | boolean, i?: LiveCommand | boolean, m?: LiveCommand | boolean): RegExp\n{\n  return new RegExp(_text(getPattern, context), \n    (_regexFlag(g, context, false) ? 'g' : '') +\n    (_regexFlag(m, context, false) ? 'm' : '') +\n    (_regexFlag(i, context, false) ? 'i' : '') \n  );\n}\n\nexport function _regexFlag(flag: LiveCommand | boolean | undefined, context: any, defaultValue: boolean = false)\n{\n  return isBoolean(flag)\n    ? flag\n    : isFunction(flag)\n      ? !!flag(context)\n      : defaultValue;\n}","\nimport { Runtime, ConstantExpression, GetExpression, OperationExpression, ChainExpression, \n  IfExpression, NotExpression, AndExpression, OrExpression, ForExpression, \n  WhileExpression, DefineExpression, SwitchExpression, SetExpression, \n  DoExpression, TemplateExpression, UpdateExpression, InvokeExpression, \n  ReturnExpression, NoExpression, TupleExpression, ObjectExpression, SubExpression,\n  isUndefined, objectMap, isObject, isArray, isString, copy } from 'expangine-runtime';\nimport { preserveScope } from './helper';\nimport { LiveCommand, LiveCommandMap, LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n\n  function hasSubs(x: any)\n  {\n    return isObject(x) || isArray(x) || isString(x);\n  }\n\n  function traversePath(context: any, value: any, path: LiveCommand[])\n  {\n    const end = path.length - 1;\n    let previous;\n    let step;\n\n    for (let i = 0; i <= end && !isUndefined(value); i++) \n    {\n      step = path[i](context);\n      previous = value;\n\n      const next = value instanceof Map\n        ? value.get(step)\n        : value === null\n          ? undefined\n          : value[step];\n\n      if (isUndefined(next) && i !== end) \n      {\n        return { end: false, previous, step, value: undefined };\n      }\n\n      value = next;\n    }\n\n    return { end: true, previous, step, value };\n  }\n\n  run.setExpression(ConstantExpression, (expr, provider) => \n  {\n    return () => copy(expr.value)\n  });\n\n  run.setExpression(GetExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n\n    return (context) => traversePath(context, context, parts).value;\n  });\n\n  run.setExpression(SetExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n\n    return (context) => \n    {\n      const { end, previous, step } = traversePath(context, context, parts);\n\n      if (end) \n      {\n        if (previous instanceof Map)\n        {\n          previous.set(step, getValue(context));\n        }\n        else if (hasSubs(previous))\n        {\n          previous[step] = getValue(context);\n        }\n        else\n        {\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(UpdateExpression, (expr, provider) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n    const currentVariable: string = expr.currentVariable;\n\n    return (context) => \n    {\n      const { end, previous, step, value } = traversePath(context, context, parts);\n\n      if (end)\n      {\n        return preserveScope(context, [currentVariable], () => \n        {\n          context[currentVariable] = value;\n        \n          if (previous instanceof Map)\n          {\n            previous.set(step, getValue(context));\n          }\n          else if (hasSubs(previous))\n          {\n            previous[step] = getValue(context);\n          }\n          else\n          {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(SubExpression, (expr, provider) => \n  {\n    const getValue: LiveCommand = provider.getCommand(expr.value);\n    const parts: LiveCommand[] = expr.path.map(sub => provider.getCommand(sub));\n\n    return (context) => traversePath(context, getValue(context), parts).value;\n  });\n\n  run.setExpression(OperationExpression, (expr, provider) => \n  {\n    const params: LiveCommandMap = objectMap(expr.params, e => provider.getCommand(e));\n    const op = provider.getOperation(expr.name);\n\n    if (!op) \n    { \n      throw new Error(`Operation with ${expr.name} is not defined in the given runtime.`);\n    }\n    \n    const defaults = provider.getOperationScopeDefaults(expr.name);\n    let scopeAlias = expr.scopeAlias;\n\n    if (defaults) \n    {\n      for (const prop in defaults) \n      {\n        if (!(prop in scopeAlias)) \n        { \n          if (scopeAlias === expr.scopeAlias) \n          {\n            scopeAlias = { ...scopeAlias };\n          }\n\n          scopeAlias[prop] = defaults[prop];\n        }\n      }\n    }\n\n    const operationCommand = op(params, scopeAlias);\n\n    return (context) =>\n    {\n      if (provider.returnProperty in context) return;\n\n      return operationCommand(context);\n    };\n  });\n\n  run.setExpression(ChainExpression, (expr, provider) => \n  { \n    const chain: LiveCommand[] = expr.chain.map(data => provider.getCommand(data));\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      let last;\n\n      for (const cmd of chain)\n      {\n        last = cmd(context);\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n      }\n\n      return last;\n    };\n  });\n\n  run.setExpression(IfExpression, (expr, provider) => \n  {\n    const cases: [LiveCommand, LiveCommand][] = expr.cases.map(([test, result]) => [provider.getCommand(test), provider.getCommand(result)]);\n    const otherwise: LiveCommand = provider.getCommand(expr.otherwise);\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const caseExpression of cases)\n      {\n        const [test, result] = caseExpression;\n\n        if (test(context)) \n        {\n          return provider.returnProperty in context\n            ? undefined\n            : result(context);\n        }\n      }\n      \n      if (provider.returnProperty in context) return;\n\n      return otherwise(context);\n    };\n  });\n\n  run.setExpression(SwitchExpression, (expr, provider) => \n  {\n    const valueCommand: LiveCommand = provider.getCommand(expr.value);\n    const cases: [LiveCommand[], LiveCommand][] = expr.cases.map(([tests, result]) => [\n      tests.map(t => provider.getCommand(t)),\n      provider.getCommand(result)\n    ]);\n    const defaultCase: LiveCommand = provider.getCommand(expr.defaultCase);\n    const isEqual = provider.getOperation(expr.op);\n    const noScope = {};\n    \n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      const value = valueCommand(context);\n\n      if (provider.returnProperty in context) return;\n\n      for (const [tests, result] of cases)\n      {\n        let matches = false;\n\n        for (const test of tests) \n        { \n          if (isEqual({ value: () => value, test }, noScope)(context)) \n          {\n            matches = true;\n            break;\n          }\n\n          if (provider.returnProperty in context) return;\n        }\n\n        if (matches) \n        {\n          return result(context);\n        }\n      }\n\n      return defaultCase(context);\n    };\n  });\n\n  run.setExpression(NotExpression, (expr, provider) => \n  {\n    const expression: LiveCommand = provider.getCommand(expr.expression);\n\n    return (context) => !expression(context);\n  });\n\n  run.setExpression(AndExpression, (expr, provider) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n    const defaultResult: boolean = expressions.length > 0;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const and of expressions)\n      {\n        if (!and(context) || provider.returnProperty in context)\n        {\n          return false;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(OrExpression, (expr, provider) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n    const defaultResult: boolean = expressions.length === 0;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      for (const or of expressions)\n      {\n        const pass = or(context);\n\n        if (pass || provider.returnProperty in context)\n        {\n          return pass;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(ForExpression, (expr, provider) => \n  {\n    const variable: string = expr.variable;\n    const start: LiveCommand = provider.getCommand(expr.start);\n    const end: LiveCommand = provider.getCommand(expr.end);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [variable, breakVariable], () => \n      {\n        context[breakVariable] = false;\n\n        let i = start(context);\n        let iterations = 0;\n        let stop = end(context);\n        let last;\n        const dir = i < stop ? 1 : -1;\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n\n        while ((dir === 1 ? i <= stop : i >= stop) && iterations++ < max) \n        {\n          context[variable] = i;\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n\n          i += dir;\n          stop = end(context);\n\n          if (provider.returnProperty in context) return;\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(WhileExpression, (expr, provider) => \n  {\n    const condition: LiveCommand = provider.getCommand(expr.condition);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        while (condition(context) && iterations++ < max)\n        {\n          if (provider.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DoExpression, (expr, provider) => \n  {\n    const condition: LiveCommand = provider.getCommand(expr.condition);\n    const body: LiveCommand = provider.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        do\n        {\n          if (provider.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || provider.returnProperty in context) \n          {\n            break;\n          }\n\n        } while(condition(context) && iterations++ < max);\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DefineExpression, (expr, provider) => \n  {\n    const define: [string, LiveCommand][] = expr.define.map(([name, e]) => [name, provider.getCommand(e)]);\n    const vars: string[] = define.map(([name]) => name);\n    const body: LiveCommand = provider.getCommand(expr.body);\n\n    return (context) =>\n    {\n      if (provider.returnProperty in context) return;\n\n      return preserveScope(context, vars, () =>\n      {\n        for (const [name, defined] of define)\n        {\n          if (provider.returnProperty in context)\n          {\n            return;\n          }\n\n          context[name] = defined(context);\n        }\n\n        if (provider.returnProperty in context)\n        {\n          return;\n        }\n\n        return body(context);\n      });\n    };\n  });\n\n  run.setExpression(TemplateExpression, (expr, provider) => \n  {\n    const SECTION_TYPES = 2;\n    const SECTION_INDEX_CONSTANT = 0;\n\n    const params: LiveCommandMap = objectMap(expr.params, e => provider.getCommand(e));\n    const template: string = expr.template;\n\n    const sections = template.split(/[\\{\\}]/).map((section, index) => {\n      return index % SECTION_TYPES === SECTION_INDEX_CONSTANT\n        ? (_source: any) => section\n        : (source: any) => source && section in source ? source[section] : '';\n    });\n\n    return (context) =>\n    {\n      const source = objectMap(params, p => p(context));\n\n      return sections.reduce((out, section) => out + section(source), '');\n    };\n  });\n\n  run.setExpression(InvokeExpression, (expr, provider) =>\n  {\n    const func = provider.getFunction(expr.name);\n    const command = provider.getCommand(func.options.expression);\n    const args = objectMap(expr.args, a => provider.getCommand(a));\n\n    return (context) => \n    {\n      if (provider.returnProperty in context) return;\n\n      const params = objectMap(args, a => a(context));\n\n      command(params);\n\n      return params[provider.returnProperty];\n    };\n  });\n\n  run.setExpression(ReturnExpression, (expr, provider) =>\n  {\n    const returnValue = provider.getCommand(expr.value);\n\n    return (context) => context[provider.returnProperty] = returnValue(context);\n  });\n\n  run.setExpression(TupleExpression, (expr, provider) =>\n  {\n    const elements: LiveCommand[] = expr.expressions.map(e => provider.getCommand(e));\n\n    return (context) => elements.map(cmd => cmd(context));\n  });\n\n  run.setExpression(ObjectExpression, (expr, provider) =>\n  {\n    const props: LiveCommandMap = objectMap(expr.props, e => provider.getCommand(e));\n\n    return (context) => objectMap(props, cmd => cmd(context));\n  });\n\n  run.setExpression(NoExpression, () => () => undefined);\n\n}","import { Runtime, AnyOps, parse, compare, copy, toString, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _asList, _asTuple, _asMap, _asObject, restoreScope, saveScope } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = AnyOps;\n\n  // Operations\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.isDefined, (params) => (context) => {\n    const value = params.value(context);\n    \n    return value !== null && value !== undefined;\n  });\n\n  run.setOperation(ops.getDefined, (params, scope) => (context) => {\n    const value = params.value(context);\n    const isDefined = value !== null && value !== undefined;\n  \n    if (isDefined) {\n      const saved = saveScope(context, scope);\n      context[scope.defined] = value;\n      params.defined(context);\n      restoreScope(context, saved);\n    }\n\n    return isDefined;\n  });\n\n  run.setOperation(ops.coalesce, (params) => (context) => {\n    const a = params.a(context);\n    if (a !== null && a !== undefined) return a;\n    const b = params.b(context);\n    if (b !== null && b !== undefined) return b;\n    const c = params.c(context);\n    if (c !== null && c !== undefined) return c;\n    const d = params.d(context);\n    if (d !== null && d !== undefined) return d;\n    const e = params.e(context);\n    if (e !== null && e !== undefined) return e;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    true\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    toString(params.value(context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n};","\nimport { Runtime, BooleanOps, isBoolean, COMPONENT_MAX } from 'expangine-runtime';\nimport { _bool, _asList, _asObject, _asTuple, _asMap, _boolMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = BooleanOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    false\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _boolMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.and, (params) => (context) => \n    _bool(params.a, context) && _bool(params.b, context)\n  );\n\n  run.setOperation(ops.or, (params) => (context) => \n    _bool(params.a, context) || _bool(params.b, context)\n  );\n\n  run.setOperation(ops.xor, (params) => (context) => \n    _bool(params.a, context) !== _bool(params.b, context)\n  );\n\n  run.setOperation(ops.not, (params) => (context) => \n    !_bool(params.a, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    (_bool(params.value, context) ? 1 : 0) - (_bool(params.test, context) ? 1 : 0)\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isBoolean(params.value(context))\n  );\n\n  run.setOperation(ops.isTrue, (params) => (context) => \n    _bool(params.value, context, false)\n  );\n\n  run.setOperation(ops.isFalse, (params) => (context) => \n    !_bool(params.value, context, false)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = params.value(context);\n\n    return value ? 1 : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) ? 'true' : 'false'\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ColorOps, COMPONENT_MAX, Color, clampComponent, ColorType, ColorSpaceHSL, ColorNames, isColor, ColorSpaceRGB } from 'expangine-runtime';\nimport { _color, _colorMaybe, _number, saveScope, restoreScope, _colorOrNumber, _bool, _text, _object, _asList, _asMap, _asTuple } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: no-bitwise\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ColorOps;\n\n  // Static \n\n  run.setOperation(ops.create, () => () =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _colorMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0)\n  );\n\n  run.setOperation(ops.copy, (params) => (context) => \n    ({ ..._color(params.value, context) })\n  );\n\n  run.setOperation(ops.build, (params) => (context) => ({\n    r: _number(params.r, context, COMPONENT_MAX),\n    g: _number(params.g, context, COMPONENT_MAX),\n    b: _number(params.b, context, COMPONENT_MAX),\n    a: _number(params.a, context, COMPONENT_MAX),\n  }));\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.op, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.test] = test.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.test] = test.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.test] = test.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.test] = test.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.clamp, (params) => (context) => {\n    const value = _color(params.value, context);\n    \n    return {\n      r: clampComponent(value.r),\n      g: clampComponent(value.g),\n      b: clampComponent(value.b),\n      a: clampComponent(value.a),\n    };\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r,\n      g: value.g + addend.g,\n      b: value.b + addend.b,\n      a: alpha ? value.a + addend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.adds, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const scale = _colorOrNumber(params.addendScale, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r * scale.r,\n      g: value.g + addend.g * scale.g,\n      b: value.b + addend.b * scale.b,\n      a: alpha ? value.a + addend.a * scale.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _color(params.value, context);\n    const subtrahend = _colorOrNumber(params.subtrahend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r - subtrahend.r,\n      g: value.g - subtrahend.g,\n      b: value.b - subtrahend.b,\n      a: alpha ? value.a - subtrahend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.mul, (params) => (context) => {\n    const value = _color(params.value, context);\n    const multiplier = _colorOrNumber(params.multiplier, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r * multiplier.r,\n      g: value.g * multiplier.g,\n      b: value.b * multiplier.b,\n      a: alpha ? value.a * multiplier.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.div, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: divSafe(value.r, divisor.r),\n      g: divSafe(value.g, divisor.g),\n      b: divSafe(value.b, divisor.b),\n      a: alpha ? divSafe(value.a, divisor.a) : value.a,\n    };\n  });\n\n  run.setOperation(ops.mod, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r % divisor.r,\n      g: value.g % divisor.g,\n      b: value.b % divisor.b,\n      a: alpha ? value.a % divisor.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.format, (params) => (context) => {\n    const value = _color(params.value, context);\n    const formatId = _text(params.format, context);\n    const format = ColorType.getFormat(formatId);\n\n    if (!format) {\n      return '';\n    }\n\n    return format.formatter(value);\n  });\n\n  run.setOperation(ops.parse, (params) => (context) => {\n    const value = params.value(context);\n    \n    return ColorType.baseType.normalize(value);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _color(params.start, context);\n    const end = _color(params.end, context);\n    const delta = _number(params.delta, context, 0);\n\n    return {\n      r: (end.r - start.r) * delta + start.r,\n      g: (end.g - start.g) * delta + start.g,\n      b: (end.b - start.b) * delta + start.b,\n      a: (end.a - start.a) * delta + start.a,\n    };\n  });\n\n  run.setOperation(ops.lighten, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = _number(params.amount, context, 0);\n\n    return {\n      r: value.r + (COMPONENT_MAX - value.r) * amount,\n      g: value.g + (COMPONENT_MAX - value.g) * amount,\n      b: value.b + (COMPONENT_MAX - value.b) * amount,\n      a: value.a + (COMPONENT_MAX - value.a) * amount,\n    };\n  });\n\n  run.setOperation(ops.darken, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = 1 - _number(params.amount, context, 0);\n\n    return {\n      r: value.r * amount,\n      g: value.g * amount,\n      b: value.b * amount,\n      a: value.a * amount,\n    };\n  });\n\n  run.setOperation(ops.toHSL, (params) => (context) =>\n    ColorSpaceHSL.fromColor(_color(params.value, context))\n  );\n\n  run.setOperation(ops.fromHSL, (params) => (context) =>\n    ColorSpaceHSL.toColor(_object(params.value, context))\n  );\n\n  run.setOperation(ops.luminance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const L = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722;\n\n    return L / COMPONENT_MAX;\n  });\n\n  run.setOperation(ops.contrast, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const valueL = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722; \n    const testL = test.r * 0.2126 + test.g * 0.7152 + test.b * 0.0722;\n    const L1 = Math.max(valueL, testL);\n    const L2 = Math.min(valueL, testL);\n\n    return (L1 + 0.05) / (L2 + 0.05);\n  });\n\n  run.setOperation(ops.invert, (params) => (context) => {\n    const value = _color(params.value, context);\n    const alpha = _bool(params.alpha, context, false);\n\n    return {\n      r: COMPONENT_MAX - value.r,\n      g: COMPONENT_MAX - value.g,\n      b: COMPONENT_MAX - value.b,\n      a: alpha ? COMPONENT_MAX - value.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.opaque, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = COMPONENT_MAX;\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.alpha, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = _number(params.alpha, context, COMPONENT_MAX);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.distance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    \n    return dist(value, test);\n  });\n\n  run.setOperation(ops.named, (params) => (context) => {\n    const value = _color(params.name, context);\n\n    return {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    };\n  });\n\n  run.setOperation(ops.getName, (params) => (context) => {\n    const value = _color(params.value, context);\n    let closestName: string = '';\n    let closestDistance: number = -1;\n\n    for (const [name, named] of ColorNames.options.constants.entries()) {\n      const distance = dist(value, named);\n      if (closestDistance === -1 || distance < closestDistance) {\n        closestName = name;\n        closestDistance = distance;\n      }\n    }\n\n    return closestName;\n  });\n\n  run.setOperation(ops.blend, (params) => (context) => {\n    const top = _color(params.top, context);\n    const bottom = _color(params.bottom, context);\n    const modeName = params.mode(context);\n    const blender = BlendFunctions[modeName];\n\n    if (!blender) {\n      return top;\n    }\n\n    return {\n      r: blender(bottom.r, top.r),\n      g: blender(bottom.g, top.g),\n      b: blender(bottom.b, top.b),\n      a: top.a,\n    };\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isColor(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, () => () =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asDate, () => () =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = _color(params.value, context);\n\n    return (value.r & 0xFF) | \n      ((value.g & 0xFF) << 8) |\n      ((value.b & 0xFF) << 16) |\n      ((value.a & 0xFF) << 24);\n  })\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    ColorSpaceRGB.formatMap.bestfit.formatter(_color(params.value, context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compareColor(x: Color, y: Color, epsilon: number): number\n{\n  const r = Math.abs(x.r - y.r) <= epsilon;\n  const g = Math.abs(x.g - y.g) <= epsilon;\n  const b = Math.abs(x.b - y.b) <= epsilon;\n  const a = Math.abs(x.a - y.a) <= epsilon;\n\n  return r && g && b && a\n    ? 0\n    : (x.r + x.g + x.b + x.a) - (y.r + y.g + y.b + y.a);\n}\n\nfunction divSafe(a: number, b: number): number\n{\n  return b === 0 ? 0 : a / b;\n}\n\nfunction dist(a: Color, b: Color): number\n{\n  return Math.abs(a.r - b.r) + \n    Math.abs(a.g - b.g) + \n    Math.abs(a.b - b.b) + \n    Math.abs(a.a - b.a);\n}\n\nfunction mul(a: number, b: number): number\n{\n  return (a * b + COMPONENT_MAX) >> 8;\n}\n\nfunction div(a: number, b: number): number\n{\n  return b === 0 ? 0 : ((a << 8) - a) / b;\n}\n\nfunction inv(a: number): number\n{\n  return COMPONENT_MAX - a;\n}\n\nconst BlendFunctions: Record<string, (a: number, b: number) => number> = {\n  multiply:   (a, b) => mul(a, b),\n  screen:     (a, b) => inv(mul(inv(a), inv(b))),\n  overlay:    (a, b) => a < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  hard:       (a, b) => b < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  soft:       (a, b) => mul(inv(2 * b), mul(a, a)) + 2 * mul(b, a),\n  dodge:      (a, b) => div(a, inv(b)),\n  burn:       (a, b) => div(inv(b), a),\n  divide:     (a, b) => a === b ? COMPONENT_MAX : div(a, b),\n  addition:   (a, b) => clampComponent(a + b),\n  sub:        (a, b) => clampComponent(a - b),\n  diff:       (a, b) => clampComponent(b - a),\n  darken:     (a, b) => Math.min(a, b),\n  lighten:    (a, b) => Math.max(a, b),\n};","\nimport { Runtime, DateOps, DateType, currentLocale, compareDates, startOf, mutate, add, getters, setters, endOf, getDaysInMonth, getDaysInYear, getWeeksInYear, diff, adjusters, getDateOffset, isDaylightSavingTime, isLeapYear, Unit, parse, DateFormat, isDate, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _date, _text, _bool, _asList, _asMap, _asObject, _asTuple, _dateMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = DateOps;\n\n  const MILLIS_IN_SECONDS = 1000;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.now, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.today, (params) => (context) =>\n    startOf.day(new Date())\n  );\n\n  run.setOperation(ops.tomorrow, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, +1))\n  );\n\n  run.setOperation(ops.yesterday, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, -1))\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _dateMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.parse, (params) => (context) => \n    _bool(params.parseAsUTC, context, false)\n      ? new DateType({ parseAsUTC: true }).normalize(params.value(context))\n      : DateType.baseType.normalize(params.value(context))\n  );\n\n  run.setOperation(ops.fromText, (params) => (context) => \n    DateType.baseType.normalize(_text(params.value, context))\n  );\n\n  run.setOperation(ops.fromTimestamp, (params) => (context) => \n    new Date(_number(params.value, context, Date.now()))\n  );\n\n  run.setOperation(ops.fromTimestampSeconds, (params) => (context) => \n    new Date(_number(params.value, context, Date.now() / MILLIS_IN_SECONDS) * MILLIS_IN_SECONDS)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() < test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.max, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() > test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.get, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    \n    return prop in getters ? getters[prop](value) : -1;\n  });\n\n  run.setOperation(ops.set, (params) => (context) => {\n    let value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    const update = _number(params.set, context, 0);\n\n    if (prop in setters) {\n      value = new Date(value.getTime());\n      setters[prop](value, update);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    let value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 1);\n\n    if (unit in add) {\n      value = new Date(value.getTime());\n      add[unit](value, amount);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    let value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 1);\n\n    if (unit in add) {\n      value = new Date(value.getTime());\n      add[unit](value, -amount);\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in startOf ? mutate(value, startOf[unit]) : value;\n  });\n\n  run.setOperation(ops.endOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in endOf ? mutate(value, endOf[unit]) : value;\n  });\n\n  run.setOperation(ops.daysInMonth, (params) => (context) => \n    getDaysInMonth(_date(params.value, context))\n  );\n\n  run.setOperation(ops.daysInYear, (params) => (context) => \n    getDaysInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.weeksInYear, (params) => (context) => \n    getWeeksInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    new Date(_date(params.value, context).getTime())\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n\n    return unit in startOf ? compareDates(value, test, unit) : 0;\n  });\n\n  run.setOperation(ops.diff, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis');\n    const absolute = _bool(params.absolute, context, true);\n    const adjust = _text(params.adjust, context, 'down');\n\n    if (!(unit in diff) || !(adjust in adjusters))\n    {\n      return Number.NaN;\n    }\n\n    const amount = adjusters[adjust]( diff[unit](value, test) );\n\n    return absolute ? Math.abs(amount) : amount;\n  });\n\n  run.setOperation(ops.timezoneOffset, (params) => (context) => \n    getDateOffset(_date(params.value, context))\n  );\n\n  run.setOperation(ops.toText, (params) => (context) =>\n    DateFormat.format(_text(params.format, context), [_date(params.value, context), currentLocale])\n  );\n\n  run.setOperation(ops.toISOText, (params) => (context) => \n    _date(params.value, context).toISOString()\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isDate(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) === 0\n  );\n\n  run.setOperation(ops.isBefore, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isBeforeOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isAfter, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isAfterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _date(params.value, context);\n    const start = _date(params.start, context);\n    const end = _date(params.end, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    const startInclusive = _bool(params.startInclusive, context, true);\n    const endInclusive = _bool(params.endInclusive, context, false);\n\n    const startCompare = compareDates(value, start, unit);\n    const endCompare = compareDates(value, end, unit);\n    \n    const startOffset = startInclusive ? 0 : 1;\n    const endOffset = endInclusive ? 0 : -1;\n\n    return startCompare >= startOffset && endCompare <= endOffset;\n  });\n\n  run.setOperation(ops.isStartOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in startOf\n      ? mutate(value, startOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isEndOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in endOf\n      ? mutate(value, endOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isDST, (params) => (context) => \n    isDaylightSavingTime(_date(params.value, context))\n  );\n\n  run.setOperation(ops.isLeapYear, (params) => (context) => \n    isLeapYear(_date(params.value, context))\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    _date(params.value, context).getTime()\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ListOps, getCompare, isBoolean, isEmpty, isDate, isNumber, isString, isArray, COMPONENT_MAX, isColor } from 'expangine-runtime';\nimport { _list, _optional, _number, saveScope, restoreScope, _text, _bool, _asTuple, _asObject, _numberMaybe, _listMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ListOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) => \n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.build, (params, scope) => (context) => {\n    const n = _number(params.count, context);\n    const list: any[] = [];\n\n    if (n <= 0) \n    {\n      return list;\n    }\n\n    const saved = saveScope(context, scope);\n\n    if (_bool(params.sameItem, context, false)) \n    {\n      context[scope.index] = 0;\n      context[scope.last] = undefined;\n      context[scope.list] = list;\n      context[scope.count] = n;\n\n      const item = params.item(context);\n\n      for (let i = 0; i < n; i++) \n      {\n        list[i] = item;\n      }\n    } \n    else \n    {\n      let last;\n\n      for (let i = 0; i < n; i++) \n      {\n        context[scope.index] = i;\n        context[scope.last] = last;\n        context[scope.list] = list;\n        context[scope.count] = n;\n\n        const item = params.item(context);\n\n        last = item;\n        list.push(item);\n      }\n    }\n\n    restoreScope(context, saved);\n\n    return list;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.list, context)[_number(params.index, context)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context);\n    const prev = list[index];\n    list[index] = params.value(context);\n\n    return prev;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addFirst, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.unshift(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addLast, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.insert, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    const index = _number(params.index, context, 0);\n    if (item !== undefined) {\n      list.splice(index, 0, item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.remove, (params, scope) => (context) => \n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n, \n      (_, i, list) => (list.splice(i, 1), i), \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.removeFirst, (params, scope) => (context) => \n    _list(params.list, context).shift()\n  );\n\n  run.setOperation(ops.removeLast, (params, scope) => (context) => \n    _list(params.list, context).pop()\n  );\n\n  run.setOperation(ops.removeAt, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context, -1);\n    let item;\n    if (index >= 0 && index < list.length) {\n      item = list[index];\n      list.splice(index, 1);\n    }\n\n    return item;\n  });\n\n  run.setOperation(ops.removeWhere, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => n - 1, \n      n => -1,\n      [],\n      (item, index, list, removed) => {\n        if (params.where(context)) {\n          removed.push(item);\n          list.splice(index, 1);\n        }\n        \n        return removed;\n      }\n    )\n  );\n\n  run.setOperation(ops.contains, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n,\n      () => true, \n      () => false\n    )\n  );\n\n  run.setOperation(ops.find, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return undefined;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      undefined,\n      (item, index) => {\n        if (params.where(context)) {\n          return item;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.copy, (params, scope) => (context) => \n    params.deepCopy\n      ? handleList(\n          _list(params.list, context), \n          context, \n          scope, \n          list => list.map(item => {\n            context[scope.copy] = item;\n            \n            return params.deepCopy(context);\n          })\n        )\n      : _list(params.list, context).slice()\n  );\n\n  run.setOperation(ops.reverse, (params) => (context) => {\n    const list = _list(params.list, context);\n    const half = Math.floor(list.length / 2); \n    \n    for (let i = 0, j = list.length - 1; i < half; i++, j--) { \n      swap(list, i, j);\n    }\n    \n    return list;\n  });\n\n  run.setOperation(ops.exclude, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const exclude = _list(params.exclude, context);\n\n    for (const item of exclude) \n    {\n      handleListIsEqual(list, context, params, scope, item, n => 0, n => n, (_, k) => (list.splice(k, 1), true), () => false);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.overlap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const overlap = _list(params.overlap, context);\n    const overlapping: any[] = [];\n\n    for (const item of overlap) \n    {\n      if (handleListIsEqual(list, context, params, scope, item, n => 0, n => n, () => true, () => false))\n      {\n        overlapping.push(item)\n      }\n    }\n\n    return overlapping;\n  });\n\n  run.setOperation(ops.sort, (params, scope) => (context) =>\n    handleList(\n      _list(params.list, context), \n      context, \n      scope, \n      list => {\n        list.sort((value, test) => {\n          context[scope.list] = list;\n          context[scope.value] = value;\n          context[scope.test] = test;\n\n          return _number(params.compare, context, 0);\n        });\n\n        return list;\n      }\n    )\n  );\n\n  run.setOperation(ops.shuffle, (params) => (context) => {\n    const list = _list(params.list, context);\n    let times = _number(params.times, context, 1);\n    const n = list.length;\n\n    while (--times >= 0) {\n      for (let i = 0; i < n; i++) {\n        swap(list, i, Math.floor(Math.random() * n));\n      }\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.unique, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const skip = {};\n    const unique = [];\n\n    for (let i = 0; i < list.length - 1; i++) {\n      if (skip[i]) {\n        continue;\n      }\n\n      const item = list[i];\n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (!exists) {\n        unique.push(item);\n      }\n    }\n\n    return unique;\n  });\n\n  run.setOperation(ops.duplicates, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const once = _bool(params.once, context, false);\n    const skip = {};\n    const duplicates = [];\n\n    for (let i = 0; i < list.length; i++) {\n\n      const item = list[i];\n\n      if (skip[i]) {\n        if (once) {\n          continue;\n        } else {\n          duplicates.push(item);\n        }\n      }\n      \n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (exists) {\n        duplicates.push(item);\n      }\n    }\n\n    return duplicates;\n  });\n\n  run.setOperation(ops.take, (params) => (context) => \n    _list(params.list, context).slice(0, _number(params.count, context))\n  );\n\n  run.setOperation(ops.skip, (params) => (context) => \n    _list(params.list, context).slice(_number(params.count, context))\n  );\n\n  run.setOperation(ops.drop, (params) => (context) => {\n    const list = _list(params.list, context);\n    const count = _number(params.count, context);\n\n    return list.slice(0, list.length - count);\n  });\n\n  run.setOperation(ops.append, (params) => (context) => {\n    const list = _list(params.list, context);\n    const append = _list(params.append, context);\n\n    return list.concat(append);\n  });\n\n  run.setOperation(ops.prepend, (params) => (context) => {\n    const list = _list(params.list, context);\n    const prepend = _list(params.prepend, context);\n\n    return prepend.concat(list);\n  });\n\n  run.setOperation(ops.indexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n, _number(params.start, context, 0))), \n      n => n, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.lastIndexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context),\n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n - 1, _number(params.start, context, n - 1))), \n      n => -1, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.findIndex, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return -1;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      -1,\n      (item, index) => {\n        if (params.where(context)) {\n          return index;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.last, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[list.length - 1];\n  });\n\n  run.setOperation(ops.first, (params) => (context) => \n    _list(params.list, context)[0]\n  );\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _list(params.list, context).length\n  );\n\n  run.setOperation(ops.randomList, (params) => (context) => {\n    const list = _list(params.list, context);\n    const n = list.length;\n    const count = Math.min(_number(params.count, context, 0), n);\n\n    if (count === n)\n    {\n      return list.slice();\n    }\n\n    const taken = {};\n    const random = [];\n\n    while (random.length < count)\n    {\n      const i = Math.floor(Math.random() * n);\n\n      if (!taken[i])\n      {\n        random.push(list[i]);\n        taken[i] = true;\n      }\n    }\n\n    return random;\n  });\n\n  run.setOperation(ops.random, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[Math.floor(Math.random() * list.length)];\n  });\n\n  // Iteration\n\n  run.setOperation(ops.join, (params, scope) => (context) =>\n    _text(params.prefix, context) + \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n,\n      '',\n      (item, index, list, sum) => (\n        sum\n          ? sum \n            + _text(params.delimiter, context, ', ') \n            + _text(params.toText, context, item)\n          : sum\n            + _text(params.toText, context, item)\n      )\n    ) +\n    _text(params.suffix, context)\n  );\n\n  run.setOperation(ops.each, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const reverse = _bool(params.reverse, context, false);\n\n    handleListIteration(list, context, scope, \n      n => reverse ? n - 1 : 0, \n      n => reverse ? 0 - 1 : n, \n      undefined,\n      () => params.each(context)\n    );\n\n    return list;\n  });\n\n  run.setOperation(ops.filter, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context),\n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (params.filter(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.not, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (!params.not(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.map, (params, scope) => (context) => \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, mapped) => {\n        mapped.push(params.transform(context));\n        \n        return mapped;\n      }\n    )\n  );\n\n  run.setOperation(ops.split, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      { pass: [], fail: [] },\n      (item, index, list, result) => {\n        if (params.pass(context)) {\n          result.pass.push(item);\n        } else {\n          result.fail.push(item);\n        }\n\n        return result;\n      }\n    )\n  );\n\n  run.setOperation(ops.reduce, (params, scope) => (context) =>\n    handleListIteration(_list(params.list, context), context, scope, \n      n => 0, \n      n => n, \n      params.initial(context),\n      (item, index, list, reduced) => {\n        context[scope.reduced] = reduced;\n\n        return params.reduce(context);\n      }\n    )\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context) => {\n    const list = _list(params.value, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return list.length - test.length;\n    }\n\n    let less = 0, more = 0;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n    });\n\n    return getCompare(less, more);\n  });\n\n  run.setOperation(ops.group, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      type Grouping = { by: any, group: any[] };\n\n      const map = new Map<any, Grouping>();\n      const groups: Grouping[] = [];\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const by = params.by(context);\n        const grouping = map.get(by);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (grouping) {\n          grouping.group.push(keyValue);\n        } else {\n          const newGrouping: Grouping = {\n            by, group: [ keyValue ],\n          };\n          groups.push(newGrouping);\n          map.set(by, newGrouping);\n        }\n      }\n\n      return groups;\n    });\n  });\n\n  run.setOperation(ops.toListMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map<any, any[]>();\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const keyList = map.get(key);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (keyList) {\n          keyList.push(keyValue);\n        } else {\n          map.set(key, [\n            keyValue\n          ]);\n        }\n      }\n\n      return map;\n    });\n  });\n\n  run.setOperation(ops.toMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map();\n\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = item;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const value = _optional(params.getValue, context, item);\n\n        map.set(key, value);\n      }\n\n      return map;\n    });\n  });\n\n  // Aggregates\n\n  run.setOperation(ops.min, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.min(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.max, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.max(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.sum, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : value + agg;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.avg, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0 },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg.count === 0 ? null : agg.sum / agg.count,\n    )\n  );\n\n  run.setOperation(ops.std, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / agg.count;\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.variance, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         if (agg.count === 1) {\n           return 0;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / (agg.count - 1);\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.median, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => agg.values.length === 0\n        ? null\n        : agg.values.length % 2 === 1\n          ? agg.values[Math.floor(agg.values.length / 2)]\n          : (\n              agg.values[Math.floor(agg.values.length / 2) - 1] +\n              agg.values[Math.floor(agg.values.length / 2)]\n          ) / 2,\n    )\n  );\n\n  run.setOperation(ops.bitand, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0xffffffff,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg & value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg | value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitxor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg ^ value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length > 0\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return false;\n    }\n\n    let equal = true;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        if (!params.isEqual(context)) {\n          equal = false;\n          break;\n        }\n      }\n    });\n\n    return equal;\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => !isEmpty(v))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _list(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => {\n    const value = _list(params.value, context);\n\n    return new Map(value.map((v, i) => [i.toString(), v]));\n  });\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.length)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, () => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}\n\nfunction swap(arr: any[], i: number, k: number)\n{\n  const temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\n\nfunction handleList<R>(list: any[], context: object, scope: Record<string, string>, handle: (list: any[]) => R): R\n{\n  const saved = saveScope(context, scope);\n\n  const result = handle(list);\n\n  restoreScope(context, saved);\n\n  return result;\n}\n\nfunction handleAggregate<A>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  initialAggregate: A,\n  aggregate: (current: any, index: number, list: any[], aggregate: A) => A,\n  getAggregate: (aggregate: A) => number | null,\n): number | null {\n  return handleList(list, context, scope, () =>\n  {\n    let agg: A | null = initialAggregate;\n\n    for (let i = 0; i < list.length; i++)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      agg = aggregate(item, i, list, agg);\n    }\n\n    return getAggregate(agg);\n  });\n}\n\nfunction handleListIteration<R>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  start: (n: number) => number,\n  end: (n: number) => number,\n  initialResult: R,\n  onItem: (current: any, index: number, list: any[], lastResult: R) => R,\n  earlyExit: boolean = false\n): R \n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n    let result = initialResult;\n\n    while (i !== e)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      const newResult = onItem(item, i, list, result);\n\n      if (earlyExit)\n      {\n        if (newResult !== undefined)\n        {\n          return newResult;\n        }\n      }\n      else\n      {\n        result = newResult;\n      }\n\n      if (list[i] === item || i !== 1)\n      {\n        i += d;\n      }\n    }\n\n    return result;\n  });\n}\n\nfunction handleListIsEqual<R>(\n  list: any[],\n  context: object, \n  params: Record<'list' | 'isEqual', LiveCommand>, \n  scope: Record<'list' | 'value' | 'test', string>, \n  value: any, \n  start: (n: number) => number,\n  end: (n: number) => number,\n  handleMatch: (current: any, index: number, list: any[]) => R | undefined,\n  getDefaultResult: (list: any[]) => R\n): R\n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n\n    while (i !== e)\n    {\n      const test = list[i];\n      const next = list[i + d];\n\n      context[scope.list] = list;\n      context[scope.value] = value;\n      context[scope.test] = test;\n\n      if (params.isEqual(context)) \n      {\n        const matchResult = handleMatch(test, i, list);\n\n        if (matchResult !== undefined)\n        {\n          return matchResult;\n        }\n        else if (list[i] === next)\n        {\n          i -= d;\n        }\n      }\n\n      i += d;\n    }\n\n    return getDefaultResult(list);\n  });\n}","import { Runtime, MapOps, toArray, getCompare, isMap, isBoolean, isDate, isNumber, isObject, isString, isArray, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { saveScope, restoreScope, _map, _optional, _number, _mapMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = MapOps;\n    \n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Map()\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _mapMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) => \n    _map(params.map, context).get(params.key(context))\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const key = params.key(context);\n    const existing = map.get(key);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = existing;\n\n    const value = params.value(context);\n\n    map.set(key, value);\n\n    restoreScope(context, saved);\n\n    return existing;\n  });\n\n  run.setOperation(ops.has, (params) => (context) =>\n    _map(params.map, context).has(params.key(context))\n  );\n\n  run.setOperation(ops.delete, (params) => (context) =>\n    _map(params.map, context).delete(params.key(context))\n  );\n\n  run.setOperation(ops.keys, (params) => (context) =>\n    toArray(_map(params.map, context).keys())\n  );\n\n  run.setOperation(ops.values, (params) => (context) =>\n    toArray(_map(params.map, context).values())\n  );\n\n  run.setOperation(ops.entries, (params) => (context) => {\n    const map = _map(params.map, context);\n    const entries: { keys: any[], values: any[] } = { keys: [], values: [] };\n\n    for (const [key, value] of map.entries()) {\n      entries.keys.push(key);\n      entries.values.push(value);\n    }\n\n    return entries;\n  });\n\n  run.setOperation(ops.pairs, (params) => (context) => {\n    const map = _map(params.map, context);\n    const pairs: Array<{ key: any, value: any }> = [];\n\n    for (const [key, value] of map.entries()) {\n      pairs.push({ key, value });\n    }\n\n    return pairs;\n  });\n\n  run.setOperation(ops.clear, (params) => (context) => {\n    const map = _map(params.map, context);\n    map.clear();\n\n    return map;\n  });\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _map(params.map, context).size\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    return handleMap(map, context, scope, () => {\n      let less = 0, more = 0;\n\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          more++;\n          continue;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n\n      for (const key of test.keys()) {\n        if (!map.has(key)) {\n          less++;\n        }\n      }\n\n      return getCompare(less, more);\n    });\n  }));\n\n  run.setOperation(ops.copy, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.deepCopy && !params.deepCopyKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesCopy: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesCopy.push([\n          _optional(params.deepCopyKey, context, key),\n          _optional(params.deepCopy, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesCopy);\n  });\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.transform && !params.transformKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesTransformed: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesTransformed.push([\n          _optional(params.transformKey, context, key),\n          _optional(params.transform, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesTransformed);\n  });\n\n  run.setOperation(ops.toPlainObject, (params) => (context) => {\n    const map = _map(params.map, context);\n    const plain = Object.create(null);\n\n    for (const [key, value] of map.entries()) {\n      plain[key] = value;\n    }\n\n    return plain;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isMap(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    if (map.size !== test.size) {\n      return false;\n    }\n\n    return handleMap(map, context, scope, () => {\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          return false;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        if (!params.isEqual(context)) { \n          return false;\n        }\n      }\n\n      return true;\n    });\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.size > 0)\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => new Date())\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    toArray(_map(params.value, context).values())\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.size)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => [v])\n  );\n\n}\n\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isMap(val) && isType(val.get('value'))\n    ? val.get('value')\n    : otherwise(val);\n}\n\nfunction handleMap<R>(map: Map<any, any>, context: LiveContext, scope: Record<string, string>, handle: (map: Map<any, any>) => R): R\n{\n  const saved = saveScope(context, scope);\n  \n  const result = handle(map);\n\n  restoreScope(context, saved);\n\n  return result;\n}","import { Runtime, NumberOps, parse, isNumber, isUndefined, isString, isWhole } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _textMaybe, _asTuple, _asObject, _asMap, _asList } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nconst DEFAULT_BASE = 10;\n\nexport default function(run: Runtime<LiveContext, LiveResult>, epsilon: number = 0.000001)\n{\n  const ops = NumberOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    0\n  );\n\n  run.setOperation(ops.pi, (params) => (context) =>\n    Math.PI\n  );\n\n  run.setOperation(ops.pi2, (params) => (context) =>\n    Math.PI + Math.PI\n  );\n\n  run.setOperation(ops.piHalf, (params) => (context) =>\n    // tslint:disable-next-line: no-magic-numbers\n    Math.PI * 0.5\n  );\n\n  run.setOperation(ops.e, (params) => (context) =>\n    Math.E\n  );\n\n  run.setOperation(ops.sqrt2, (params) => (context) =>\n    Math.SQRT2\n  );\n\n  run.setOperation(ops.sqrt12, (params) => (context) =>\n    Math.SQRT1_2\n  );\n\n  run.setOperation(ops.ln2, (params) => (context) =>\n    Math.LN2\n  );\n\n  run.setOperation(ops.ln10, (params) => (context) =>\n    Math.LN10\n  );\n\n  run.setOperation(ops.log2e, (params) => (context) =>\n    Math.LOG2E\n  );\n\n  run.setOperation(ops.log10e, (params) => (context) =>\n    Math.LOG10E\n  );\n\n  // Binary Operations\n\n  run.setOperation(ops.add, (params) => (context) => \n    _number(params.value, context) + _number(params.addend, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _number(params.value, context) - _number(params.subtrahend, context)\n  );\n\n  run.setOperation(ops.mul, (params) => (context) => \n    _number(params.value, context) * _number(params.multiplier, context)\n  );\n\n  run.setOperation(ops.div, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.mod, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => \n    Math.min(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.max, (params) => (context) => \n    Math.max(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.pow, (params) => (context) => \n    Math.pow(_number(params.value, context), _number(params.exponent, context))\n  );\n\n  run.setOperation(ops.atan2, (params) => (context) => \n    Math.atan2(_number(params.y, context), _number(params.x, context))\n  );\n\n  run.setOperation(ops.hypot, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n\n    return Math.sqrt(a * a + b * b);\n  });\n\n  run.setOperation(ops.choose, (params) => (context) => {\n    const n = _number(params.n, context);\n    const k = _number(params.k, context);\n    if (!isFinite(n) || !isFinite(k)) {\n      return Number.NaN;\n    }\n\n    return choose(n, k);\n  });\n\n  run.setOperation(ops.gcd, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n    if (!isFinite(a) || !isFinite(b)) {\n      return Number.NaN;\n    }\n\n    return gcd(a, b);\n  });\n\n  run.setOperation(ops.bitAnd, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) & _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitOr, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) | _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitXor, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) ^ _number(params.b, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    _number(params.value, context) - _number(params.test, context)\n  );\n\n  // Unary Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _numberMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.sqrt, (params) => (context) => \n    Math.sqrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sq, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value * value;\n  });\n\n  run.setOperation(ops.cbrt, (params) => (context) => \n    Math.cbrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.floor, (params) => (context) => \n    Math.floor(_number(params.value, context))\n  );\n\n  run.setOperation(ops.ceil, (params) => (context) => \n    Math.ceil(_number(params.value, context))\n  );\n\n  run.setOperation(ops.up, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.down, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value > 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.round, (params) => (context) => \n    Math.round(_number(params.value, context))\n  );\n\n  run.setOperation(ops.abs, (params) => (context) => \n    Math.abs(_number(params.value, context))\n  );\n\n  run.setOperation(ops.neg, (params) => (context) => \n    -_number(params.value, context)\n  );\n\n  run.setOperation(ops.sign, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value === 0 ? 0 : value < 0 ? -1 : 1;\n  });\n\n  run.setOperation(ops.log, (params) => (context) => \n    Math.log(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sin, (params) => (context) => \n    Math.sin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cos, (params) => (context) => \n    Math.cos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.tan, (params) => (context) => \n    Math.tan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sinh, (params) => (context) => \n    Math.sinh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cosh, (params) => (context) => \n    Math.cosh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.asin, (params) => (context) => \n    Math.asin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.acos, (params) => (context) => \n    Math.acos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.atan, (params) => (context) => \n    Math.atan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.factorial, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return isFinite(value) ? factorial(value) : value;\n  });\n\n  run.setOperation(ops.bitFlip, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    ~_number(params.value, context)\n  );\n\n  // Other\n\n  run.setOperation(ops.clamp, (params) => (context) => \n    Math.max(_number(params.min, context), Math.min(_number(params.value, context), _number(params.max, context)))\n  );\n\n  run.setOperation(ops.triangleHeight, (params) => (context) => {\n    const base = _number(params.base, context);\n    const side1 = _number(params.side1, context);\n    const side2 = _number(params.side2, context);\n    if (!isFinite(base) || !isFinite(side1) || !isFinite(side2)) {\n      return Number.NaN;\n    }\n\n    return triangleHeight(base, side1, side2);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _number(params.start, context);\n    const end = _number(params.end, context);\n    const delta = _number(params.delta, context);\n\n    return (end - start) * delta + start;\n  });\n\n  // Generators\n\n  run.setOperation(ops.rnd, (params) => (context) => {\n    const min = _number(params.min, context, 0);\n    const max = _number(params.max, context, 1);\n    const gap = max - min;\n    const whole = _bool(params.whole, context, false);\n    const include = _bool(params.includeMax, context, true);\n\n    return whole\n      ? include\n        ? Math.floor((gap + 1) * Math.random()) + min\n        : Math.floor(gap * Math.random()) + min\n      : Math.random() * gap + min;\n  });\n\n  // Formatters\n\n  run.setOperation(ops.toBaseText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const base = _number(params.base, context, DEFAULT_BASE);\n    const min = _number(params.minDigits, context, 0);\n    \n    let x = value.toString(base);\n\n    while (x.length < min) x = '0' + x;\n    \n    return x;\n  });\n\n  run.setOperation(ops.toText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const prefix = _text(params.prefix, context);\n    const suffix = _text(params.suffix, context);\n    const minPlaces = _numberMaybe(params.minPlaces, context);\n    const maxPlaces = _numberMaybe(params.maxPlaces, context);\n    const useExponent = _bool(params.useExponent, context, false);\n    const separator = _textMaybe(params.thousandSeparator, context);\n    \n    let to = '';\n\n    if (useExponent) {\n      to = value.toExponential(isUndefined(maxPlaces) ? minPlaces : maxPlaces);\n    } else if (isNumber(minPlaces)) {\n      to = value.toFixed(minPlaces);\n    } else {\n      to = value.toPrecision(maxPlaces);\n    }\n\n    const SEPARATOR_NUMBER = 1.1;\n    const SEPARATOR_OFFSET = 3;\n\n    if (isString(separator)) {\n      const systemSeparator = SEPARATOR_NUMBER.toLocaleString().substring(1, SEPARATOR_OFFSET - 1);\n      let index = to.indexOf(systemSeparator);\n      if (index === -1) {\n        index = to.length;\n      }\n      index -= SEPARATOR_OFFSET;\n      while (index > 0) {\n        to = to.substring(0, index) + separator + to.substring(index);\n        index -= SEPARATOR_OFFSET;\n      }\n    }\n    \n    return prefix + to + suffix;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isNumber(params.value(context))\n  );\n\n  run.setOperation(ops.isZero, (params) => (context) => \n    Math.abs(_number(params.value, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) > _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    _number(params.value, context) < _number(params.test, context)\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    _number(params.value, context) <= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    _number(params.value, context) > _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    _number(params.value, context) >= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _number(params.value, context);\n    const min = _number(params.min, context);\n    const max = _number(params.max, context);\n    const minInclusive = _bool(params.minInclusive, context, true);\n    const maxInclusive = _bool(params.maxInclusive, context, true);\n\n    const minCompare = value - min;\n    const maxCompare = value - max;\n\n    const minOffset = minInclusive ? 0 : 1;\n    const maxOffset = maxInclusive ? 0 : -1;\n\n    return minCompare >= minOffset && maxCompare <= maxOffset;\n  });\n\n  run.setOperation(ops.isWhole, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isDecimal, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return !isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isPositive, (params) => (context) =>\n    _number(params.value, context) >= 0\n  );\n\n  run.setOperation(ops.isNegative, (params) => (context) =>\n    _number(params.value, context) < 0\n  );\n\n  run.setOperation(ops.isDivisible, (params) => (context) =>\n    Math.abs(_number(params.value, context) % _number(params.by, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    // tslint:disable: no-magic-numbers no-bitwise\n    const r = value & 0xFF;\n    const g = (value >> 8) & 0xFF;\n    const b = (value >> 16) & 0xFF;\n    const a = (value >> 24) & 0xFF;\n    // tslint:enable: no-magic-numbers no-bitwise\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\n\nfunction factorial (x: number): number {\n  let f = x;\n  while (--x > 1) {\n    f *= x;\n  }\n\n  return f;\n}\n\nfunction gcd (a: number, b: number): number {\n  const as = Math.abs(a);\n  const bs = Math.abs(b);\n  let x = Math.max(as, bs);\n  let y = Math.min(as, bs);\n\n  for (;;) {\n    if (y === 0) return x;\n    x %= y;\n    if (x === 0) return y;\n    y %= x;\n  }\n}\n\nfunction choose(n: number, k: number): number \n{\n  let num = 1; \n  let den = 1;\n  let denom = 0;\n\n  // tslint:disable-next-line: no-bitwise\n  if (k > (n >> 1))\n  {\n    k = n - k;\n  }\n\n  while (k >= 1)\n  {\n    num *= n--;\n    den *= k--;\n    denom = gcd( num, den );\n    num /= denom;\n    den /= denom;\n  }\n\n  return num;\n}\n\nconst HALF = 0.5;\nconst TWO = 2;\n\nfunction triangleHeight(base: number, side1: number, side2: number): number \n{\n  const p = (base + side1 + side2) * HALF;\n  const area = Math.sqrt( p * (p - base) * (p - side1) * (p - side2) );\n  const height = area * TWO / base;\n\n  return height;\n}","import { Runtime, ObjectOps, compare, copy, toString, isEmpty, isObject, isBoolean, isDate, isArray, isMap, isNumber, isString, isColor, COMPONENT_MAX, ColorType } from 'expangine-runtime';\nimport { _object, restoreScope, saveScope, _objectMaybe, _optional } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ObjectOps;\n\n  // Static \n\n  run.setOperation(ops.create, (params) => (context) =>\n    Object.create(null)\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _objectMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.has, (params) => (context) =>\n    params.key(context) in _object(params.object, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _object(params.object, context)[params.key(context)]\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = object[key];\n\n    const value = params.value(context);\n\n    object[key] = value;\n\n    restoreScope(context, saved);\n\n    return object;\n  });\n\n  run.setOperation(ops.delete, (params) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const value = object[key];\n\n    delete object[key];\n\n    return value;\n  });\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(_object(params.object, context))\n  );\n\n  function mergeValues(target: any, merge: any) \n  {\n    if (isObject(merge)) \n    {\n      for (const prop in merge) \n      {\n        const value = merge[prop];\n\n        if (value !== undefined && value !== null) \n        {\n          target[prop] = value;\n        }\n      }\n    }\n  }\n\n  run.setOperation(ops.merge, (params) => (context) => {\n    const merged = {};\n    mergeValues(merged, params.a(context));\n    mergeValues(merged, params.b(context));\n    mergeValues(merged, _optional(params.c, context));\n    mergeValues(merged, _optional(params.d, context));\n    mergeValues(merged, _optional(params.e, context));\n\n    return merged;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isObject(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, () => true)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = params.value(context);\n\n    if (isObject(value) && isColor(value.value)) {\n      return value.value;\n    }\n\n    return ColorType.baseType.normalize(value) \n      || ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX });\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, v => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, () => 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, v => toString(v))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => [v])\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isObject(val) && isType(val.value)\n    ? val.value\n    : otherwise(val);\n}","import * as metaphone from 'metaphone';\nimport { Runtime, TextOps, isString, parse, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _asList, _asMap, _asObject, _asTuple, _textMaybe, _regex, preserveScope } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TextOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) => \n    ''\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _textMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.append, (params) => (context) => \n    _text(params.value, context) + _text(params.append, context)\n  );\n\n  run.setOperation(ops.prepend, (params) => (context) => \n    _text(params.prepend, context) + _text(params.value, context)\n  );\n\n  run.setOperation(ops.lower, (params) => (context) => \n    _text(params.value, context).toLowerCase()\n  );\n\n  run.setOperation(ops.upper, (params) => (context) => \n    _text(params.value, context).toUpperCase()\n  );\n\n  run.setOperation(ops.char, (params) => (context) => {\n    const value = _text(params.value, context);\n    const index = _number(params.index, context);\n\n    return index <= value.length ? value.charAt(index) : _text(params.outside, context);\n  });\n\n  run.setOperation(ops.replace, (params) => (context) => \n    _text(params.value, context).replace(_text(params.find, context), _text(params.replace, context))\n  );\n\n  run.setOperation(ops.repeat, (params) => (context) => {\n    const value = _number(params.value, context);\n    let times = _number(params.times, context);\n    let repeated = '';\n    while (--times >= 0){ \n      repeated += value;\n    }\n\n    return repeated;\n  });\n\n  run.setOperation(ops.split, (params) => (context) => \n    _text(params.value, context).split(_text(params.by, context), _numberMaybe(params.limit, context))\n  );\n\n  run.setOperation(ops.chars, (params) => (context) => \n    _text(params.value, context).split('')\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _text(params.value, context).substring(_number(params.start, context, 0), _numberMaybe(params.end, context))\n  );\n\n  run.setOperation(ops.indexOf, (params) => (context) => \n    _text(params.value, context).indexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.lastIndexOf, (params) => (context) => \n    _text(params.value, context).lastIndexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.trim, (params) => (context) => {\n    let value = _text(params.value, context);\n    if (_bool(params.start, context, true)) {\n      value = value.replace(/^\\w+/, '');\n    }\n    if (_bool(params.end, context, true)) {\n      value = value.replace(/\\w+$/, '');\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(0, test.length) === test;\n  });\n\n  run.setOperation(ops.endsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(value.length - test.length) === test;\n  });\n\n  run.setOperation(ops.soundex, (params) => {\n    const LETTERS_ONLY = /[^a-z]/g;\n    const ALLOWED_ONLY = /[^bfpvcgjkqsxzdtlmnr]/g;\n    const SOUNDEX_MIN_DEFAULT = 4;\n    const MAP = {\n      b: 1, f: 1, p: 1, v: 1,\n      c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2,\n      d: 3, t: 3,\n      l: 4,\n      m: 5, n: 5,\n      r: 6\n    };\n\n    return (context) => {\n      let value = _text(params.value, context);\n      const max = _numberMaybe(params.max, context);\n      const min = _number(params.min, context, SOUNDEX_MIN_DEFAULT);\n\n      value = value.toLowerCase();\n      value = value.replace(LETTERS_ONLY, '');\n      value = value.charAt(0) + value.substring(1).replace(ALLOWED_ONLY, '');\n\n      let soundex = value.charAt(0);\n\n      for (let i = 1; i < value.length; i++) {\n        soundex += MAP[value.charAt(i)];\n      }\n      \n      let last = soundex.charAt(1)\n      for (let i = 2; i < soundex.length; i++) { \n        if (soundex.charAt(i) === last) {\n          soundex = soundex.substring(0, i) + soundex.substring(i + 1);\n          i--;\n        } else {\n          last = soundex.charAt(i);\n        }\n      }\n\n      if (isFinite(max)) {\n        soundex = soundex.substring(0, max + 1);\n      }\n\n      while (soundex.length < min) {\n        soundex += '0';\n      }\n\n      return soundex;\n    };\n  });\n\n  run.setOperation(ops.metaphone, (params) => (context) => metaphone(_text(params.value, context)));\n\n  run.setOperation(ops.distance, (params) => {\n    const distance = (a: string, b: string): number => {\n      const distanceMatrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n\n      for (let i = 0; i <= a.length; i += 1) {\n        distanceMatrix[0][i] = i;\n      }\n\n      for (let j = 0; j <= b.length; j += 1) {\n        distanceMatrix[j][0] = j;\n      }\n\n      for (let j = 1; j <= b.length; j += 1) {\n        for (let i = 1; i <= a.length; i += 1) {\n          const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n          distanceMatrix[j][i] = Math.min(\n            distanceMatrix[j][i - 1] + 1,\n            distanceMatrix[j - 1][i] + 1,\n            distanceMatrix[j - 1][i - 1] + indicator,\n          );\n        }\n      }\n\n      return distanceMatrix[b.length][a.length];\n    };\n    \n    return (context) => {\n      const value = _text(params.value, context);\n      const test = _text(params.test, context);\n\n      return distance(value, test);\n    };\n  });\n\n  run.setOperation(ops.length, (params) => (context) =>\n    _text(params.value, context).length\n  );\n\n  run.setOperation(ops.compare, (params) => (context) =>\n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false))\n  );\n\n  run.setOperation(ops.like, (params) => (context) => {\n    const value = _text(params.value, context);\n    const pattern = _text(params.pattern, context);\n    const ignoreCase = _bool(params.ignoreCase, context, false);\n    \n    const valueCased = ignoreCase ? value.toLowerCase() : value;\n    const patternCased = ignoreCase ? pattern.toLowerCase() : pattern;\n\n    const regexPattern = patternCased\n      .split('%')\n      .map(x => x ? x.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : x)\n      .join('.*')\n    ;\n\n    const regex = new RegExp('^' + regexPattern + '$');\n\n    return !!valueCased.match(regex);\n  });\n\n  run.setOperation(ops.pad, (params) => (context) => {\n    let value = _text(params.value, context);\n    const padding = _text(params.padding, context) || ' ';\n    const append = _bool(params.append, context);\n    const min = _number(params.min, context);\n    const max = _numberMaybe(params.max, context);\n\n    if (append) { \n      while (value.length < min) {\n        value = value + padding;\n      }\n    } else {\n      while (value.length < min) {\n        value = padding + value;\n      }\n    }\n\n    if (max !== undefined) {\n      if (value.length > max) {\n        if (append) {\n          value = value.substring(0, max);\n        } else {\n          value = value.substring(max - value.length, max);\n        }\n      }\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.regexTest, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, false, params.ignoreCase, params.multiline);\n    \n    return regex.test(value);\n  });\n\n  run.setOperation(ops.regexSplit, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, false, params.ignoreCase, params.multiline);\n    const limit = _numberMaybe(params.limit, context);\n\n    return value.split(regex, limit);\n  });\n\n  run.setOperation(ops.regexMatch, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, true, params.ignoreCase, params.multiline);\n    \n    return value.match(regex);\n  });\n\n  run.setOperation(ops.regexMatchAll, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, true, params.ignoreCase, params.multiline);\n    const matches: Array<{ index: number, lastIndex: number, input: string, groups: string[] }> = [];\n    \n    let lastIndex = 0;\n    let match: RegExpExecArray;\n\n    // tslint:disable-next-line: no-conditional-assignment\n    while ((match = regex.exec(value)) !== null) {\n      if (lastIndex === regex.lastIndex) {\n        return matches;\n      }\n      lastIndex = regex.lastIndex;\n      matches.push({\n        index: match.index,\n        lastIndex: regex.lastIndex,\n        input: match.input,\n        groups: match.slice(),\n      });\n    }\n\n    return matches;\n  });\n\n  run.setOperation(ops.regexReplace, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, params.all, params.ignoreCase, params.multiline);\n    const replacement = _text(params.replacement, context);\n\n    return value.replace(regex, replacement);\n  });\n\n  run.setOperation(ops.regexReplaceDynamic, (params, scope) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, params.all, params.ignoreCase, params.multiline);\n\n    return preserveScope(context, [scope.match], () => \n      value.replace(regex, (...givenArgs: any[]) => {\n        const args: any[] = Array.prototype.slice.call(givenArgs);\n        args.pop();\n\n        const input = args.shift();\n        const index = parseInt(args.pop());\n        const lastIndex = regex.lastIndex;\n        const groups = args;\n        \n        context[scope.match] = { index, lastIndex, input, groups };\n\n        return params.replace(context);\n      })\n    );\n  });\n\n  run.setOperation(ops.regexIndexOf, (params) => (context) => {\n    const value = _text(params.value, context);\n    const regex = _regex(params.regex, context, true, params.ignoreCase, params.multiline);\n    \n    return value.search(regex);\n  });\n\n  // Other\n\n\n  // Generators\n\n\n  // Formatters\n\n  run.setOperation(ops.toNumber, (params) => (context) => {\n    const value = parseFloat(_text(params.value, context));\n\n    return isFinite(value) \n      ? value \n      : _number(params.invalidValue, context, 0);\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isString(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params) => (context) => \n    _text(params.value, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params) => (context) => \n    _text(params.value, context).length !== 0\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) >= 0\n  );\n\n  run.setOperation(ops.isLower, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toLowerCase()) === 0;\n  });\n\n  run.setOperation(ops.isUpper, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toUpperCase()) === 0;\n  });\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    /^(true|t|1|y|x)$/.test(_text(params.value, context))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compare(a: string, b: string, ignoreCase: boolean): number \n{\n  return ignoreCase\n    ? a.toLowerCase().localeCompare(b.toLowerCase())\n    : a.localeCompare(b);\n}","import { Runtime, TupleOps, compare, copy, isBoolean, isDate, isEmpty, isNumber, isString, isArray, isMap, isObject, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { _list, _number, _listMaybe, _optional } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TupleOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  function buildValues(built: any[], values: any)\n  {\n    if (isArray(values))\n    {\n      built.push(...values);\n    }\n    else\n    {\n      built.push(values);\n    }\n  }\n\n  run.setOperation(ops.build, (params) => (context) => {\n    const built: any[] = [];\n\n    buildValues(built, params.a(context));\n    buildValues(built, params.b(context));\n    buildValues(built, _optional(params.c, context));\n    buildValues(built, _optional(params.d, context));\n    buildValues(built, _optional(params.e, context));\n\n    return built;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.value, context)[_number(params.index, context, 0)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const tuple = _list(params.value, context);\n    const index = _number(params.index, context, 0);\n    const existing = tuple[index];\n    tuple[index] = params.element(context);\n    \n    return existing;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.find ? v.find(isBoolean) || false : false)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => v.find ? v.find(isDate) || new Date() : new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, (v) => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.find ? v.find(isNumber) || 0 : 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => v.find ? v.find(isString) || '' : '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    params.value(context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}","export * from './LiveRuntime';\n\nimport { LiveRuntime } from './LiveRuntime';\nimport { default as addLiveExpressions } from './Expressions';\nimport { default as addLiveAny } from './Any';\nimport { default as addLiveBoolean } from './Boolean';\nimport { default as addLiveColor } from './Color';\nimport { default as addLiveDate } from './Date';\nimport { default as addLiveList } from './List';\nimport { default as addLiveMap } from './Map';\nimport { default as addLiveNumber } from './Number';\nimport { default as addLiveObject } from './Object';\nimport { default as addLiveText } from './Text';\nimport { default as addLiveTuple } from './Tuple';\n\n\naddLiveExpressions(LiveRuntime);\naddLiveAny(LiveRuntime);\naddLiveBoolean(LiveRuntime);\naddLiveColor(LiveRuntime);\naddLiveDate(LiveRuntime);\naddLiveList(LiveRuntime);\naddLiveMap(LiveRuntime);\naddLiveNumber(LiveRuntime);\naddLiveObject(LiveRuntime);\naddLiveText(LiveRuntime);\naddLiveTuple(LiveRuntime);\n\n\nexport {\n  addLiveExpressions,\n  addLiveAny,\n  addLiveBoolean,\n  addLiveColor,\n  addLiveDate,\n  addLiveList,\n  addLiveMap,\n  addLiveNumber,\n  addLiveObject,\n  addLiveText,\n  addLiveTuple,\n};"],"sourceRoot":""}