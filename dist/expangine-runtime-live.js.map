{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"expangine-runtime\"","webpack://[name]/./LiveRuntime.ts","webpack://[name]/./helper.ts","webpack://[name]/./Expressions.ts","webpack://[name]/./Any.ts","webpack://[name]/./Boolean.ts","webpack://[name]/./Color.ts","webpack://[name]/./Date.ts","webpack://[name]/./List.ts","webpack://[name]/./Map.ts","webpack://[name]/./Number.ts","webpack://[name]/./Object.ts","webpack://[name]/./Text.ts","webpack://[name]/./Tuple.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LiveRuntime","saveScope","context","scope","popped","prop","alias","restoreScope","saved","undefined","preserveScope","props","run","map","result","forEach","last","_optional","cmd","defaultValue","_bool","_typed","isValid","invalidValueDefault","invalidValue","_typedDynamic","_boolMaybe","_number","Number","NaN","_numberMaybe","_text","_textMaybe","_list","_listMaybe","_map","Map","_mapMaybe","_object","_objectMaybe","_color","g","b","a","_colorMaybe","_date","Date","_dateMaybe","_asList","getValue","_asMap","_asObject","_asTuple","_colorOrNumber","setExpression","expr","_thisRun","thisRun","parts","path","sub","getCommand","length","next","currentVariable","params","e","op","getOperation","Error","defaults","getOperationScopeDefaults","scopeAlias","operationCommand","returnProperty","chain","data","cases","test","otherwise","caseExpression","valueCommand","tests","defaultCase","isEqual","noScope","matches","expression","expressions","defaultResult","and","pass","or","variable","start","end","body","breakVariable","max","maxIterations","iterations","stop","dir","condition","vars","defined","sections","template","split","section","index","_source","source","reduce","out","func","getFunction","command","options","args","returnValue","elements","ops","setOperation","cmp","copy","isDefined","getDefined","coalesce","isNotEqual","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","asAny","asBoolean","asColor","baseType","normalize","asDate","asList","asMap","asNumber","parseFloat","isFinite","asObject","asText","asTuple","maybe","xor","not","isTrue","isFalse","compareColor","build","component","clamp","add","addend","alpha","adds","scale","addendScale","subtrahend","mul","multiplier","div","divisor","divSafe","mod","format","formatId","getFormat","formatter","parse","lerp","delta","lighten","amount","darken","toHSL","fromColor","fromHSL","toColor","luminance","contrast","valueL","testL","Math","min","invert","opaque","distance","dist","named","getName","closestName","closestDistance","constants","entries","blend","top","bottom","modeName","blender","BlendFunctions","epsilon","formatMap","bestfit","x","y","abs","inv","multiply","screen","overlay","hard","soft","dodge","burn","divide","addition","diff","now","today","day","tomorrow","yesterday","parseAsUTC","fromText","fromTimestamp","fromTimestampSeconds","valueOf","set","update","unit","startOf","endOf","daysInMonth","daysInYear","weeksInYear","getTime","absolute","adjust","timezoneOffset","toText","toISOText","toISOString","id","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isBetween","startInclusive","endInclusive","startCompare","endCompare","isStartOf","isEndOf","isDST","isLeapYear","count","list","sameItem","item","push","prev","addFirst","unshift","addLast","insert","splice","remove","handleListIsEqual","_","removeFirst","shift","removeLast","pop","removeAt","removeWhere","handleListIteration","removed","where","contains","find","reverse","clampedStart","deepCopy","handleList","slice","half","floor","j","swap","exclude","k","overlap","overlapping","sort","compare","shuffle","times","random","unique","skip","duplicates","once","take","drop","append","concat","prepend","indexOf","lastIndexOf","findIndex","first","randomList","taken","join","prefix","sum","delimiter","suffix","each","filter","mapped","transform","fail","initial","reduced","less","more","group","groups","by","grouping","keyValue","newGrouping","toListMap","getKey","keyList","toMap","handleAggregate","agg","avg","std","values","squareAvg","v","sqrt","variance","median","bitand","bitor","bitxor","isEmpty","isNotEmpty","equal","tryCastValue","toString","isType","val","arr","temp","handle","initialAggregate","aggregate","getAggregate","initialResult","onItem","earlyExit","newResult","handleMatch","getDefaultResult","matchResult","existing","existingValue","has","delete","keys","pairs","clear","size","handleMap","deepCopyKey","entriesCopy","transformKey","entriesTransformed","toPlainObject","plain","pi","PI","pi2","piHalf","E","sqrt2","SQRT2","sqrt12","SQRT1_2","ln2","LN2","ln10","LN10","log2e","LOG2E","log10e","LOG10E","pow","exponent","atan2","hypot","choose","num","den","denom","gcd","bitAnd","bitOr","bitXor","sq","cbrt","ceil","up","down","round","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","f","bitFlip","triangleHeight","base","side1","side2","HALF","TWO","rnd","gap","whole","include","includeMax","toBaseText","minDigits","minPlaces","maxPlaces","useExponent","separator","thousandSeparator","to","toExponential","toFixed","toPrecision","systemSeparator","toLocaleString","substring","SEPARATOR_OFFSET","isZero","minInclusive","maxInclusive","isWhole","eps","isDecimal","isPositive","isNegative","isDivisible","as","bs","lower","toLowerCase","upper","toUpperCase","char","charAt","outside","replace","repeat","repeated","limit","chars","search","trim","startsWith","endsWith","soundex","LETTERS_ONLY","ALLOWED_ONLY","MAP","q","z","distanceMatrix","Array","fill","indicator","ignoreCase","like","pattern","regexPattern","regex","RegExp","match","pad","padding","toNumber","isLower","localeCompare","isUpper","tuple","element"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,sBACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,qBAAsBJ,GACJ,iBAAZC,QACdA,QAAQ,0BAA4BD,EAAQG,QAAQ,sBAEpDJ,EAAK,0BAA4BC,EAAQD,EAAK,sBARhD,CASGO,QAAQ,SAASC,GACpB,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUT,QAGnC,IAAIC,EAASM,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHX,QAAS,IAUV,OANAY,EAAQH,GAAUI,KAAKZ,EAAOD,QAASC,EAAQA,EAAOD,QAASQ,GAG/DP,EAAOU,GAAI,EAGJV,EAAOD,QA0Df,OArDAQ,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAAShB,EAASiB,EAAMC,GAC3CV,EAAoBW,EAAEnB,EAASiB,IAClCG,OAAOC,eAAerB,EAASiB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASxB,GACX,oBAAXyB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAerB,EAASyB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASlC,GAChC,IAAIiB,EAASjB,GAAUA,EAAO6B,WAC7B,WAAwB,OAAO7B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAO,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,gBClFrDxC,EAAOD,QAAUM,G,+CCYJoC,EAAc,IAAI,UAAiC,QCNzD,SAASC,EAA4BC,EAAsBC,GAEhE,IAAMC,EAAS,GAEf,IAAK,IAAMC,KAAQF,EACnB,CACE,IAAMG,EAAQH,EAAME,GAEpBD,EAAOE,GAASJ,EAAQI,GAG1B,OAAOF,EAGF,SAASG,EAA+BL,EAAsBM,GAEnE,IAAK,IAAMH,KAAQG,OAEGC,IAAhBD,EAAMH,UAEDH,EAAQG,GAIfH,EAAQG,GAAQG,EAAMH,GAKrB,SAASK,EAAuBR,EAAsBS,EAAiBC,GAE5E,IAAMJ,EAAQG,EAAME,KAAI,SAACf,GAAM,OAAAI,EAAQJ,MAEjCgB,EAASF,IAQf,OANAJ,EAAMO,SAAQ,SAACC,EAAMhD,GACnB,YAASyC,IAATO,SACWd,EAAQS,EAAM3C,IACrBkC,EAAQS,EAAM3C,IAAMgD,KAGnBF,EAGF,SAASG,EAAWC,EAA8BhB,EAAsBiB,GAE7E,OAAOD,EAAMA,EAAIhB,GAAWiB,EAGvB,SAASC,EAAOF,EAA8BhB,EAAsBiB,GAEzE,YAFyE,IAAAA,OAAA,GAElED,IAAQA,EAAIhB,GAAWiB,EAGzB,SAASE,EAAWC,EAAqCC,GAE9D,OAAO,SAACL,EAA8BhB,EAAsBsB,GAE1D,QAF0D,IAAAA,MAAA,IAErDN,EAEH,OAAOM,EAGT,IAAMvC,EAAQiC,EAAIhB,GAElB,OAAOoB,EAAQrC,GAASA,EAAQuC,GAI7B,SAASC,EAAkBH,EAAqCC,GAErE,OAAO,SAACL,EAA8BhB,EAAsBsB,GAE1D,QAF0D,IAAAA,MAAA,IAErDN,EAEH,OAAOM,IAGT,IAAMvC,EAAQiC,EAAIhB,GAElB,OAAOoB,EAAQrC,GAASA,EAAQuC,KAI7B,IAAME,EAAaL,EAA6B,iBAAWZ,GAErDkB,EAAUN,EAAQ,WAAUO,OAAOC,KAEnCC,EAAeT,EAA4B,gBAAUZ,GAErDsB,EAAQV,EAAQ,WAAU,IAE1BW,EAAaX,EAA4B,gBAAUZ,GAEnDwB,EAASR,EAAsB,WAAS,WAAM,YAE9CS,EAAab,EAA2B,eAASZ,GAEjD0B,EAAOV,EAA8B,SAAO,WAAM,WAAIW,OAEtDC,EAAYhB,EAAmC,aAAOZ,GAEtD6B,EAAUb,EAAmB,YAAU,WAAM,YAE7Cc,EAAelB,EAAwB,gBAAUZ,GAEjD+B,EAASf,EAAqB,WAAS,WAAM,OAAG3C,EAAG,IAAK2D,EAAG,IAAKC,EAAG,IAAKC,EAAG,QAE3EC,EAAcvB,EAAwB,eAASZ,GAE/CoC,EAAQpB,EAAoB,UAAQ,WAAM,WAAIqB,QAE9CC,EAAa1B,EAA0B,cAAQZ,GAErD,SAASuC,EAAQC,EAAuB/C,GAE7C,MAAO,CAAE+C,EAAS/C,IAGb,SAASgD,EAAOD,EAAuB/C,GAE5C,OAAO,IAAIkC,IAAI,CAAC,CAAC,QAASa,EAAS/C,MAG9B,SAASiD,EAAUF,EAAuB/C,GAE/C,MAAO,CAAEjB,MAAOgE,EAAS/C,IAGpB,SAASkD,EAASH,EAAuB/C,GAE9C,MAAO,CAAE+C,EAAS/C,IAGb,SAASmD,EAAeJ,EAAuB/C,GAEpD,IAAMjB,EAAQgE,EAAS/C,GAEvB,OAAI,kBAAQjB,GAEHA,EAGL,mBAASA,GAEJ,CAAEH,EAAGG,EAAOwD,EAAGxD,EAAOyD,EAAGzD,EAAO0D,EAAG1D,GAGrC,CAAEH,EAAG,IAAK2D,EAAG,IAAKC,EAAG,IAAKC,EAAG,K,spBC/IvB,WAAS/B,GAGtBA,EAAI0C,cAAc,sBAAoB,SAACC,EAAMC,GAE3C,OAAO,WAAM,OAAAD,EAAKtE,UAGpB2B,EAAI0C,cAAc,iBAAe,SAACC,EAAME,GAEtC,IAAMC,EAAuBH,EAAKI,KAAK9C,KAAI,SAAA+C,GAAO,OAAAH,EAAQI,WAAWD,MAErE,OAAO,SAAC1D,GAIN,IAFA,IAAIjB,EAAaiB,EAERlC,EAAI,EAAGA,EAAI0F,EAAMI,SAAW,sBAAY7E,GAAQjB,IACzD,CACE,IAAM+F,EAAOL,EAAM1F,GAAGkC,GAEtB,GAAI,sBAAYjB,EAAM8E,IAEpB,OAGF9E,EAAQA,EAAM8E,GAGhB,OAAO9E,MAIX2B,EAAI0C,cAAc,iBAAe,SAACC,EAAME,GAEtC,IAAMC,EAAuBH,EAAKI,KAAK9C,KAAI,SAAA+C,GAAO,OAAAH,EAAQI,WAAWD,MAC/D5C,EAAe0C,EAAMI,OAAS,EAC9Bb,EAAwBQ,EAAQI,WAAWN,EAAKtE,OAEtD,OAAO,SAACiB,GAIN,IAFA,IAAIjB,EAAaiB,EAERlC,EAAI,EAAGA,EAAIgD,IAAS,sBAAY/B,GAAQjB,IACjD,CACE,IAAM+F,EAAOL,EAAM1F,GAAGkC,GAEtB,GAAI,sBAAYjB,EAAM8E,IAEpB,OAAO,EAGT9E,EAAQA,EAAM8E,GAGhB,OAAK,sBAAY9E,KAGfA,EADayE,EAAM1C,GAAMd,IACX+C,EAAS/C,IAEhB,OAObU,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAMC,EAAuBH,EAAKI,KAAK9C,KAAI,SAAA+C,GAAO,OAAAH,EAAQI,WAAWD,MAC/D5C,EAAe0C,EAAMI,OAAS,EAC9Bb,EAAwBQ,EAAQI,WAAWN,EAAKtE,OAChD+E,EAA0BT,EAAKS,gBAErC,OAAO,SAAC9D,GAIN,IAFA,IAAIjB,EAAaiB,EAERlC,EAAI,EAAGA,EAAIgD,IAAS,sBAAY/B,GAAQjB,IACjD,CACE,IAAM+F,EAAOL,EAAM1F,GAAGkC,GAEtB,GAAI,sBAAYjB,EAAM8E,IAEpB,OAAO,EAGT9E,EAAQA,EAAM8E,GAGhB,IAAK,sBAAY9E,GACjB,CACE,IAAM,EAAOyE,EAAM1C,GAAMd,GASzB,OAPAQ,EAAcR,EAAS,CAAC8D,IAAkB,WAExC9D,EAAQ8D,GAAmB/E,EAAM,GAEjCA,EAAM,GAAQgE,EAAS/C,OAGlB,EAGT,OAAO,MAIXU,EAAI0C,cAAc,uBAAqB,SAACC,EAAME,GAE5C,IAAMQ,EAAyB,oBAAUV,EAAKU,QAAQ,SAAAC,GAAK,OAAAT,EAAQI,WAAWK,MACxEC,EAAKV,EAAQW,aAAab,EAAKhF,MAErC,IAAK4F,EAEH,MAAM,IAAIE,MAAM,kBAAkBd,EAAKhF,KAAI,yCAG7C,IAAM+F,EAAWb,EAAQc,0BAA0BhB,EAAKhF,MACpDiG,EAAajB,EAAKiB,WAEtB,GAAIF,EAEF,IAAK,IAAMjE,KAAQiE,EAEXjE,KAAQmE,IAERA,IAAejB,EAAKiB,aAEtBA,EAAa,EAAH,GAAQA,IAGpBA,EAAWnE,GAAQiE,EAASjE,IAKlC,IAAMoE,EAAmBN,EAAGF,EAAQO,GAEpC,OAAO,SAACtE,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAOuE,EAAiBvE,OAI5BU,EAAI0C,cAAc,mBAAiB,SAACC,EAAME,GAExC,IAAMkB,EAAuBpB,EAAKoB,MAAM9D,KAAI,SAAA+D,GAAQ,OAAAnB,EAAQI,WAAWe,MAEvE,OAAO,SAAC1E,G,QAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,CAEA,IAAIc,E,IAEJ,IAAkB,QAAA2D,GAAK,8BACvB,CAGE,GAFA3D,GAAOE,EAFK,SAEDhB,GAEPuD,EAAQiB,kBAAkBxE,EAE5B,Q,iGAIJ,OAAOc,OAIXJ,EAAI0C,cAAc,gBAAc,SAACC,EAAME,GAErC,IAAMoB,EAAsCtB,EAAKsB,MAAMhE,KAAI,SAAC,G,IAAA,SAACiE,EAAA,KAAMhE,EAAA,KAAY,OAAC2C,EAAQI,WAAWiB,GAAOrB,EAAQI,WAAW/C,OACvHiE,EAAyBtB,EAAQI,WAAWN,EAAKwB,WAEvD,OAAO,SAAC7E,G,QAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,C,IAEA,IAA6B,QAAA2E,GAAK,8BAClC,CADK,IAAMG,EAAc,QAEjB,SAAC,OAAMlE,EAAA,KAEb,GAAI,EAAKZ,GAEP,OAAOuD,EAAQiB,kBAAkBxE,OAC7BO,EACAK,EAAOZ,I,iGAIf,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAO6E,EAAU7E,QAIrBU,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAMwB,EAA4BxB,EAAQI,WAAWN,EAAKtE,OACpD4F,EAAwCtB,EAAKsB,MAAMhE,KAAI,SAAC,G,IAAA,SAACqE,EAAA,KAAOpE,EAAA,KAAY,OAChFoE,EAAMrE,KAAI,SAAA3B,GAAK,OAAAuE,EAAQI,WAAW3E,MAClCuE,EAAQI,WAAW/C,OAEfqE,EAA2B1B,EAAQI,WAAWN,EAAK4B,aACnDC,EAAU3B,EAAQW,aAAab,EAAKY,IACpCkB,EAAU,GAEhB,OAAO,SAACnF,G,YAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,CAEA,IAAMjB,EAAQgG,EAAa/E,GAE3B,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,C,IAEA,IAA8B,QAAA2E,GAAK,8BACnC,CADW,mBAACK,EAAA,KAAOpE,EAAA,KAEbwE,GAAU,E,IAEd,IAAmB,QAAAJ,GAAK,8BACxB,CADK,IAAM,EAAI,QAEb,GAAIE,EAAQ,CAAEnG,MAAO,WAAM,OAAAA,GAAO6F,KAAI,GAAIO,EAAtCD,CAA+ClF,GACnD,CACEoF,GAAU,EACV,MAGF,GAAI7B,EAAQiB,kBAAkBxE,EAAS,Q,iGAGzC,GAAIoF,EAEF,OAAOxE,EAAOZ,I,iGAIlB,OAAOiF,EAAYjF,SAIvBU,EAAI0C,cAAc,iBAAe,SAACC,EAAME,GAEtC,IAAM8B,EAA0B9B,EAAQI,WAAWN,EAAKgC,YAExD,OAAO,SAACrF,GAAY,OAACqF,EAAWrF,OAGlCU,EAAI0C,cAAc,iBAAe,SAACC,EAAME,GAEtC,IAAM+B,EAA6BjC,EAAKiC,YAAY3E,KAAI,SAAAqD,GAAK,OAAAT,EAAQI,WAAWK,MAC1EuB,EAAyBD,EAAY1B,OAAS,EAEpD,OAAO,SAAC5D,G,QAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,C,IAEA,IAAkB,QAAAsF,GAAW,8BAC7B,CACE,KAAKE,EAFO,SAEHxF,IAAYuD,EAAQiB,kBAAkBxE,EAE7C,OAAO,G,iGAIX,OAAOuF,OAIX7E,EAAI0C,cAAc,gBAAc,SAACC,EAAME,GAErC,IAAM+B,EAA6BjC,EAAKiC,YAAY3E,KAAI,SAAAqD,GAAK,OAAAT,EAAQI,WAAWK,MAC1EuB,EAAgD,IAAvBD,EAAY1B,OAE3C,OAAO,SAAC5D,G,QAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,C,IAEA,IAAiB,QAAAsF,GAAW,8BAC5B,CADK,IAEGG,GAAOC,EAFF,SAEK1F,GAEhB,GAAIyF,GAAQlC,EAAQiB,kBAAkBxE,EAEpC,OAAOyF,G,iGAIX,OAAOF,OAIX7E,EAAI0C,cAAc,iBAAe,SAACC,EAAME,GAEtC,IAAMoC,EAAmBtC,EAAKsC,SACxBC,EAAqBrC,EAAQI,WAAWN,EAAKuC,OAC7CC,EAAmBtC,EAAQI,WAAWN,EAAKwC,KAC3CC,EAAoBvC,EAAQI,WAAWN,EAAKyC,MAC5CC,EAAwB1C,EAAK0C,cAC7BC,EAAc3C,EAAK4C,cAEzB,OAAO,SAACjG,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAOQ,EAAcR,EAAS,CAAC2F,EAAUI,IAAgB,WAEvD/F,EAAQ+F,IAAiB,EAEzB,IAGIjF,EAHAhD,EAAI8H,EAAM5F,GACVkG,EAAa,EACbC,EAAON,EAAI7F,GAEToG,EAAMtI,EAAIqI,EAAO,GAAK,EAE5B,KAAI5C,EAAQiB,kBAAkBxE,GAA9B,CAKA,MAAgB,IAARoG,EAAYtI,GAAKqI,EAAOrI,GAAKqI,IAASD,IAAeF,IAE3DhG,EAAQ2F,GAAY7H,EACpBgD,EAAOgF,EAAK9F,KAERA,EAAQ+F,IAAkBxC,EAAQiB,kBAAkBxE,KAQxD,GAHAlC,GAAKsI,EACLD,EAAON,EAAI7F,GAEPuD,EAAQiB,kBAAkBxE,EAAS,OAGzC,OAAOc,UAKbJ,EAAI0C,cAAc,mBAAiB,SAACC,EAAME,GAExC,IAAM8C,EAAyB9C,EAAQI,WAAWN,EAAKgD,WACjDP,EAAoBvC,EAAQI,WAAWN,EAAKyC,MAC5CC,EAAwB1C,EAAK0C,cAC7BC,EAAc3C,EAAK4C,cAEzB,OAAO,SAACjG,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAOQ,EAAcR,EAAS,CAAC+F,IAAgB,WAE7C,IACIjF,EADAoF,EAAa,EAKjB,IAFAlG,EAAQ+F,IAAiB,EAElBM,EAAUrG,IAAYkG,IAAeF,GAC5C,CACE,GAAIzC,EAAQiB,kBAAkBxE,EAAS,OAIvC,GAFAc,EAAOgF,EAAK9F,GAERA,EAAQ+F,IAAkBxC,EAAQiB,kBAAkBxE,EAEtD,MAIJ,OAAOc,SAKbJ,EAAI0C,cAAc,gBAAc,SAACC,EAAME,GAErC,IAAM8C,EAAyB9C,EAAQI,WAAWN,EAAKgD,WACjDP,EAAoBvC,EAAQI,WAAWN,EAAKyC,MAC5CC,EAAwB1C,EAAK0C,cAC7BC,EAAc3C,EAAK4C,cAEzB,OAAO,SAACjG,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAOQ,EAAcR,EAAS,CAAC+F,IAAgB,WAE7C,IACIjF,EADAoF,EAAa,EAGjBlG,EAAQ+F,IAAiB,EAEzB,EACA,CACE,GAAIxC,EAAQiB,kBAAkBxE,EAAS,OAIvC,GAFAc,EAAOgF,EAAK9F,GAERA,EAAQ+F,IAAkBxC,EAAQiB,kBAAkBxE,EAEtD,YAGIqG,EAAUrG,IAAYkG,IAAeF,GAE7C,OAAOlF,SAKbJ,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAMhG,EAAkC8F,EAAK9F,OAAOoD,KAAI,SAAC,G,IAAA,SAACtC,EAAA,KAAM2F,EAAA,KAAO,OAAC3F,EAAMkF,EAAQI,WAAWK,OAC3FsC,EAAiB/I,EAAOoD,KAAI,SAAC,GAAW,OAAX,OAAC,MAC9BmF,EAAoBvC,EAAQI,WAAWN,EAAKyC,MAElD,OAAO,SAAC9F,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAE9B,OAAOQ,EAAcR,EAASsG,GAAM,W,YAElC,IAA8B,QAAA/I,GAAM,8BACpC,CADW,mBAAC,OAAMgJ,EAAA,KAEhB,GAAIhD,EAAQiB,kBAAkBxE,EAE5B,OAGFA,EAAQ,GAAQuG,EAAQvG,I,iGAG1B,KAAIuD,EAAQiB,kBAAkBxE,GAK9B,OAAO8F,EAAK9F,UAKlBU,EAAI0C,cAAc,sBAAoB,SAACC,EAAME,GAE3C,IAGMQ,EAAyB,oBAAUV,EAAKU,QAAQ,SAAAC,GAAK,OAAAT,EAAQI,WAAWK,MAGxEwC,EAFmBnD,EAAKoD,SAEJC,MAAM,UAAU/F,KAAI,SAACgG,EAASC,GACtD,OAAOA,EAPa,GACS,EAOzB,SAACC,GAAiB,OAAAF,GAClB,SAACG,GAAgB,OAAAA,GAAUH,KAAWG,EAASA,EAAOH,GAAW,OAGvE,OAAO,SAAC3G,GAEN,IAAM8G,EAAS,oBAAU/C,GAAQ,SAAAnE,GAAK,OAAAA,EAAEI,MAExC,OAAOwG,EAASO,QAAO,SAACC,EAAKL,GAAY,OAAAK,EAAML,EAAQG,KAAS,QAIpEpG,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAM0D,EAAO1D,EAAQ2D,YAAY7D,EAAKhF,MAChC8I,EAAU5D,EAAQI,WAAWsD,EAAKG,QAAQ/B,YAC1CgC,EAAO,oBAAUhE,EAAKgE,MAAM,SAAA5E,GAAK,OAAAc,EAAQI,WAAWlB,MAE1D,OAAO,SAACzC,GAEN,KAAIuD,EAAQiB,kBAAkBxE,GAA9B,CAEA,IAAM+D,EAAS,oBAAUsD,GAAM,SAAA5E,GAAK,OAAAA,EAAEzC,MAItC,OAFAmH,EAAQpD,GAEDA,EAAOR,EAAQiB,qBAI1B9D,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAM+D,EAAc/D,EAAQI,WAAWN,EAAKtE,OAE5C,OAAO,SAACiB,GAAY,OAAAA,EAAQuD,EAAQiB,gBAAkB8C,EAAYtH,OAGpEU,EAAI0C,cAAc,mBAAiB,SAACC,EAAME,GAExC,IAAMgE,EAA0BlE,EAAKiC,YAAY3E,KAAI,SAAAqD,GAAK,OAAAT,EAAQI,WAAWK,MAE7E,OAAO,SAAChE,GAAY,OAAAuH,EAAS5G,KAAI,SAAAK,GAAO,OAAAA,EAAIhB,UAG9CU,EAAI0C,cAAc,oBAAkB,SAACC,EAAME,GAEzC,IAAM9C,EAAwB,oBAAU4C,EAAK5C,OAAO,SAAAuD,GAAK,OAAAT,EAAQI,WAAWK,MAE5E,OAAO,SAAChE,GAAY,2BAAUS,GAAO,SAAAO,GAAO,OAAAA,EAAIhB,UAGlDU,EAAI0C,cAAc,gBAAc,WAAM,wBC/fzB,WAAS1C,GAEtB,IAAM8G,EAAM,SAIZ9G,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,GAAW,gBAAC/D,GACtC,sBAAK+D,EAAOhF,MAAMiB,QAGpBU,EAAI+G,aAAaD,EAAII,WAAW,SAAC7D,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQgF,EAAOhF,MAAMiB,GAE3B,OAAOjB,YAGT2B,EAAI+G,aAAaD,EAAIK,YAAY,SAAC9D,EAAQ9D,GAAU,gBAACD,GACnD,IAAMjB,EAAQgF,EAAOhF,MAAMiB,GACrB4H,EAAY7I,QAElB,GAAI6I,EAAW,CACb,IAAMtH,EAAQP,EAAUC,EAASC,GACjCD,EAAQC,EAAMsG,SAAWxH,EACzBgF,EAAOwC,QAAQvG,GACfK,EAAaL,EAASM,GAGxB,OAAOsH,MAGTlH,EAAI+G,aAAaD,EAAIM,UAAU,SAAC/D,GAAW,gBAAC/D,GAC1C,IAAMyC,EAAIsB,EAAOtB,EAAEzC,GACnB,GAAIyC,QAA+B,OAAOA,EAC1C,IAAMD,EAAIuB,EAAOvB,EAAExC,GACnB,GAAIwC,QAA+B,OAAOA,EAC1C,IAAMrE,EAAI4F,EAAO5F,EAAE6B,GACnB,GAAI7B,QAA+B,OAAOA,EAC1C,IAAMC,EAAI2F,EAAO3F,EAAE4B,GACnB,GAAI5B,QAA+B,OAAOA,EAC1C,IAAM4F,EAAID,EAAOC,EAAEhE,GACnB,OAAIgE,QAAsCA,OAA1C,MAKFtD,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,aAGFU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAAyD,IAAzD,kBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAAyD,IAAzD,kBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,IAAY,MAGzDU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,KAAa,MAG1DU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,IAAY,MAGzDU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,KAAa,MAK1DU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,QAAE+D,EAAOhF,MAAMiB,OAGjBU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,mBAAUuI,SAASC,UAAUzE,EAAOhF,MAAMiB,KAAa,CAAEpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAGpH/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,uBAAM+D,EAAOhF,MAAMiB,KAAa,IAAI4C,SAGtClC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQ8J,WAAW9E,EAAOhF,MAAMiB,IAEtC,OAAO8I,SAAS/J,GAASA,EAAQ,MAGnC2B,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,0BAAS+D,EAAOhF,MAAMiB,QAGxBU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,QCrHZ,WAASU,GAEtB,IAAM8G,EAAM,aAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,aAKFU,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAAwB,EAAWuC,EAAOhF,MAAOiB,OAG3BU,EAAI+G,aAAaD,EAAIhC,KAAK,SAACzB,GAAW,gBAAC/D,GACrC,OAAAkB,EAAM6C,EAAOtB,EAAGzC,IAAYkB,EAAM6C,EAAOvB,EAAGxC,OAG9CU,EAAI+G,aAAaD,EAAI9B,IAAI,SAAC3B,GAAW,gBAAC/D,GACpC,OAAAkB,EAAM6C,EAAOtB,EAAGzC,IAAYkB,EAAM6C,EAAOvB,EAAGxC,OAG9CU,EAAI+G,aAAaD,EAAI2B,KAAK,SAACpF,GAAW,gBAAC/D,GACrC,OAAAkB,EAAM6C,EAAOtB,EAAGzC,KAAakB,EAAM6C,EAAOvB,EAAGxC,OAG/CU,EAAI+G,aAAaD,EAAI4B,KAAK,SAACrF,GAAW,gBAAC/D,GACrC,OAACkB,EAAM6C,EAAOtB,EAAGzC,OAGnBU,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,OAACkB,EAAM6C,EAAOhF,MAAOiB,GAAW,EAAI,IAAMkB,EAAM6C,EAAOa,KAAM5E,GAAW,EAAI,OAK9EU,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,2BAAU+D,EAAOhF,MAAMiB,QAGzBU,EAAI+G,aAAaD,EAAI6B,QAAQ,SAACtF,GAAW,gBAAC/D,GACxC,OAAAkB,EAAM6C,EAAOhF,MAAOiB,GAAS,OAG/BU,EAAI+G,aAAaD,EAAI8B,SAAS,SAACvF,GAAW,gBAAC/D,GACzC,OAACkB,EAAM6C,EAAOhF,MAAOiB,GAAS,OAKhCU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,QAAE+D,EAAOhF,MAAMiB,OAGjBU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,OAAGpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAG9D/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,WAAI4C,SAGNlC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAG1C,OAFc+D,EAAOhF,MAAMiB,GAEZ,EAAI,MAGrBU,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,OAAA+D,EAAOhF,MAAMiB,GAAW,OAAS,YAGnCU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,Q,kpBCzFZ,WAASU,GAEtB,IAAM8G,EAAM,WAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,WAAM,kBACjC,OAAGR,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAK9D/B,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAA0C,EAAYqB,EAAOhF,MAAOiB,OAG5BU,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,OAAAuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAU,OAG5EU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,GAAW,gBAAC/D,GACtC,OAAC,KAAKsC,EAAOyB,EAAOhF,MAAOiB,QAG7BU,EAAI+G,aAAaD,EAAIgC,OAAO,SAACzF,GAAW,gBAAC/D,GAAY,OACnDpB,EAAG6C,EAAQsC,EAAOnF,EAAGoB,EAAS,iBAC9BuC,EAAGd,EAAQsC,EAAOxB,EAAGvC,EAAS,iBAC9BwC,EAAGf,EAAQsC,EAAOvB,EAAGxC,EAAS,iBAC9ByC,EAAGhB,EAAQsC,EAAOtB,EAAGzC,EAAS,sBAGhCU,EAAI+G,aAAaD,EAAI7G,KAAK,SAACoD,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BM,EAAQP,EAAUC,EAASC,GACjCD,EAAQC,EAAMlB,OAASA,EAAMH,EAC7BoB,EAAQC,EAAMwJ,WAAa,IAC3B,IAAM7K,EAAI6C,EAAQsC,EAAOnF,EAAGoB,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAMwD,EAC7BvC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMlH,EAAId,EAAQsC,EAAOxB,EAAGvC,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAMyD,EAC7BxC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMjH,EAAIf,EAAQsC,EAAOvB,EAAGxC,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAM0D,EAC7BzC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMhH,EAAIhB,EAAQsC,EAAOtB,EAAGzC,EAAS,iBAGrC,OAFAK,EAAaL,EAASM,GAEf,CAAE1B,EAAC,EAAE2D,EAAC,EAAEC,EAAC,EAAEC,EAAC,OAGrB/B,EAAI+G,aAAaD,EAAIvD,IAAI,SAACF,EAAQ9D,GAAU,gBAACD,GAC3C,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7B4E,EAAOtC,EAAOyB,EAAOa,KAAM5E,GAC3BM,EAAQP,EAAUC,EAASC,GACjCD,EAAQC,EAAMlB,OAASA,EAAMH,EAC7BoB,EAAQC,EAAM2E,MAAQA,EAAKhG,EAC3BoB,EAAQC,EAAMwJ,WAAa,IAC3B,IAAM7K,EAAI6C,EAAQsC,EAAOnF,EAAGoB,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAMwD,EAC7BvC,EAAQC,EAAM2E,MAAQA,EAAKrC,EAC3BvC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMlH,EAAId,EAAQsC,EAAOxB,EAAGvC,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAMyD,EAC7BxC,EAAQC,EAAM2E,MAAQA,EAAKpC,EAC3BxC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMjH,EAAIf,EAAQsC,EAAOvB,EAAGxC,EAAS,iBACrCA,EAAQC,EAAMlB,OAASA,EAAM0D,EAC7BzC,EAAQC,EAAM2E,MAAQA,EAAKnC,EAC3BzC,EAAQC,EAAMwJ,WAAa,IAC3B,IAAMhH,EAAIhB,EAAQsC,EAAOtB,EAAGzC,EAAS,iBAGrC,OAFAK,EAAaL,EAASM,GAEf,CAAE1B,EAAC,EAAE2D,EAAC,EAAEC,EAAC,EAAEC,EAAC,OAGrB/B,EAAI+G,aAAaD,EAAIkC,OAAO,SAAC3F,GAAW,gBAAC/D,GACvC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAEnC,MAAO,CACLpB,EAAG,yBAAeG,EAAMH,GACxB2D,EAAG,yBAAexD,EAAMwD,GACxBC,EAAG,yBAAezD,EAAMyD,GACxBC,EAAG,yBAAe1D,EAAM0D,QAI5B/B,EAAI+G,aAAaD,EAAImC,KAAK,SAAC5F,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7B4J,EAASzG,EAAeY,EAAO6F,OAAQ5J,GACvC6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAGG,EAAMH,EAAIgL,EAAOhL,EACpB2D,EAAGxD,EAAMwD,EAAIqH,EAAOrH,EACpBC,EAAGzD,EAAMyD,EAAIoH,EAAOpH,EACpBC,EAAGoH,EAAQ9K,EAAM0D,EAAImH,EAAOnH,EAAI1D,EAAM0D,OAI1C/B,EAAI+G,aAAaD,EAAIsC,MAAM,SAAC/F,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7B4J,EAASzG,EAAeY,EAAO6F,OAAQ5J,GACvC+J,EAAQ5G,EAAeY,EAAOiG,YAAahK,GAC3C6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAGG,EAAMH,EAAIgL,EAAOhL,EAAImL,EAAMnL,EAC9B2D,EAAGxD,EAAMwD,EAAIqH,EAAOrH,EAAIwH,EAAMxH,EAC9BC,EAAGzD,EAAMyD,EAAIoH,EAAOpH,EAAIuH,EAAMvH,EAC9BC,EAAGoH,EAAQ9K,EAAM0D,EAAImH,EAAOnH,EAAIsH,EAAMtH,EAAI1D,EAAM0D,OAIpD/B,EAAI+G,aAAaD,EAAI9D,KAAK,SAACK,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BiK,EAAa9G,EAAeY,EAAOkG,WAAYjK,GAC/C6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAGG,EAAMH,EAAIqL,EAAWrL,EACxB2D,EAAGxD,EAAMwD,EAAI0H,EAAW1H,EACxBC,EAAGzD,EAAMyD,EAAIyH,EAAWzH,EACxBC,EAAGoH,EAAQ9K,EAAM0D,EAAIwH,EAAWxH,EAAI1D,EAAM0D,OAI9C/B,EAAI+G,aAAaD,EAAI0C,KAAK,SAACnG,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BmK,EAAahH,EAAeY,EAAOoG,WAAYnK,GAC/C6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAGG,EAAMH,EAAIuL,EAAWvL,EACxB2D,EAAGxD,EAAMwD,EAAI4H,EAAW5H,EACxBC,EAAGzD,EAAMyD,EAAI2H,EAAW3H,EACxBC,EAAGoH,EAAQ9K,EAAM0D,EAAI0H,EAAW1H,EAAI1D,EAAM0D,OAI9C/B,EAAI+G,aAAaD,EAAI4C,KAAK,SAACrG,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BqK,EAAUlH,EAAeY,EAAOsG,QAASrK,GACzC6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAG0L,EAAQvL,EAAMH,EAAGyL,EAAQzL,GAC5B2D,EAAG+H,EAAQvL,EAAMwD,EAAG8H,EAAQ9H,GAC5BC,EAAG8H,EAAQvL,EAAMyD,EAAG6H,EAAQ7H,GAC5BC,EAAGoH,EAAQS,EAAQvL,EAAM0D,EAAG4H,EAAQ5H,GAAK1D,EAAM0D,OAInD/B,EAAI+G,aAAaD,EAAI+C,KAAK,SAACxG,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BqK,EAAUlH,EAAeY,EAAOsG,QAASrK,GACzC6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAGG,EAAMH,EAAIyL,EAAQzL,EACrB2D,EAAGxD,EAAMwD,EAAI8H,EAAQ9H,EACrBC,EAAGzD,EAAMyD,EAAI6H,EAAQ7H,EACrBC,EAAGoH,EAAQ9K,EAAM0D,EAAI4H,EAAQ5H,EAAI1D,EAAM0D,OAI3C/B,EAAI+G,aAAaD,EAAIgD,QAAQ,SAACzG,GAAW,gBAAC/D,GACxC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7ByK,EAAW5I,EAAMkC,EAAOyG,OAAQxK,GAChCwK,EAAS,YAAUE,UAAUD,GAEnC,OAAKD,EAIEA,EAAOG,UAAU5L,GAHf,OAMX2B,EAAI+G,aAAaD,EAAIoD,OAAO,SAAC7G,GAAW,gBAAC/D,GACvC,IAAMjB,EAAQgF,EAAOhF,MAAMiB,GAE3B,OAAO,YAAUuI,SAASC,UAAUzJ,OAGtC2B,EAAI+G,aAAaD,EAAIqD,MAAM,SAAC9G,GAAW,gBAAC/D,GACtC,IAAM4F,EAAQtD,EAAOyB,EAAO6B,MAAO5F,GAC7B6F,EAAMvD,EAAOyB,EAAO8B,IAAK7F,GACzB8K,EAAQrJ,EAAQsC,EAAO+G,MAAO9K,EAAS,GAE7C,MAAO,CACLpB,GAAIiH,EAAIjH,EAAIgH,EAAMhH,GAAKkM,EAAQlF,EAAMhH,EACrC2D,GAAIsD,EAAItD,EAAIqD,EAAMrD,GAAKuI,EAAQlF,EAAMrD,EACrCC,GAAIqD,EAAIrD,EAAIoD,EAAMpD,GAAKsI,EAAQlF,EAAMpD,EACrCC,GAAIoD,EAAIpD,EAAImD,EAAMnD,GAAKqI,EAAQlF,EAAMnD,OAIzC/B,EAAI+G,aAAaD,EAAIuD,SAAS,SAAChH,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BgL,EAASvJ,EAAQsC,EAAOiH,OAAQhL,EAAS,GAE/C,MAAO,CACLpB,EAAGG,EAAMH,GAAK,gBAAgBG,EAAMH,GAAKoM,EACzCzI,EAAGxD,EAAMwD,GAAK,gBAAgBxD,EAAMwD,GAAKyI,EACzCxI,EAAGzD,EAAMyD,GAAK,gBAAgBzD,EAAMyD,GAAKwI,EACzCvI,EAAG1D,EAAM0D,GAAK,gBAAgB1D,EAAM0D,GAAKuI,OAI7CtK,EAAI+G,aAAaD,EAAIyD,QAAQ,SAAClH,GAAW,gBAAC/D,GACxC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7BgL,EAAS,EAAIvJ,EAAQsC,EAAOiH,OAAQhL,EAAS,GAEnD,MAAO,CACLpB,EAAGG,EAAMH,EAAIoM,EACbzI,EAAGxD,EAAMwD,EAAIyI,EACbxI,EAAGzD,EAAMyD,EAAIwI,EACbvI,EAAG1D,EAAM0D,EAAIuI,OAIjBtK,EAAI+G,aAAaD,EAAI0D,OAAO,SAACnH,GAAW,gBAAC/D,GACvC,uBAAcmL,UAAU7I,EAAOyB,EAAOhF,MAAOiB,QAG/CU,EAAI+G,aAAaD,EAAI4D,SAAS,SAACrH,GAAW,gBAAC/D,GACzC,uBAAcqL,QAAQjJ,EAAQ2B,EAAOhF,MAAOiB,QAG9CU,EAAI+G,aAAaD,EAAI8D,WAAW,SAACvH,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAGnC,OAFoB,MAAVjB,EAAMH,EAAuB,MAAVG,EAAMwD,EAAuB,MAAVxD,EAAMyD,GAE3C,oBAGb9B,EAAI+G,aAAaD,EAAI+D,UAAU,SAACxH,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7B4E,EAAOtC,EAAOyB,EAAOa,KAAM5E,GAC3BwL,EAAmB,MAAVzM,EAAMH,EAAuB,MAAVG,EAAMwD,EAAuB,MAAVxD,EAAMyD,EACrDiJ,EAAiB,MAAT7G,EAAKhG,EAAsB,MAATgG,EAAKrC,EAAsB,MAATqC,EAAKpC,EAIvD,OAHWkJ,KAAK1F,IAAIwF,EAAQC,GAGf,MAFFC,KAAKC,IAAIH,EAAQC,GAED,SAG7B/K,EAAI+G,aAAaD,EAAIoE,QAAQ,SAAC7H,GAAW,gBAAC/D,GACxC,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC7B6J,EAAQ3I,EAAM6C,EAAO8F,MAAO7J,GAAS,GAE3C,MAAO,CACLpB,EAAG,gBAAgBG,EAAMH,EACzB2D,EAAG,gBAAgBxD,EAAMwD,EACzBC,EAAG,gBAAgBzD,EAAMyD,EACzBC,EAAGoH,EAAQ,gBAAgB9K,EAAM0D,EAAI1D,EAAM0D,OAI/C/B,EAAI+G,aAAaD,EAAIqE,QAAQ,SAAC9H,GAAW,gBAAC/D,GAClC,mBAGN,MAAO,CAAEpB,EAHD,EAAAA,EAGI2D,EAHD,EAAAA,EAGIC,EAHD,EAAAA,EAGIC,EAFR,qBAKZ/B,EAAI+G,aAAaD,EAAIqC,OAAO,SAAC9F,GAAW,gBAAC/D,GACjC,mBAGN,MAAO,CAAEpB,EAHD,EAAAA,EAGI2D,EAHD,EAAAA,EAGIC,EAHD,EAAAA,EAGIC,EAFRhB,EAAQsC,EAAO8F,MAAO7J,EAAS,sBAK3CU,EAAI+G,aAAaD,EAAIsE,UAAU,SAAC/H,GAAW,gBAAC/D,GAI1C,OAAO+L,EAHOzJ,EAAOyB,EAAOhF,MAAOiB,GACtBsC,EAAOyB,EAAOa,KAAM5E,QAKnCU,EAAI+G,aAAaD,EAAIwE,OAAO,SAACjI,GAAW,gBAAC/D,GAGvC,OAFcsC,EAAOyB,EAAO1F,KAAM2B,OAKpCU,EAAI+G,aAAaD,EAAIyE,SAAS,SAAClI,GAAW,gBAAC/D,G,QACnCjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAC/BkM,EAAsB,GACtBC,GAA2B,E,IAE/B,IAA4B,qBAAW/E,QAAQgF,UAAUC,WAAS,8BAAE,CAAzD,mBAAC,OACJP,EAAWC,EAAKhN,EADN,QAES,IAArBoN,GAA0BL,EAAWK,KACvCD,EAAc,EACdC,EAAkBL,I,iGAItB,OAAOI,MAGTxL,EAAI+G,aAAaD,EAAI8E,OAAO,SAACvI,GAAW,gBAAC/D,GACvC,IAAMuM,EAAMjK,EAAOyB,EAAOwI,IAAKvM,GACzBwM,EAASlK,EAAOyB,EAAOyI,OAAQxM,GAC/ByM,EAAW1I,EAAO9E,KAAKe,GACvB0M,EAAUC,EAAeF,GAE/B,OAAKC,EAIE,CACL9N,EAAG8N,EAAQF,EAAO5N,EAAG2N,EAAI3N,GACzB2D,EAAGmK,EAAQF,EAAOjK,EAAGgK,EAAIhK,GACzBC,EAAGkK,EAAQF,EAAOhK,EAAG+J,EAAI/J,GACzBC,EAAG8J,EAAI9J,GAPA8J,MAaX7L,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,yBAAQ+D,EAAOhF,MAAMiB,QAGvBU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAAmH,IAAnHuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAUyB,EAAQsC,EAAO6I,QAAS5M,EAAS,QAG7GU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAAmH,IAAnHuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAUyB,EAAQsC,EAAO6I,QAAS5M,EAAS,QAG7GU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,OAAAuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAU,GAAK,MAGjFU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,OAAAuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAU,IAAM,MAGlFU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,OAAAuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAU,GAAK,MAGjFU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,OAAAuJ,EAAajH,EAAOyB,EAAOhF,MAAOiB,GAAUsC,EAAOyB,EAAOa,KAAM5E,GAAU,IAAM,MAKlFU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,WAAM,kBACpC,aAGF3H,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIiB,QAAQ,WAAM,kBACjC,WAAI7F,SAGNlC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQuD,EAAOyB,EAAOhF,MAAOiB,GAEnC,OAAkB,IAAVjB,EAAMH,GACA,IAAVG,EAAMwD,IAAa,GACT,IAAVxD,EAAMyD,IAAa,IACT,IAAVzD,EAAM0D,IAAa,OAGzB/B,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,uBAAc6M,UAAUC,QAAQnC,UAAUrI,EAAOyB,EAAOhF,MAAOiB,QAGjEU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,QAK3B,SAASuJ,EAAawD,EAAUC,EAAUJ,GAExC,IAAMhO,EAAI8M,KAAKuB,IAAIF,EAAEnO,EAAIoO,EAAEpO,IAAMgO,EAC3BrK,EAAImJ,KAAKuB,IAAIF,EAAExK,EAAIyK,EAAEzK,IAAMqK,EAC3BpK,EAAIkJ,KAAKuB,IAAIF,EAAEvK,EAAIwK,EAAExK,IAAMoK,EAC3BnK,EAAIiJ,KAAKuB,IAAIF,EAAEtK,EAAIuK,EAAEvK,IAAMmK,EAEjC,OAAOhO,GAAK2D,GAAKC,GAAKC,EAClB,EACCsK,EAAEnO,EAAImO,EAAExK,EAAIwK,EAAEvK,EAAIuK,EAAEtK,GAAMuK,EAAEpO,EAAIoO,EAAEzK,EAAIyK,EAAExK,EAAIwK,EAAEvK,GAGrD,SAAS6H,EAAQ7H,EAAWD,GAE1B,OAAa,IAANA,EAAU,EAAIC,EAAID,EAG3B,SAASuJ,EAAKtJ,EAAUD,GAEtB,OAAOkJ,KAAKuB,IAAIxK,EAAE7D,EAAI4D,EAAE5D,GACtB8M,KAAKuB,IAAIxK,EAAEF,EAAIC,EAAED,GACjBmJ,KAAKuB,IAAIxK,EAAED,EAAIA,EAAEA,GACjBkJ,KAAKuB,IAAIxK,EAAEA,EAAID,EAAEC,GAGrB,SAASyH,EAAIzH,EAAWD,GAEtB,OAAQC,EAAID,EAAI,iBAAkB,EAGpC,SAAS4H,EAAI3H,EAAWD,GAEtB,OAAa,IAANA,EAAU,IAAMC,GAAK,GAAKA,GAAKD,EAGxC,SAAS0K,EAAIzK,GAEX,OAAO,gBAAgBA,EAGzB,IAAMkK,EAAmE,CACvEQ,SAAY,SAAC1K,EAAGD,GAAM,OAAA0H,EAAIzH,EAAGD,IAC7B4K,OAAY,SAAC3K,EAAGD,GAAM,OAAA0K,EAAIhD,EAAIgD,EAAIzK,GAAIyK,EAAI1K,MAC1C6K,QAAY,SAAC5K,EAAGD,GAAM,OAAAC,EAAI,IAAM,EAAIyH,EAAIzH,EAAGD,GAAK0K,EAAI,EAAIhD,EAAIgD,EAAIzK,GAAIyK,EAAI1K,MACxE8K,KAAY,SAAC7K,EAAGD,GAAM,OAAAA,EAAI,IAAM,EAAI0H,EAAIzH,EAAGD,GAAK0K,EAAI,EAAIhD,EAAIgD,EAAIzK,GAAIyK,EAAI1K,MACxE+K,KAAY,SAAC9K,EAAGD,GAAM,OAAA0H,EAAIgD,EAAI,EAAI1K,GAAI0H,EAAIzH,EAAGA,IAAM,EAAIyH,EAAI1H,EAAGC,IAC9D+K,MAAY,SAAC/K,EAAGD,GAAM,OAAA4H,EAAI3H,EAAGyK,EAAI1K,KACjCiL,KAAY,SAAChL,EAAGD,GAAM,OAAA4H,EAAI8C,EAAI1K,GAAIC,IAClCiL,OAAY,SAACjL,EAAGD,GAAM,OAAAC,IAAMD,EAAI,gBAAgB4H,EAAI3H,EAAGD,IACvDmL,SAAY,SAAClL,EAAGD,GAAM,gCAAeC,EAAID,IACzCkB,IAAY,SAACjB,EAAGD,GAAM,gCAAeC,EAAID,IACzCoL,KAAY,SAACnL,EAAGD,GAAM,gCAAeA,EAAIC,IACzCwI,OAAY,SAACxI,EAAGD,GAAM,OAAAkJ,KAAKC,IAAIlJ,EAAGD,IAClCuI,QAAY,SAACtI,EAAGD,GAAM,OAAAkJ,KAAK1F,IAAIvD,EAAGD,KCtcrB,WAAS9B,GAEtB,IAAM8G,EAAM,UAMZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,WAAI4C,SAGNlC,EAAI+G,aAAaD,EAAIqG,KAAK,SAAC9J,GAAW,gBAAC/D,GACrC,WAAI4C,SAGNlC,EAAI+G,aAAaD,EAAIsG,OAAO,SAAC/J,GAAW,gBAAC/D,GACvC,iBAAQ+N,IAAI,IAAInL,UAGlBlC,EAAI+G,aAAaD,EAAIwG,UAAU,SAACjK,GAAW,gBAAC/D,GAC1C,wBAAO,iBAAO,IAAI4C,KAAQ,UAAQmL,MAAM,SAAA3P,GAAK,aAAI2P,IAAI3P,EAAG,UAG1DsC,EAAI+G,aAAaD,EAAIyG,WAAW,SAAClK,GAAW,gBAAC/D,GAC3C,wBAAO,iBAAO,IAAI4C,KAAQ,UAAQmL,MAAM,SAAA3P,GAAK,aAAI2P,IAAI3P,GAAI,UAK3DsC,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAA6C,EAAWkB,EAAOhF,MAAOiB,OAG3BU,EAAI+G,aAAaD,EAAIoD,OAAO,SAAC7G,GAAW,gBAAC/D,GACvC,OAAAkB,EAAM6C,EAAOmK,WAAYlO,GAAS,GAC9B,IAAI,WAAS,CAAEkO,YAAY,IAAQ1F,UAAUzE,EAAOhF,MAAMiB,IAC1D,WAASuI,SAASC,UAAUzE,EAAOhF,MAAMiB,QAG/CU,EAAI+G,aAAaD,EAAI2G,UAAU,SAACpK,GAAW,gBAAC/D,GAC1C,kBAASuI,SAASC,UAAU3G,EAAMkC,EAAOhF,MAAOiB,QAGlDU,EAAI+G,aAAaD,EAAI4G,eAAe,SAACrK,GAAW,gBAAC/D,GAC/C,WAAI4C,KAAKnB,EAAQsC,EAAOhF,MAAOiB,EAAS4C,KAAKiL,YAG/CnN,EAAI+G,aAAaD,EAAI6G,sBAAsB,SAACtK,GAAW,gBAAC/D,GACtD,WAAI4C,KA7CoB,IA6CfnB,EAAQsC,EAAOhF,MAAOiB,EAAS4C,KAAKiL,MA7CrB,UAgD1BnN,EAAI+G,aAAaD,EAAImE,KAAK,SAAC5H,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5B4E,EAAOjC,EAAMoB,EAAOa,KAAM5E,GAEhC,OAAOjB,EAAMuP,UAAY1J,EAAK0J,UAAYvP,EAAQ6F,MAGpDlE,EAAI+G,aAAaD,EAAIxB,KAAK,SAACjC,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5B4E,EAAOjC,EAAMoB,EAAOa,KAAM5E,GAEhC,OAAOjB,EAAMuP,UAAY1J,EAAK0J,UAAYvP,EAAQ6F,MAGpDlE,EAAI+G,aAAaD,EAAI7I,KAAK,SAACoF,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5BG,EAAO0B,EAAMkC,EAAOtE,SAAUO,EAAS,aAE7C,OAAOG,KAAQ,UAAU,UAAQA,GAAMpB,IAAU,MAGnD2B,EAAI+G,aAAaD,EAAI+G,KAAK,SAACxK,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5BG,EAAO0B,EAAMkC,EAAOtE,SAAUO,EAAS,aACvCwO,EAAS/M,EAAQsC,EAAOwK,IAAKvO,EAAS,GAE5C,OAAOG,KAAQ,UAAU,UAAQA,GAAMpB,EAAOyP,GAAUzP,MAG1D2B,EAAI+G,aAAaD,EAAImC,KAAK,SAAC5F,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UACnCgL,EAASvJ,EAAQsC,EAAOiH,OAAQhL,EAAS,GAE/C,OAAOyO,KAAQ,MAAM,MAAIA,GAAM1P,EAAOiM,GAAUjM,MAGlD2B,EAAI+G,aAAaD,EAAI9D,KAAK,SAACK,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UACnCgL,EAASvJ,EAAQsC,EAAOiH,OAAQhL,EAAS,GAE/C,OAAOyO,KAAQ,MAAM,MAAIA,GAAM1P,GAAQiM,GAAUjM,MAGnD2B,EAAI+G,aAAaD,EAAIkH,SAAS,SAAC3K,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,OAEzC,OAAOyO,KAAQ,UAAU,iBAAO1P,EAAO,UAAQ0P,IAAS1P,MAG1D2B,EAAI+G,aAAaD,EAAImH,OAAO,SAAC5K,GAAW,gBAAC/D,GACvC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,OAEzC,OAAOyO,KAAQ,QAAQ,iBAAO1P,EAAO,QAAM0P,IAAS1P,MAGtD2B,EAAI+G,aAAaD,EAAIoH,aAAa,SAAC7K,GAAW,gBAAC/D,GAC7C,gCAAe2C,EAAMoB,EAAOhF,MAAOiB,QAGrCU,EAAI+G,aAAaD,EAAIqH,YAAY,SAAC9K,GAAW,gBAAC/D,GAC5C,+BAAc2C,EAAMoB,EAAOhF,MAAOiB,QAGpCU,EAAI+G,aAAaD,EAAIsH,aAAa,SAAC/K,GAAW,gBAAC/D,GAC7C,gCAAe2C,EAAMoB,EAAOhF,MAAOiB,QAGrCU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,GAAW,gBAAC/D,GACtC,WAAI4C,KAAKD,EAAMoB,EAAOhF,MAAOiB,GAAS+O,eAGxCrO,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5B4E,EAAOjC,EAAMoB,EAAOa,KAAM5E,GAC1ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UAEzC,OAAOyO,KAAQ,UAAU,uBAAa1P,EAAO6F,EAAM6J,GAAQ,MAG7D/N,EAAI+G,aAAaD,EAAIoG,MAAM,SAAC7J,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5B4E,EAAOjC,EAAMoB,EAAOa,KAAM5E,GAC1ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UACnCgP,EAAW9N,EAAM6C,EAAOiL,SAAUhP,GAAS,GAC3CiP,EAASpN,EAAMkC,EAAOkL,OAAQjP,EAAS,QAE7C,KAAMyO,KAAQ,QAAWQ,KAAU,aAEjC,OAAOvN,OAAOC,IAGhB,IAAMqJ,EAAS,YAAUiE,GAAS,OAAKR,GAAM1P,EAAO6F,IAEpD,OAAOoK,EAAWtD,KAAKuB,IAAIjC,GAAUA,MAGvCtK,EAAI+G,aAAaD,EAAI0H,gBAAgB,SAACnL,GAAW,gBAAC/D,GAChD,+BAAc2C,EAAMoB,EAAOhF,MAAOiB,QAGpCU,EAAI+G,aAAaD,EAAI2H,QAAQ,SAACpL,GAAW,gBAAC/D,GACxC,oBAAWwK,OAAO3I,EAAMkC,EAAOyG,OAAQxK,GAAU,CAAC2C,EAAMoB,EAAOhF,MAAOiB,GAAU,sBAGlFU,EAAI+G,aAAaD,EAAI4H,WAAW,SAACrL,GAAW,gBAAC/D,GAC3C,OAAA2C,EAAMoB,EAAOhF,MAAOiB,GAASqP,kBAK/B3O,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,wBAAO+D,EAAOhF,MAAMiB,QAGtBU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,EAAQ9D,GAAU,gBAACD,GAChD,OAAyD,IAAzDU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,OAG9CU,EAAI+G,aAAaD,EAAI+H,UAAU,SAACxL,EAAQ9D,GAAU,gBAACD,GACjD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIgI,iBAAiB,SAACzL,EAAQ9D,GAAU,gBAACD,GACxD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAG1DU,EAAI+G,aAAaD,EAAIiI,SAAS,SAAC1L,EAAQ9D,GAAU,gBAACD,GAChD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIkI,gBAAgB,SAAC3L,EAAQ9D,GAAU,gBAACD,GACvD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAG1DU,EAAI+G,aAAaD,EAAImI,WAAW,SAAC5L,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5B4F,EAAQjD,EAAMoB,EAAO6B,MAAO5F,GAC5B6F,EAAMlD,EAAMoB,EAAO8B,IAAK7F,GACxByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UACnC4P,EAAiB1O,EAAM6C,EAAO6L,eAAgB5P,GAAS,GACvD6P,EAAe3O,EAAM6C,EAAO8L,aAAc7P,GAAS,GAEnD8P,EAAe,uBAAa/Q,EAAO6G,EAAO6I,GAC1CsB,EAAa,uBAAahR,EAAO8G,EAAK4I,GAK5C,OAAOqB,IAHaF,EAAiB,EAAI,IAGHG,IAFpBF,EAAe,GAAK,OAKxCnP,EAAI+G,aAAaD,EAAIwI,WAAW,SAACjM,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UAEzC,OAAOyO,KAAQ,WACX,iBAAO1P,EAAO,UAAQ0P,IAAOM,YAAchQ,EAAMgQ,cAIvDrO,EAAI+G,aAAaD,EAAIyI,SAAS,SAAClM,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ4D,EAAMoB,EAAOhF,MAAOiB,GAC5ByO,EAAO5M,EAAMkC,EAAO0K,KAAMzO,EAAS,UAEzC,OAAOyO,KAAQ,SACX,iBAAO1P,EAAO,QAAM0P,IAAOM,YAAchQ,EAAMgQ,cAIrDrO,EAAI+G,aAAaD,EAAI0I,OAAO,SAACnM,GAAW,gBAAC/D,GACvC,sCAAqB2C,EAAMoB,EAAOhF,MAAOiB,QAG3CU,EAAI+G,aAAaD,EAAI2I,YAAY,SAACpM,GAAW,gBAAC/D,GAC5C,4BAAW2C,EAAMoB,EAAOhF,MAAOiB,QAKjCU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,aAGFU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,OAAGpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAG9D/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,uBAAM+D,EAAOhF,MAAMiB,KAAa,IAAI4C,SAGtClC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,OAAA2C,EAAMoB,EAAOhF,MAAOiB,GAAS+O,cAG/BrO,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,OAAA+D,EAAOhF,MAAMiB,GAAW,OAG1BU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,Q,yKC7QZ,WAASU,GAEtB,IAAM8G,EAAM,UAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,aAKFU,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAAgC,EAAW+B,EAAOhF,MAAOiB,OAG3BU,EAAI+G,aAAaD,EAAIgC,OAAO,SAACzF,EAAQ9D,GAAU,gBAACD,GAC9C,IAAMT,EAAIkC,EAAQsC,EAAOqM,MAAOpQ,GAC1BqQ,EAAc,GAEpB,GAAI9Q,GAAK,EAEP,OAAO8Q,EAGT,IAAM/P,EAAQP,EAAUC,EAASC,GAEjC,GAAIiB,EAAM6C,EAAOuM,SAAUtQ,GAAS,GACpC,CACEA,EAAQC,EAAM2G,OAAS,EACvB5G,EAAQC,EAAMa,WAAQP,EACtBP,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMmQ,OAAS7Q,EAIvB,IAFA,IAAMgR,EAAOxM,EAAOwM,KAAKvQ,GAEhBlC,EAAI,EAAGA,EAAIyB,EAAGzB,IAErBuS,EAAKvS,GAAKyS,MAKZ,KAAIzP,OAAI,EAER,IAAShD,EAAI,EAAGA,EAAIyB,EAAGzB,IACvB,CACEkC,EAAQC,EAAM2G,OAAS9I,EACvBkC,EAAQC,EAAMa,MAAQA,EACtBd,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMmQ,OAAS7Q,EAIvBuB,EAFMyP,EAAOxM,EAAOwM,KAAKvQ,GAGzBqQ,EAAKG,KAAKD,IAMd,OAFAlQ,EAAaL,EAASM,GAEf+P,MAGT3P,EAAI+G,aAAaD,EAAI7I,KAAK,SAACoF,GAAW,gBAAC/D,GACrC,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAASyB,EAAQsC,EAAO6C,MAAO5G,QAGpDU,EAAI+G,aAAaD,EAAI+G,KAAK,SAACxK,GAAW,gBAAC/D,GACrC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1B4G,EAAQnF,EAAQsC,EAAO6C,MAAO5G,GAC9ByQ,EAAOJ,EAAKzJ,GAGlB,OAFAyJ,EAAKzJ,GAAS7C,EAAOhF,MAAMiB,GAEpByQ,MAGT/P,EAAI+G,aAAaD,EAAImC,KAAK,SAAC5F,GAAW,gBAAC/D,GACrC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BuQ,EAAOxP,EAAUgD,EAAOwM,KAAMvQ,GAKpC,YAJaO,IAATgQ,GACFF,EAAKG,KAAKD,GAGLF,MAGT3P,EAAI+G,aAAaD,EAAIkJ,UAAU,SAAC3M,GAAW,gBAAC/D,GAC1C,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BuQ,EAAOxP,EAAUgD,EAAOwM,KAAMvQ,GAKpC,YAJaO,IAATgQ,GACFF,EAAKM,QAAQJ,GAGRF,MAGT3P,EAAI+G,aAAaD,EAAIoJ,SAAS,SAAC7M,GAAW,gBAAC/D,GACzC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BuQ,EAAOxP,EAAUgD,EAAOwM,KAAMvQ,GAKpC,YAJaO,IAATgQ,GACFF,EAAKG,KAAKD,GAGLF,MAGT3P,EAAI+G,aAAaD,EAAIqJ,QAAQ,SAAC9M,GAAW,gBAAC/D,GACxC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BuQ,EAAOxP,EAAUgD,EAAOwM,KAAMvQ,GAC9B4G,EAAQnF,EAAQsC,EAAO6C,MAAO5G,EAAS,GAK7C,YAJaO,IAATgQ,GACFF,EAAKS,OAAOlK,EAAO,EAAG2J,GAGjBF,MAGT3P,EAAI+G,aAAaD,EAAIuJ,QAAQ,SAAChN,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAgR,GACEjP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACA+D,EACA9D,EACA8D,EAAOwM,KAAKvQ,IACZ,SAAAT,GAAK,YACL,SAAAA,GAAK,OAAAA,KACL,SAAC0R,EAAGnT,EAAGuS,GAAS,OAACA,EAAKS,OAAOhT,EAAG,GAAIA,KACpC,WAAM,OAAC,SAIX4C,EAAI+G,aAAaD,EAAI0J,aAAa,SAACnN,EAAQ9D,GAAU,gBAACD,GACpD,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAASmR,YAG9BzQ,EAAI+G,aAAaD,EAAI4J,YAAY,SAACrN,EAAQ9D,GAAU,gBAACD,GACnD,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAASqR,UAG9B3Q,EAAI+G,aAAaD,EAAI8J,UAAU,SAACvN,EAAQ9D,GAAU,gBAACD,GACjD,IAEIuQ,EAFEF,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1B4G,EAAQnF,EAAQsC,EAAO6C,MAAO5G,GAAU,GAO9C,OALI4G,GAAS,GAAKA,EAAQyJ,EAAKzM,SAC7B2M,EAAOF,EAAKzJ,GACZyJ,EAAKS,OAAOlK,EAAO,IAGd2J,MAGT7P,EAAI+G,aAAaD,EAAI+J,aAAa,SAACxN,EAAQ9D,GAAU,gBAACD,GACpD,OAAAwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,OAAAA,EAAI,KACT,SAAAA,GAAK,OAAC,IACN,IACA,SAACgR,EAAM3J,EAAOyJ,EAAMoB,GAMlB,OALI1N,EAAO2N,MAAM1R,KACfyR,EAAQjB,KAAKD,GACbF,EAAKS,OAAOlK,EAAO,IAGd6K,SAKb/Q,EAAI+G,aAAaD,EAAImK,UAAU,SAAC5N,EAAQ9D,GAAU,gBAACD,GACjD,OAAAgR,GACEjP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACA+D,EACA9D,EACA8D,EAAOwM,KAAKvQ,IACZ,SAAAT,GAAK,YACL,SAAAA,GAAK,OAAAA,KACL,WAAM,YACN,WAAM,gBAIVmB,EAAI+G,aAAaD,EAAIoK,MAAM,SAAC7N,EAAQ9D,GAAU,gBAACD,GAC7C,IAAM6R,EAAU3Q,EAAM6C,EAAO8N,QAAS7R,GAChCqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BT,EAAI8Q,EAAKzM,OACTgC,EAAQnE,EAAQsC,EAAO6B,MAAO5F,EAAS6R,EAAUtS,EAAI,EAAI,GACzDuS,EAAepG,KAAK1F,IAAI,EAAG0F,KAAKC,IAAIpM,EAAI,EAAGqG,IAC3CC,EAAMgM,GAAW,EAAItS,EAG3B,GAAIsS,IAFcC,EAAejM,EAMjC,OAAO2L,GACLnB,EACArQ,EACAC,GACA,WAAM,OAAA2F,KACN,WAAM,OAAAC,SACNtF,GACA,SAACgQ,EAAM3J,GACL,GAAI7C,EAAO2N,MAAM1R,GACf,OAAOuQ,KAGX,OAIJ7P,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,EAAQ9D,GAAU,gBAACD,GAC7C,OAAA+D,EAAOgO,SACHC,GACEjQ,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAoQ,GAAQ,OAAAA,EAAK1P,KAAI,SAAA4P,GAGf,OAFAvQ,EAAQC,EAAM0H,MAAQ4I,EAEfxM,EAAOgO,SAAS/R,SAG3B+B,EAAMgC,EAAOsM,KAAMrQ,GAASiS,YAGlCvR,EAAI+G,aAAaD,EAAIqK,SAAS,SAAC9N,GAAW,gBAAC/D,GAIzC,IAHA,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BkS,EAAOxG,KAAKyG,MAAM9B,EAAKzM,OAAS,GAE7B9F,EAAI,EAAGsU,EAAI/B,EAAKzM,OAAS,EAAG9F,EAAIoU,EAAMpU,IAAKsU,IAClDC,EAAKhC,EAAMvS,EAAGsU,GAGhB,OAAO/B,MAGT3P,EAAI+G,aAAaD,EAAI8K,SAAS,SAACvO,EAAQ9D,GAAU,gBAACD,G,QAC1CqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BsS,EAAUvQ,EAAMgC,EAAOuO,QAAStS,G,IAEtC,IAAmB,QAAAsS,GAAO,8BAC1B,CADK,IAAM/B,EAAI,QAEbS,GAAkBX,EAAMrQ,EAAS+D,EAAQ9D,EAAOsQ,GAAM,SAAAhR,GAAK,YAAG,SAAAA,GAAK,OAAAA,KAAG,SAAC0R,EAAGsB,GAAM,OAAClC,EAAKS,OAAOyB,EAAG,IAAI,KAAO,WAAM,a,iGAGnH,OAAOlC,MAGT3P,EAAI+G,aAAaD,EAAIgL,SAAS,SAACzO,EAAQ9D,GAAU,gBAACD,G,QAC1CqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BwS,EAAUzQ,EAAMgC,EAAOyO,QAASxS,GAChCyS,EAAqB,G,IAE3B,IAAmB,QAAAD,GAAO,8BAC1B,CADK,IAAMjC,EAAI,QAETS,GAAkBX,EAAMrQ,EAAS+D,EAAQ9D,EAAOsQ,GAAM,SAAAhR,GAAK,YAAG,SAAAA,GAAK,OAAAA,KAAG,WAAM,YAAM,WAAM,aAE1FkT,EAAYjC,KAAKD,I,iGAIrB,OAAOkC,MAGT/R,EAAI+G,aAAaD,EAAIkL,MAAM,SAAC3O,EAAQ9D,GAAU,gBAACD,GAC7C,OAAAgS,GACEjQ,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAoQ,GASE,OARAA,EAAKqC,MAAK,SAAC3T,EAAO6F,GAKhB,OAJA5E,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAM2E,MAAQA,EAEfnD,EAAQsC,EAAO4O,QAAS3S,EAAS,MAGnCqQ,SAKb3P,EAAI+G,aAAaD,EAAIoL,SAAS,SAAC7O,GAAW,gBAAC/D,GAKzC,IAJA,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC5B6S,EAAQpR,EAAQsC,EAAO8O,MAAO7S,EAAS,GACrCT,EAAI8Q,EAAKzM,SAENiP,GAAS,GAChB,IAAK,IAAI/U,EAAI,EAAGA,EAAIyB,EAAGzB,IACrBuU,EAAKhC,EAAMvS,EAAG4N,KAAKyG,MAAMzG,KAAKoH,SAAWvT,IAI7C,OAAO8Q,MAGT3P,EAAI+G,aAAaD,EAAIuL,QAAQ,SAAChP,EAAQ9D,GAAU,gBAACD,GAK/C,IAJA,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BgT,EAAO,GACPD,EAAS,G,WAENjV,GACP,GAAIkV,EAAKlV,G,iBAIT,IAAMyS,EAAOF,EAAKvS,GACHkT,GAAkBX,EAAMrQ,EAAS+D,EAAQ9D,EAAOsQ,GAAM,SAAAhR,GAAK,OAAAzB,EAAI,KAAG,SAAAyB,GAAK,OAAAA,KAAG,SAAC0R,EAAGsB,GAAM,OAAAS,EAAKT,IAAK,KAAM,WAAM,aAGvHQ,EAAOvC,KAAKD,IATPzS,EAAI,EAAGA,EAAIuS,EAAKzM,OAAS,EAAG9F,I,EAA5BA,GAaT,OAAOiV,MAGTrS,EAAI+G,aAAaD,EAAIyL,YAAY,SAAClP,EAAQ9D,GAAU,gBAACD,GAMnD,IALA,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BkT,EAAOhS,EAAM6C,EAAOmP,KAAMlT,GAAS,GACnCgT,EAAO,GACPC,EAAa,G,WAEVnV,GAEP,IAAMyS,EAAOF,EAAKvS,GAElB,GAAIkV,EAAKlV,GAAI,CACX,GAAIoV,E,iBAGFD,EAAWzC,KAAKD,GAILS,GAAkBX,EAAMrQ,EAAS+D,EAAQ9D,EAAOsQ,GAAM,SAAAhR,GAAK,OAAAzB,EAAI,KAAG,SAAAyB,GAAK,OAAAA,KAAG,SAAC0R,EAAGsB,GAAM,OAAAS,EAAKT,IAAK,KAAM,WAAM,aAGvHU,EAAWzC,KAAKD,IAfXzS,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,I,EAAxBA,GAmBT,OAAOmV,MAGTvS,EAAI+G,aAAaD,EAAI2L,MAAM,SAACpP,GAAW,gBAAC/D,GACtC,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAASiS,MAAM,EAAGxQ,EAAQsC,EAAOqM,MAAOpQ,QAG7DU,EAAI+G,aAAaD,EAAIwL,MAAM,SAACjP,GAAW,gBAAC/D,GACtC,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAASiS,MAAMxQ,EAAQsC,EAAOqM,MAAOpQ,QAG1DU,EAAI+G,aAAaD,EAAI4L,MAAM,SAACrP,GAAW,gBAAC/D,GACtC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BoQ,EAAQ3O,EAAQsC,EAAOqM,MAAOpQ,GAEpC,OAAOqQ,EAAK4B,MAAM,EAAG5B,EAAKzM,OAASwM,OAGrC1P,EAAI+G,aAAaD,EAAI6L,QAAQ,SAACtP,GAAW,gBAAC/D,GACxC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BqT,EAAStR,EAAMgC,EAAOsP,OAAQrT,GAEpC,OAAOqQ,EAAKiD,OAAOD,OAGrB3S,EAAI+G,aAAaD,EAAI+L,SAAS,SAACxP,GAAW,gBAAC/D,GACzC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAGhC,OAFgB+B,EAAMgC,EAAOwP,QAASvT,GAEvBsT,OAAOjD,OAGxB3P,EAAI+G,aAAaD,EAAIgM,SAAS,SAACzP,EAAQ9D,GAAU,gBAACD,GAChD,OAAAgR,GACEjP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACA+D,EACA9D,EACA8D,EAAOwM,KAAKvQ,IACZ,SAAAT,GAAK,OAAAmM,KAAK1F,IAAI,EAAG0F,KAAKC,IAAIpM,EAAGkC,EAAQsC,EAAO6B,MAAO5F,EAAS,QAC5D,SAAAT,GAAK,OAAAA,KACL,SAAC0R,EAAGnT,GAAM,OAAAA,KACV,WAAM,OAAC,SAIX4C,EAAI+G,aAAaD,EAAIiM,aAAa,SAAC1P,EAAQ9D,GAAU,gBAACD,GACpD,OAAAgR,GACEjP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACA+D,EACA9D,EACA8D,EAAOwM,KAAKvQ,IACZ,SAAAT,GAAK,OAAAmM,KAAK1F,IAAI,EAAG0F,KAAKC,IAAIpM,EAAI,EAAGkC,EAAQsC,EAAO6B,MAAO5F,EAAST,EAAI,QACpE,SAAAA,GAAK,OAAC,KACN,SAAC0R,EAAGnT,GAAM,OAAAA,KACV,WAAM,OAAC,SAIX4C,EAAI+G,aAAaD,EAAIkM,WAAW,SAAC3P,EAAQ9D,GAAU,gBAACD,GAClD,IAAM6R,EAAU3Q,EAAM6C,EAAO8N,QAAS7R,GAChCqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BT,EAAI8Q,EAAKzM,OACTgC,EAAQnE,EAAQsC,EAAO6B,MAAO5F,EAAS6R,EAAUtS,EAAI,EAAI,GACzDuS,EAAepG,KAAK1F,IAAI,EAAG0F,KAAKC,IAAIpM,EAAI,EAAGqG,IAC3CC,EAAMgM,GAAW,EAAItS,EAG3B,OAAIsS,IAFcC,EAAejM,GAGvB,EAGH2L,GACLnB,EACArQ,EACAC,GACA,WAAM,OAAA2F,KACN,WAAM,OAAAC,KACL,GACD,SAAC0K,EAAM3J,GACL,GAAI7C,EAAO2N,MAAM1R,GACf,OAAO4G,KAGX,OAIJlG,EAAI+G,aAAaD,EAAI1G,MAAM,SAACiD,GAAW,gBAAC/D,GACtC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAEhC,OAAOqQ,EAAKA,EAAKzM,OAAS,OAG5BlD,EAAI+G,aAAaD,EAAImM,OAAO,SAAC5P,GAAW,gBAAC/D,GACvC,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAAS,OAG9BU,EAAI+G,aAAaD,EAAI4I,OAAO,SAACrM,GAAW,gBAAC/D,GACvC,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAAS4D,WAG9BlD,EAAI+G,aAAaD,EAAIoM,YAAY,SAAC7P,GAAW,gBAAC/D,GAC5C,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1BT,EAAI8Q,EAAKzM,OACTwM,EAAQ1E,KAAKC,IAAIlK,EAAQsC,EAAOqM,MAAOpQ,EAAS,GAAIT,GAE1D,GAAI6Q,IAAU7Q,EAEZ,OAAO8Q,EAAK4B,QAMd,IAHA,IAAM4B,EAAQ,GACRf,EAAS,GAERA,EAAOlP,OAASwM,GACvB,CACE,IAAMtS,EAAI4N,KAAKyG,MAAMzG,KAAKoH,SAAWvT,GAEhCsU,EAAM/V,KAETgV,EAAOtC,KAAKH,EAAKvS,IACjB+V,EAAM/V,IAAK,GAIf,OAAOgV,MAGTpS,EAAI+G,aAAaD,EAAIsL,QAAQ,SAAC/O,GAAW,gBAAC/D,GACxC,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAEhC,OAAOqQ,EAAK3E,KAAKyG,MAAMzG,KAAKoH,SAAWzC,EAAKzM,aAK9ClD,EAAI+G,aAAaD,EAAIsM,MAAM,SAAC/P,EAAQ9D,GAAU,gBAACD,GAC7C,OAAA6B,EAAMkC,EAAOgQ,OAAQ/T,GACrBwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACL,IACA,SAACgR,EAAM3J,EAAOyJ,EAAM2D,GAAQ,OAC1BA,EACIA,EACEnS,EAAMkC,EAAOkQ,UAAWjU,EAAS,MACjC6B,EAAMkC,EAAOoL,OAAQnP,EAASuQ,GAChCyD,EACEnS,EAAMkC,EAAOoL,OAAQnP,EAASuQ,MAGxC1O,EAAMkC,EAAOmQ,OAAQlU,OAGvBU,EAAI+G,aAAaD,EAAI2M,MAAM,SAACpQ,EAAQ9D,GAAU,gBAACD,GAC7C,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1B6R,EAAU3Q,EAAM6C,EAAO8N,QAAS7R,GAAS,GAS/C,OAPAwR,GAAoBnB,EAAMrQ,EAASC,GACjC,SAAAV,GAAK,OAAAsS,EAAUtS,EAAI,EAAI,KACvB,SAAAA,GAAK,OAAAsS,GAAU,EAAQtS,SACvBgB,GACA,WAAM,OAAAwD,EAAOoQ,KAAKnU,MAGbqQ,MAGT3P,EAAI+G,aAAaD,EAAI4M,QAAQ,SAACrQ,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACL,IACA,SAACgR,EAAM3J,EAAOyJ,EAAMjL,GAKlB,OAJIrB,EAAOqQ,OAAOpU,IAChBoF,EAAQoL,KAAKD,GAGRnL,SAKb1E,EAAI+G,aAAaD,EAAI4B,KAAK,SAACrF,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACL,IACA,SAACgR,EAAM3J,EAAOyJ,EAAMjL,GAKlB,OAJKrB,EAAOqF,IAAIpJ,IACdoF,EAAQoL,KAAKD,GAGRnL,SAKb1E,EAAI+G,aAAaD,EAAI7G,KAAK,SAACoD,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACL,IACA,SAACgR,EAAM3J,EAAOyJ,EAAMgE,GAGlB,OAFAA,EAAO7D,KAAKzM,EAAOuQ,UAAUtU,IAEtBqU,SAKb3T,EAAI+G,aAAaD,EAAId,OAAO,SAAC3C,EAAQ9D,GAAU,gBAACD,GAC9C,OAAAwR,GACEzP,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,GACA,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACL,CAAEkG,KAAM,GAAI8O,KAAM,KAClB,SAAChE,EAAM3J,EAAOyJ,EAAMzP,GAOlB,OANImD,EAAO0B,KAAKzF,GACdY,EAAO6E,KAAK+K,KAAKD,GAEjB3P,EAAO2T,KAAK/D,KAAKD,GAGZ3P,SAKbF,EAAI+G,aAAaD,EAAIT,QAAQ,SAAChD,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAwR,GAAoBzP,EAAMgC,EAAOsM,KAAMrQ,GAAUA,EAASC,GACxD,SAAAV,GAAK,YACL,SAAAA,GAAK,OAAAA,IACLwE,EAAOyQ,QAAQxU,IACf,SAACuQ,EAAM3J,EAAOyJ,EAAMoE,GAGlB,OAFAzU,EAAQC,EAAMwU,SAAWA,EAElB1Q,EAAOgD,OAAO/G,UAK3BU,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMqQ,EAAOtO,EAAMgC,EAAOhF,MAAOiB,GAC3B4E,EAAO7C,EAAMgC,EAAOa,KAAM5E,GAEhC,GAAIqQ,EAAKzM,SAAWgB,EAAKhB,OAEvB,OAAOyM,EAAKzM,OAASgB,EAAKhB,OAG5B,IAAI8Q,EAAO,EAAGC,EAAO,EAerB,OAbA3C,GAAW3B,EAAMrQ,EAASC,GAAO,WAC/B,IAAK,IAAInC,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IAAK,CACpCkC,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMlB,OAASsR,EAAKvS,GAC5BkC,EAAQC,EAAM2E,MAAQA,EAAK9G,GAE3B,IAAMM,EAAIqD,EAAQsC,EAAO4O,QAAS3S,EAAS,GAEvC5B,EAAI,EAAGsW,IACFtW,EAAI,GAAGuW,QAIb,qBAAWD,EAAMC,OAG1BjU,EAAI+G,aAAaD,EAAIoN,OAAO,SAAC7Q,EAAQ9D,GAAU,gBAACD,GAC9C,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAEhC,OAAOgS,GAAW3B,EAAMrQ,EAASC,GAAO,WAMtC,IAHA,IAAMU,EAAM,IAAIuB,IACV2S,EAAqB,GAElB/W,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IAAK,CACpC,IAAMiB,EAAQsR,EAAKvS,GAEnBkC,EAAQC,EAAM2G,OAAS9I,EACvBkC,EAAQC,EAAMsQ,MAAQxR,EACtBiB,EAAQC,EAAMoQ,MAAQA,EAEtB,IAAMyE,EAAK/Q,EAAO+Q,GAAG9U,GACf+U,EAAWpU,EAAIhC,IAAImW,GACnBE,EAAWjU,EAAUgD,EAAOhB,SAAU/C,EAASjB,GAErD,GAAIgW,EACFA,EAASH,MAAMpE,KAAKwE,OACf,CACL,IAAMC,EAAwB,CAC5BH,GAAE,EAAEF,MAAO,CAAEI,IAEfH,EAAOrE,KAAKyE,GACZtU,EAAI4N,IAAIuG,EAAIG,IAIhB,OAAOJ,SAIXnU,EAAI+G,aAAaD,EAAI0N,WAAW,SAACnR,EAAQ9D,GAAU,gBAACD,GAClD,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAEhC,OAAOgS,GAAW3B,EAAMrQ,EAASC,GAAO,WAGtC,IAFA,IAAMU,EAAM,IAAIuB,IAEPpE,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IAAK,CACpC,IAAMiB,EAAQsR,EAAKvS,GAEnBkC,EAAQC,EAAM2G,OAAS9I,EACvBkC,EAAQC,EAAMsQ,MAAQxR,EACtBiB,EAAQC,EAAMoQ,MAAQA,EAEtB,IAAMhR,EAAM0E,EAAOoR,OAAOnV,GACpBoV,EAAUzU,EAAIhC,IAAIU,GAClB2V,EAAWjU,EAAUgD,EAAOhB,SAAU/C,EAASjB,GAEjDqW,EACFA,EAAQ5E,KAAKwE,GAEbrU,EAAI4N,IAAIlP,EAAK,CACX2V,IAKN,OAAOrU,SAIXD,EAAI+G,aAAaD,EAAI6N,OAAO,SAACtR,EAAQ9D,GAAU,gBAACD,GAC9C,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAEhC,OAAOgS,GAAW3B,EAAMrQ,EAASC,GAAO,WAGtC,IAFA,IAAMU,EAAM,IAAIuB,IAEPpE,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IAAK,CACpC,IAAMyS,EAAOF,EAAKvS,GAElBkC,EAAQC,EAAM2G,OAAS9I,EACvBkC,EAAQC,EAAMsQ,MAAQA,EACtBvQ,EAAQC,EAAMoQ,MAAQA,EAEtB,IAAMhR,EAAM0E,EAAOoR,OAAOnV,GACpBjB,EAAQgC,EAAUgD,EAAOhB,SAAU/C,EAASuQ,GAElD5P,EAAI4N,IAAIlP,EAAKN,GAGf,OAAO4B,SAMXD,EAAI+G,aAAaD,EAAImE,KAAK,SAAC5H,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,MACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAKzC,YAJcO,IAAVxB,IACFwW,EAAc,OAARA,EAAexW,EAAQ2M,KAAKC,IAAI5M,EAAOwW,IAGxCA,KAET,SAACA,GAAQ,OAAAA,SAIb7U,EAAI+G,aAAaD,EAAIxB,KAAK,SAACjC,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,MACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAKzC,YAJcO,IAAVxB,IACFwW,EAAc,OAARA,EAAexW,EAAQ2M,KAAK1F,IAAIjH,EAAOwW,IAGxCA,KAET,SAACA,GAAQ,OAAAA,SAIb7U,EAAI+G,aAAaD,EAAIwM,KAAK,SAACjQ,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,MACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAKzC,YAJcO,IAAVxB,IACFwW,EAAc,OAARA,EAAexW,EAAQA,EAAQwW,GAGhCA,KAET,SAACA,GAAQ,OAAAA,SAIb7U,EAAI+G,aAAaD,EAAIgO,KAAK,SAACzR,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,CAAEmQ,MAAO,EAAG4D,IAAK,IACjB,SAACzD,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAMzC,YALcO,IAAVxB,IACFwW,EAAInF,QACJmF,EAAIvB,KAAOjV,GAGNwW,KAET,SAACA,GAAQ,OAAc,IAAdA,EAAInF,MAAc,KAAOmF,EAAIvB,IAAMuB,EAAInF,aAIpD1P,EAAI+G,aAAaD,EAAIiO,KAAK,SAAC1R,EAAQ9D,GAAU,gBAACD,GAC5C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,CAAEmQ,MAAO,EAAG4D,IAAK,EAAG0B,OAAQ,KAC5B,SAACnF,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAOzC,YANcO,IAAVxB,IACFwW,EAAInF,QACJmF,EAAIvB,KAAOjV,EACXwW,EAAIG,OAAOlF,KAAKzR,IAGXwW,KAET,SAACA,GACE,GAAkB,IAAdA,EAAInF,MACN,OAAO,KAET,IAAMoF,EAAMD,EAAIvB,IAAMuB,EAAInF,MAEpBuF,EADYJ,EAAIG,OAAO3O,QAAO,SAACiN,EAAK4B,GAAM,OAAA5B,GAAO4B,EAAIJ,IAAQI,EAAIJ,KAAM,GAC/CD,EAAInF,MAElC,OAAO1E,KAAKmK,KAAKF,UAKxBjV,EAAI+G,aAAaD,EAAIsO,UAAU,SAAC/R,EAAQ9D,GAAU,gBAACD,GACjD,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,CAAEmQ,MAAO,EAAG4D,IAAK,EAAG0B,OAAQ,KAC5B,SAACnF,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAOzC,YANcO,IAAVxB,IACFwW,EAAInF,QACJmF,EAAIvB,KAAOjV,EACXwW,EAAIG,OAAOlF,KAAKzR,IAGXwW,KAET,SAACA,GACE,GAAkB,IAAdA,EAAInF,MACN,OAAO,KAET,GAAkB,IAAdmF,EAAInF,MACN,OAAO,EAET,IAAMoF,EAAMD,EAAIvB,IAAMuB,EAAInF,MAEpBuF,EADYJ,EAAIG,OAAO3O,QAAO,SAACiN,EAAK4B,GAAM,OAAA5B,GAAO4B,EAAIJ,IAAQI,EAAIJ,KAAM,IAC9CD,EAAInF,MAAQ,GAE3C,OAAO1E,KAAKmK,KAAKF,UAKxBjV,EAAI+G,aAAaD,EAAIuO,QAAQ,SAAChS,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,CAAEyV,OAAQ,KACV,SAACnF,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAKzC,YAJcO,IAAVxB,GACFwW,EAAIG,OAAOlF,KAAKzR,GAGXwW,KAET,SAACA,GAAQ,OAAsB,IAAtBA,EAAIG,OAAO9R,OAChB,KACA2R,EAAIG,OAAO9R,OAAS,GAAM,EACxB2R,EAAIG,OAAOhK,KAAKyG,MAAMoD,EAAIG,OAAO9R,OAAS,KAExC2R,EAAIG,OAAOhK,KAAKyG,MAAMoD,EAAIG,OAAO9R,OAAS,GAAK,GAC/C2R,EAAIG,OAAOhK,KAAKyG,MAAMoD,EAAIG,OAAO9R,OAAS,KAC1C,SAIZlD,EAAI+G,aAAaD,EAAIwO,QAAQ,SAACjS,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,YACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAMzC,YALcO,IAAVxB,IAEFwW,GAAYxW,GAGPwW,KAET,SAACA,GAAQ,OAAAA,SAIb7U,EAAI+G,aAAaD,EAAIyO,OAAO,SAAClS,EAAQ9D,GAAU,gBAACD,GAC9C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,GACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAMzC,YALcO,IAAVxB,IAEFwW,GAAYxW,GAGPwW,KAET,SAACA,GAAQ,OAAAA,SAIb7U,EAAI+G,aAAaD,EAAI0O,QAAQ,SAACnS,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAsV,GACEvT,EAAMgC,EAAOsM,KAAMrQ,GACnBA,EACAC,EACA,GACA,SAACsQ,EAAM3J,EAAOyJ,EAAMkF,GAClB,IAAMxW,EAAQ6C,EAAamC,EAAOhF,MAAOiB,GAMzC,YALcO,IAAVxB,IAEFwW,GAAYxW,GAGPwW,KAET,SAACA,GAAQ,OAAAA,SAMb7U,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,yBAAQ+D,EAAOhF,MAAMiB,QAGvBU,EAAI+G,aAAaD,EAAI2O,SAAS,SAACpS,EAAQ9D,GAAU,gBAACD,GAChD,OAAuC,IAAvC+B,EAAMgC,EAAOsM,KAAMrQ,GAAS4D,WAG9BlD,EAAI+G,aAAaD,EAAI4O,YAAY,SAACrS,EAAQ9D,GAAU,gBAACD,GACnD,OAAA+B,EAAMgC,EAAOsM,KAAMrQ,GAAS4D,OAAS,MAGvClD,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,EAAQ9D,GAAU,gBAACD,GAChD,IAAMqQ,EAAOtO,EAAMgC,EAAOsM,KAAMrQ,GAC1B4E,EAAO7C,EAAMgC,EAAOa,KAAM5E,GAEhC,GAAIqQ,EAAKzM,SAAWgB,EAAKhB,OAEvB,OAAO,EAGT,IAAIyS,GAAQ,EAeZ,OAbArE,GAAW3B,EAAMrQ,EAASC,GAAO,WAC/B,IAAK,IAAInC,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IAK/B,GAJAkC,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMlB,OAASsR,EAAKvS,GAC5BkC,EAAQC,EAAM2E,MAAQA,EAAK9G,IAEtBiG,EAAOmB,QAAQlF,GAAU,CAC5BqW,GAAQ,EACR,UAKCA,MAGT3V,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,EAAQ9D,GAAU,gBAACD,GACnD,OAACU,EAAIwD,aAAasD,EAAItC,QAAQoK,GAA7B5O,CAAiCqD,EAAQ9D,EAAzCS,CAAgDV,OAGnDU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,EAAQ9D,GAAU,gBAACD,GACtD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAG1DU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,EAAQ9D,GAAU,gBAACD,GAClD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,EAAQ9D,GAAU,gBAACD,GACzD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAK1DU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,OAAAsW,EAAavS,EAAOhF,MAAOiB,EAAS,aAAW,SAAC4V,GAAM,OAAC,kBAAQA,UAGjElV,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,OAAAsW,EAAavS,EAAOhF,MAAOiB,EAAS,WAAS,WAAO,OAAGpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,wBAGlH/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,OAAAsW,EAAavS,EAAOhF,MAAOiB,EAAS,UAAQ,WAAM,WAAI4C,YAGxDlC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA+B,EAAMgC,EAAOhF,MAAOiB,OAGtBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,IAAMjB,EAAQgD,EAAMgC,EAAOhF,MAAOiB,GAElC,OAAO,IAAIkC,IAAInD,EAAM4B,KAAI,SAACiV,EAAG9X,GAAM,OAACA,EAAEyY,WAAYX,WAGpDlV,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,OAAAsW,EAAavS,EAAOhF,MAAOiB,EAAS,YAAU,SAAC4V,GAAM,OAAAA,EAAEhS,cAGzDlD,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,OAAAsW,EAAavS,EAAOhF,MAAOiB,EAAS,YAAU,WAAM,gBAGtDU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,QAK3B,SAASsW,EAAavX,EAAoBiB,EAAsBwW,EAAiC3R,GAE/F,IAAM4R,EAAM1X,EAAMiB,GAElB,OAAO,kBAAQyW,IAAQD,EAAOC,EAAI,IAC9BA,EAAI,GACJ5R,EAAU4R,GAGhB,SAASpE,EAAKqE,EAAY5Y,EAAWyU,GAEnC,IAAMoE,EAAOD,EAAI5Y,GACjB4Y,EAAI5Y,GAAK4Y,EAAInE,GACbmE,EAAInE,GAAKoE,EAGX,SAAS3E,GAAc3B,EAAarQ,EAAiBC,EAA+B2W,GAElF,IAAMtW,EAAQP,EAAUC,EAASC,GAE3BW,EAASgW,EAAOvG,GAItB,OAFAhQ,EAAaL,EAASM,GAEfM,EAGT,SAAS0U,GACPjF,EACArQ,EACAC,EACA4W,EACAC,EACAC,GAEA,OAAO/E,GAAW3B,EAAMrQ,EAASC,GAAO,WAItC,IAFA,IAAIsV,EAAgBsB,EAEX/Y,EAAI,EAAGA,EAAIuS,EAAKzM,OAAQ9F,IACjC,CACE,IAAMyS,EAAOF,EAAKvS,GAElBkC,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMsQ,MAAQA,EACtBvQ,EAAQC,EAAM2G,OAAS9I,EAEvByX,EAAMuB,EAAUvG,EAAMzS,EAAGuS,EAAMkF,GAGjC,OAAOwB,EAAaxB,MAIxB,SAAS/D,GACPnB,EACArQ,EACAC,EACA2F,EACAC,EACAmR,EACAC,EACAC,GAGA,YAHA,IAAAA,OAAA,GAGOlF,GAAW3B,EAAMrQ,EAASC,GAAO,WAQtC,IANA,IAAMV,EAAI8Q,EAAKzM,OACX9F,EAAI8H,EAAMrG,GACRyE,EAAI6B,EAAItG,GACRnB,EAAIN,EAAIkG,EAAI,GAAK,EACnBpD,EAASoW,EAENlZ,IAAMkG,GACb,CACE,IAAMuM,EAAOF,EAAKvS,GAElBkC,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMsQ,MAAQA,EACtBvQ,EAAQC,EAAM2G,OAAS9I,EAEvB,IAAMqZ,EAAYF,EAAO1G,EAAMzS,EAAGuS,EAAMzP,GAExC,GAAIsW,GAEF,QAAkB3W,IAAd4W,EAEF,OAAOA,OAKTvW,EAASuW,EAGP9G,EAAKvS,KAAOyS,GAAc,IAANzS,IAEtBA,GAAKM,GAIT,OAAOwC,KAIX,SAASoQ,GACPX,EACArQ,EACA+D,EACA9D,EACAlB,EACA6G,EACAC,EACAuR,EACAC,GAGA,OAAOrF,GAAW3B,EAAMrQ,EAASC,GAAO,WAOtC,IALA,IAAMV,EAAI8Q,EAAKzM,OACX9F,EAAI8H,EAAMrG,GACRyE,EAAI6B,EAAItG,GACRnB,EAAIN,EAAIkG,EAAI,GAAK,EAEhBlG,IAAMkG,GACb,CACE,IAAM,EAAOqM,EAAKvS,GACZ+F,EAAOwM,EAAKvS,EAAIM,GAMtB,GAJA4B,EAAQC,EAAMoQ,MAAQA,EACtBrQ,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAM2E,MAAQ,EAElBb,EAAOmB,QAAQlF,GACnB,CACE,IAAMsX,EAAcF,EAAY,EAAMtZ,EAAGuS,GAEzC,QAAoB9P,IAAhB+W,EAEF,OAAOA,EAEAjH,EAAKvS,KAAO+F,IAEnB/F,GAAKM,GAITN,GAAKM,EAGP,OAAOiZ,EAAiBhH,M,ycC3qCb,YAAS3P,GAEtB,IAAM8G,EAAM,SAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,WAAIkC,QAKNxB,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAAmC,EAAU4B,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAI7I,KAAK,SAACoF,GAAW,gBAAC/D,GACrC,OAAAiC,EAAK8B,EAAOpD,IAAKX,GAASrB,IAAIoF,EAAO1E,IAAIW,QAG3CU,EAAI+G,aAAaD,EAAI+G,KAAK,SAACxK,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvBX,EAAM0E,EAAO1E,IAAIW,GACjBuX,EAAW5W,EAAIhC,IAAIU,GACnBiB,EAAQP,EAAUC,EAASC,GAEjCD,EAAQC,EAAMuX,eAAiBD,EAE/B,IAAMxY,EAAQgF,EAAOhF,MAAMiB,GAM3B,OAJAW,EAAI4N,IAAIlP,EAAKN,GAEbsB,EAAaL,EAASM,GAEfiX,MAGT7W,EAAI+G,aAAaD,EAAIiQ,KAAK,SAAC1T,GAAW,gBAAC/D,GACrC,OAAAiC,EAAK8B,EAAOpD,IAAKX,GAASyX,IAAI1T,EAAO1E,IAAIW,QAG3CU,EAAI+G,aAAaD,EAAIkQ,QAAQ,SAAC3T,GAAW,gBAAC/D,GACxC,OAAAiC,EAAK8B,EAAOpD,IAAKX,GAAS0X,OAAO3T,EAAO1E,IAAIW,QAG9CU,EAAI+G,aAAaD,EAAImQ,MAAM,SAAC5T,GAAW,gBAAC/D,GACtC,yBAAQiC,EAAK8B,EAAOpD,IAAKX,GAAS2X,YAGpCjX,EAAI+G,aAAaD,EAAIkO,QAAQ,SAAC3R,GAAW,gBAAC/D,GACxC,yBAAQiC,EAAK8B,EAAOpD,IAAKX,GAAS0V,cAGpChV,EAAI+G,aAAaD,EAAI6E,SAAS,SAACtI,GAAW,gBAAC/D,G,QACnCW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvBqM,EAA0C,CAAEsL,KAAM,GAAIjC,OAAQ,I,IAEpE,IAA2B,SAAA/U,EAAI0L,WAAS,8BAAE,CAA/B,oBAAChN,EAAA,KAAKN,EAAA,KACfsN,EAAQsL,KAAKnH,KAAKnR,GAClBgN,EAAQqJ,OAAOlF,KAAKzR,I,iGAGtB,OAAOsN,MAGT3L,EAAI+G,aAAaD,EAAIoQ,OAAO,SAAC7T,GAAW,gBAAC/D,G,QACjCW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvB4X,EAAyC,G,IAE/C,IAA2B,SAAAjX,EAAI0L,WAAS,8BAAE,CAA/B,oBAAChN,EAAA,KAAKN,EAAA,KACf6Y,EAAMpH,KAAK,CAAEnR,IAAG,EAAEN,MAAK,K,iGAGzB,OAAO6Y,MAGTlX,EAAI+G,aAAaD,EAAIqQ,OAAO,SAAC9T,GAAW,gBAAC/D,GACvC,IAAMW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GAG7B,OAFAW,EAAIkX,QAEGlX,MAGTD,EAAI+G,aAAaD,EAAI4I,OAAO,SAACrM,GAAW,gBAAC/D,GACvC,OAAAiC,EAAK8B,EAAOpD,IAAKX,GAAS8X,SAG5BpX,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMW,EAAMsB,EAAK8B,EAAOhF,MAAOiB,GACzB4E,EAAO3C,EAAK8B,EAAOa,KAAM5E,GAE/B,OAAO+X,GAAUpX,EAAKX,EAASC,GAAO,W,YAChCyU,EAAO,EAAGC,EAAO,E,IAErB,IAA2B,SAAAhU,EAAI0L,WAAS,8BAAE,CAA/B,oBAAChN,EAAA,KAAKN,EAAA,KACf,GAAK6F,EAAK6S,IAAIpY,GAAd,CAKAW,EAAQC,EAAMZ,KAAOA,EACrBW,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAM2E,MAAQA,EAAKjG,IAAIU,GAE/B,IAAMjB,EAAIqD,EAAQsC,EAAO4O,QAAS3S,EAAS,GAEvC5B,EAAI,EAAGsW,IACFtW,EAAI,GAAGuW,SAXdA,K,qGAcJ,IAAkB,SAAA/P,EAAK+S,QAAM,8BAAE,CAApBtY,EAAG,QACPsB,EAAI8W,IAAIpY,IACXqV,K,iGAIJ,OAAO,qBAAWA,EAAMC,UAI5BjU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,EAAQ9D,GAAU,gBAACD,GAC7C,IAAMW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvBqM,EAAU1L,EAAI0L,UAEpB,IAAKtI,EAAOgO,WAAahO,EAAOiU,YAC9B,OAAO,IAAI9V,IAAI,kBAAQmK,IAEzB,IAAM4L,EAA4B,GAclC,OAbAF,GAAUpX,EAAKX,EAASC,GAAO,W,YAC7B,IAA2B,SAAAoM,GAAO,8BAAE,CAAzB,oBAAChN,EAAA,KAAKN,EAAA,KACfiB,EAAQC,EAAMZ,KAAOA,EACrBW,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAMU,KAAOA,EAErBsX,EAAYzH,KAAK,CACfzP,EAAUgD,EAAOiU,YAAahY,EAASX,GACvC0B,EAAUgD,EAAOgO,SAAU/R,EAASjB,M,qGAKnC,IAAImD,IAAI+V,OAGjBvX,EAAI+G,aAAaD,EAAI7G,KAAK,SAACoD,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvBqM,EAAU1L,EAAI0L,UAEpB,IAAKtI,EAAOuQ,YAAcvQ,EAAOmU,aAC/B,OAAO,IAAIhW,IAAI,kBAAQmK,IAEzB,IAAM8L,EAAmC,GAczC,OAbAJ,GAAUpX,EAAKX,EAASC,GAAO,W,YAC7B,IAA2B,SAAAoM,GAAO,8BAAE,CAAzB,oBAAChN,EAAA,KAAKN,EAAA,KACfiB,EAAQC,EAAMZ,KAAOA,EACrBW,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAMU,KAAOA,EAErBwX,EAAmB3H,KAAK,CACtBzP,EAAUgD,EAAOmU,aAAclY,EAASX,GACxC0B,EAAUgD,EAAOuQ,UAAWtU,EAASjB,M,qGAKpC,IAAImD,IAAIiW,OAGjBzX,EAAI+G,aAAaD,EAAI4Q,eAAe,SAACrU,GAAW,gBAAC/D,G,QACzCW,EAAMsB,EAAK8B,EAAOpD,IAAKX,GACvBqY,EAAQ7Z,OAAOY,OAAO,M,IAE5B,IAA2B,SAAAuB,EAAI0L,WAAS,8BAAE,CAA/B,oBAAChN,EAAA,KAAKN,EAAA,KACfsZ,EAAMhZ,GAAON,G,iGAGf,OAAOsZ,MAKT3X,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,uBAAM+D,EAAOhF,MAAMiB,QAGrBU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,EAAQ9D,GAAU,gBAACD,GAChD,IAAMW,EAAMsB,EAAK8B,EAAOhF,MAAOiB,GACzB4E,EAAO3C,EAAK8B,EAAOa,KAAM5E,GAE/B,OAAIW,EAAImX,OAASlT,EAAKkT,MAIfC,GAAUpX,EAAKX,EAASC,GAAO,W,YACpC,IAA2B,SAAAU,EAAI0L,WAAS,8BAAE,CAA/B,oBAAChN,EAAA,KAAKN,EAAA,KACf,IAAK6F,EAAK6S,IAAIpY,GACZ,OAAO,EAOT,GAJAW,EAAQC,EAAMZ,KAAOA,EACrBW,EAAQC,EAAMlB,OAASA,EACvBiB,EAAQC,EAAM2E,MAAQA,EAAKjG,IAAIU,IAE1B0E,EAAOmB,QAAQlF,GAClB,OAAO,G,iGAIX,OAAO,SAIXU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,EAAQ9D,GAAU,gBAACD,GACnD,OAACU,EAAIwD,aAAasD,EAAItC,QAAQoK,GAA7B5O,CAAiCqD,EAAQ9D,EAAzCS,CAAgDV,OAGnDU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,EAAQ9D,GAAU,gBAACD,GAC/C,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,EAAQ9D,GAAU,gBAACD,GACtD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAG1DU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,EAAQ9D,GAAU,gBAACD,GAClD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,GAAW,MAGzDU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,EAAQ9D,GAAU,gBAACD,GACzD,OAAAU,EAAIwD,aAAasD,EAAIE,IAAI4H,GAAzB5O,CAA6BqD,EAAQ9D,EAArCS,CAA4CV,IAAY,MAK1DU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,UAAa+D,EAAOhF,MAAOiB,EAAS,aAAW,SAAC4V,GAAM,OAAAA,EAAEkC,KAAO,SAGjEpX,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,UAAQ,SAAC4V,GAAM,WAAIhT,YAGzDlC,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,WAAO,OAAGpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,wBAGlH/B,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,yBAAQiC,EAAK8B,EAAOhF,MAAOiB,GAAS0V,cAGtChV,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAAC4V,GAAM,OAAAA,EAAEkC,YAGzDpX,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAACjB,GAAU,OAAGA,MAAK,UAGnE2B,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAAC4V,GAAM,gBAGvDlV,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,SAAC4V,GAAM,OAACA,WAMzD,SAAS,GAAa7W,EAAoBiB,EAAsBwW,EAAiC3R,GAE/F,IAAM4R,EAAM1X,EAAMiB,GAElB,OAAO,gBAAMyW,IAAQD,EAAOC,EAAI9X,IAAI,UAChC8X,EAAI9X,IAAI,SACRkG,EAAU4R,GAGhB,SAASsB,GAAapX,EAAoBX,EAAsBC,EAA+B2W,GAE7F,IAAMtW,EAAQP,EAAUC,EAASC,GAE3BW,EAASgW,EAAOjW,GAItB,OAFAN,EAAaL,EAASM,GAEfM,EC1ST,IAEe,YAASF,EAAuCkM,QAAA,IAAAA,MAAA,MAE7D,IAAMpF,EAAM,YAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,aAGFU,EAAI+G,aAAaD,EAAI8Q,IAAI,SAACvU,GAAW,gBAAC/D,GACpC,OAAA0L,KAAK6M,OAGP7X,EAAI+G,aAAaD,EAAIgR,KAAK,SAACzU,GAAW,gBAAC/D,GACrC,OAAA0L,KAAK6M,GAAK7M,KAAK6M,OAGjB7X,EAAI+G,aAAaD,EAAIiR,QAAQ,SAAC1U,GAAW,gBAAC/D,GAExC,MAAU,GAAV0L,KAAK6M,OAGP7X,EAAI+G,aAAaD,EAAIxD,GAAG,SAACD,GAAW,gBAAC/D,GACnC,OAAA0L,KAAKgN,MAGPhY,EAAI+G,aAAaD,EAAImR,OAAO,SAAC5U,GAAW,gBAAC/D,GACvC,OAAA0L,KAAKkN,UAGPlY,EAAI+G,aAAaD,EAAIqR,QAAQ,SAAC9U,GAAW,gBAAC/D,GACxC,OAAA0L,KAAKoN,YAGPpY,EAAI+G,aAAaD,EAAIuR,KAAK,SAAChV,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKsN,QAGPtY,EAAI+G,aAAaD,EAAIyR,MAAM,SAAClV,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKwN,SAGPxY,EAAI+G,aAAaD,EAAI2R,OAAO,SAACpV,GAAW,gBAAC/D,GACvC,OAAA0L,KAAK0N,UAGP1Y,EAAI+G,aAAaD,EAAI6R,QAAQ,SAACtV,GAAW,gBAAC/D,GACxC,OAAA0L,KAAK4N,WAKP5Y,EAAI+G,aAAaD,EAAImC,KAAK,SAAC5F,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAO6F,OAAQ5J,OAG1DU,EAAI+G,aAAaD,EAAI9D,KAAK,SAACK,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOkG,WAAYjK,OAG9DU,EAAI+G,aAAaD,EAAI0C,KAAK,SAACnG,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOoG,WAAYnK,OAG9DU,EAAI+G,aAAaD,EAAI4C,KAAK,SAACrG,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOsG,QAASrK,OAG3DU,EAAI+G,aAAaD,EAAI+C,KAAK,SAACxG,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOsG,QAASrK,OAG3DU,EAAI+G,aAAaD,EAAImE,KAAK,SAAC5H,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKC,IAAIlK,EAAQsC,EAAOtB,EAAGzC,GAAUyB,EAAQsC,EAAOvB,EAAGxC,QAGzDU,EAAI+G,aAAaD,EAAIxB,KAAK,SAACjC,GAAW,gBAAC/D,GACrC,OAAA0L,KAAK1F,IAAIvE,EAAQsC,EAAOtB,EAAGzC,GAAUyB,EAAQsC,EAAOvB,EAAGxC,QAGzDU,EAAI+G,aAAaD,EAAI+R,KAAK,SAACxV,GAAW,gBAAC/D,GACrC,OAAA0L,KAAK6N,IAAI9X,EAAQsC,EAAOhF,MAAOiB,GAAUyB,EAAQsC,EAAOyV,SAAUxZ,QAGpEU,EAAI+G,aAAaD,EAAIiS,OAAO,SAAC1V,GAAW,gBAAC/D,GACvC,OAAA0L,KAAK+N,MAAMhY,EAAQsC,EAAOiJ,EAAGhN,GAAUyB,EAAQsC,EAAOgJ,EAAG/M,QAG3DU,EAAI+G,aAAaD,EAAIkS,OAAO,SAAC3V,GAAW,gBAAC/D,GACvC,IAAMyC,EAAIhB,EAAQsC,EAAOtB,EAAGzC,GACtBwC,EAAIf,EAAQsC,EAAOvB,EAAGxC,GAE5B,OAAO0L,KAAKmK,KAAKpT,EAAIA,EAAID,EAAIA,OAG/B9B,EAAI+G,aAAaD,EAAImS,QAAQ,SAAC5V,GAAW,gBAAC/D,GACxC,IAAMT,EAAIkC,EAAQsC,EAAOxE,EAAGS,GACtBuS,EAAI9Q,EAAQsC,EAAOwO,EAAGvS,GAC5B,OAAK8I,SAASvJ,IAAOuJ,SAASyJ,GAyYlC,SAAgBhT,EAAWgT,GAEzB,IAAIqH,EAAM,EACNC,EAAM,EACNC,EAAQ,EAGRvH,EAAKhT,GAAK,IAEZgT,EAAIhT,EAAIgT,GAGV,KAAOA,GAAK,GAEVqH,GAAOra,IACPsa,GAAOtH,IACPuH,EAAQC,GAAKH,EAAKC,GAClBD,GAAOE,EACPD,GAAOC,EAGT,OAAOF,EA1ZED,CAAOpa,EAAGgT,GAHR7Q,OAAOC,QAMlBjB,EAAI+G,aAAaD,EAAIuS,KAAK,SAAChW,GAAW,gBAAC/D,GACrC,IAAMyC,EAAIhB,EAAQsC,EAAOtB,EAAGzC,GACtBwC,EAAIf,EAAQsC,EAAOvB,EAAGxC,GAC5B,OAAK8I,SAASrG,IAAOqG,SAAStG,GAIvBuX,GAAItX,EAAGD,GAHLd,OAAOC,QAMlBjB,EAAI+G,aAAaD,EAAIwS,QAAQ,SAACjW,GAAW,gBAAC/D,GAExC,OAAAyB,EAAQsC,EAAOtB,EAAGzC,GAAWyB,EAAQsC,EAAOvB,EAAGxC,OAGjDU,EAAI+G,aAAaD,EAAIyS,OAAO,SAAClW,GAAW,gBAAC/D,GAEvC,OAAAyB,EAAQsC,EAAOtB,EAAGzC,GAAWyB,EAAQsC,EAAOvB,EAAGxC,OAGjDU,EAAI+G,aAAaD,EAAI0S,QAAQ,SAACnW,GAAW,gBAAC/D,GAExC,OAAAyB,EAAQsC,EAAOtB,EAAGzC,GAAWyB,EAAQsC,EAAOvB,EAAGxC,OAGjDU,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOa,KAAM5E,OAKxDU,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAA4B,EAAamC,EAAOhF,MAAOiB,OAG7BU,EAAI+G,aAAaD,EAAIqO,MAAM,SAAC9R,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKmK,KAAKpU,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI2S,IAAI,SAACpW,GAAW,gBAAC/D,GACpC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAEpC,OAAOjB,EAAQA,MAGjB2B,EAAI+G,aAAaD,EAAI4S,MAAM,SAACrW,GAAW,gBAAC/D,GACtC,OAAA0L,KAAK0O,KAAK3Y,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI2K,OAAO,SAACpO,GAAW,gBAAC/D,GACvC,OAAA0L,KAAKyG,MAAM1Q,EAAQsC,EAAOhF,MAAOiB,QAGnCU,EAAI+G,aAAaD,EAAI6S,MAAM,SAACtW,GAAW,gBAAC/D,GACtC,OAAA0L,KAAK2O,KAAK5Y,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI8S,IAAI,SAACvW,GAAW,gBAAC/D,GACpC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAEpC,OAAOjB,EAAQ,EAAI2M,KAAK2O,KAAKtb,GAAS2M,KAAKyG,MAAMpT,OAGnD2B,EAAI+G,aAAaD,EAAI+S,MAAM,SAACxW,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAEpC,OAAOjB,EAAQ,EAAI2M,KAAK2O,KAAKtb,GAAS2M,KAAKyG,MAAMpT,OAGnD2B,EAAI+G,aAAaD,EAAIgT,OAAO,SAACzW,GAAW,gBAAC/D,GACvC,OAAA0L,KAAK8O,MAAM/Y,EAAQsC,EAAOhF,MAAOiB,QAGnCU,EAAI+G,aAAaD,EAAIyF,KAAK,SAAClJ,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKuB,IAAIxL,EAAQsC,EAAOhF,MAAOiB,QAGjCU,EAAI+G,aAAaD,EAAIiT,KAAK,SAAC1W,GAAW,gBAAC/D,GACrC,OAACyB,EAAQsC,EAAOhF,MAAOiB,OAGzBU,EAAI+G,aAAaD,EAAIkT,MAAM,SAAC3W,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAEpC,OAAiB,IAAVjB,EAAc,EAAIA,EAAQ,GAAK,EAAI,MAG5C2B,EAAI+G,aAAaD,EAAImT,KAAK,SAAC5W,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKiP,IAAIlZ,EAAQsC,EAAOhF,MAAOiB,QAGjCU,EAAI+G,aAAaD,EAAIoT,KAAK,SAAC7W,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKkP,IAAInZ,EAAQsC,EAAOhF,MAAOiB,QAGjCU,EAAI+G,aAAaD,EAAIqT,KAAK,SAAC9W,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKmP,IAAIpZ,EAAQsC,EAAOhF,MAAOiB,QAGjCU,EAAI+G,aAAaD,EAAIsT,KAAK,SAAC/W,GAAW,gBAAC/D,GACrC,OAAA0L,KAAKoP,IAAIrZ,EAAQsC,EAAOhF,MAAOiB,QAGjCU,EAAI+G,aAAaD,EAAIuT,MAAM,SAAChX,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKqP,KAAKtZ,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAIwT,MAAM,SAACjX,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKsP,KAAKvZ,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAIyT,MAAM,SAAClX,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKuP,KAAKxZ,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI0T,MAAM,SAACnX,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKwP,KAAKzZ,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI2T,MAAM,SAACpX,GAAW,gBAAC/D,GACtC,OAAA0L,KAAKyP,KAAK1Z,EAAQsC,EAAOhF,MAAOiB,QAGlCU,EAAI+G,aAAaD,EAAI4T,WAAW,SAACrX,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAEpC,OAAO8I,SAAS/J,GA6OpB,SAAoBgO,GAClB,IAAIsO,EAAItO,EACR,OAASA,EAAI,GACXsO,GAAKtO,EAGP,OAAOsO,EAnPoBD,CAAUrc,GAASA,MAG9C2B,EAAI+G,aAAaD,EAAI8T,SAAS,SAACvX,GAAW,gBAAC/D,GAEzC,OAACyB,EAAQsC,EAAOhF,MAAOiB,OAKzBU,EAAI+G,aAAaD,EAAIkC,OAAO,SAAC3F,GAAW,gBAAC/D,GACvC,OAAA0L,KAAK1F,IAAIvE,EAAQsC,EAAO4H,IAAK3L,GAAU0L,KAAKC,IAAIlK,EAAQsC,EAAOhF,MAAOiB,GAAUyB,EAAQsC,EAAOiC,IAAKhG,SAGtGU,EAAI+G,aAAaD,EAAI+T,gBAAgB,SAACxX,GAAW,gBAAC/D,GAChD,IAAMwb,EAAO/Z,EAAQsC,EAAOyX,KAAMxb,GAC5Byb,EAAQha,EAAQsC,EAAO0X,MAAOzb,GAC9B0b,EAAQja,EAAQsC,EAAO2X,MAAO1b,GACpC,OAAK8I,SAAS0S,IAAU1S,SAAS2S,IAAW3S,SAAS4S,GA6QzD,SAAwBF,EAAcC,EAAeC,GAEnD,IAAM9b,GAAK4b,EAAOC,EAAQC,GAASC,GAInC,OAHajQ,KAAKmK,KAAMjW,GAAKA,EAAI4b,IAAS5b,EAAI6b,IAAU7b,EAAI8b,IACtCE,GAAMJ,EA7QnBD,CAAeC,EAAMC,EAAOC,GAH1Bha,OAAOC,QAMlBjB,EAAI+G,aAAaD,EAAIqD,MAAM,SAAC9G,GAAW,gBAAC/D,GACtC,IAAM4F,EAAQnE,EAAQsC,EAAO6B,MAAO5F,GAIpC,OAHYyB,EAAQsC,EAAO8B,IAAK7F,GAGlB4F,GAFAnE,EAAQsC,EAAO+G,MAAO9K,GAEL4F,MAKjClF,EAAI+G,aAAaD,EAAIqU,KAAK,SAAC9X,GAAW,gBAAC/D,GACrC,IAAM2L,EAAMlK,EAAQsC,EAAO4H,IAAK3L,EAAS,GAEnC8b,EADMra,EAAQsC,EAAOiC,IAAKhG,EAAS,GACvB2L,EACZoQ,EAAQ7a,EAAM6C,EAAOgY,MAAO/b,GAAS,GACrCgc,EAAU9a,EAAM6C,EAAOkY,WAAYjc,GAAS,GAElD,OAAO+b,EACHC,EACEtQ,KAAKyG,OAAO2J,EAAM,GAAKpQ,KAAKoH,UAAYnH,EACxCD,KAAKyG,MAAM2J,EAAMpQ,KAAKoH,UAAYnH,EACpCD,KAAKoH,SAAWgJ,EAAMnQ,MAK5BjL,EAAI+G,aAAaD,EAAI0U,YAAY,SAACnY,GAAW,gBAAC/D,GAC5C,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GACpC,IAAK8I,SAAS/J,GACZ,OAAOA,EAOT,IALA,IAAMyc,EAAO/Z,EAAQsC,EAAOyX,KAAMxb,EAlSjB,IAmSX2L,EAAMlK,EAAQsC,EAAOoY,UAAWnc,EAAS,GAE3C+M,EAAIhO,EAAMwX,SAASiF,GAEhBzO,EAAEnJ,OAAS+H,GAAKoB,EAAI,IAAMA,EAEjC,OAAOA,MAGTrM,EAAI+G,aAAaD,EAAI2H,QAAQ,SAACpL,GAAW,gBAAC/D,GACxC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GACpC,IAAK8I,SAAS/J,GACZ,OAAOA,EAET,IAAMgV,EAASlS,EAAMkC,EAAOgQ,OAAQ/T,GAC9BkU,EAASrS,EAAMkC,EAAOmQ,OAAQlU,GAC9Boc,EAAYxa,EAAamC,EAAOqY,UAAWpc,GAC3Cqc,EAAYza,EAAamC,EAAOsY,UAAWrc,GAC3Csc,EAAcpb,EAAM6C,EAAOuY,YAAatc,GAAS,GACjDuc,EAAYza,EAAWiC,EAAOyY,kBAAmBxc,GAEnDyc,EAAK,GAGPA,EADEH,EACGvd,EAAM2d,cAAc,sBAAYL,GAAaD,EAAYC,GACrD,mBAASD,GACbrd,EAAM4d,QAAQP,GAEdrd,EAAM6d,YAAYP,GAMzB,GAAI,mBAASE,GAAY,CACvB,IAAMM,EAJiB,IAIkBC,iBAAiBC,UAAU,EAAGC,GACnEpW,EAAQ6V,EAAGjJ,QAAQqJ,GAKvB,KAJe,IAAXjW,IACFA,EAAQ6V,EAAG7Y,QAEbgD,GARuB,EAShBA,EAAQ,GACb6V,EAAKA,EAAGM,UAAU,EAAGnW,GAAS2V,EAAYE,EAAGM,UAAUnW,GACvDA,GAXqB,EAezB,OAAOmN,EAAS0I,EAAKvI,MAKvBxT,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,0BAAS+D,EAAOhF,MAAMiB,QAGxBU,EAAI+G,aAAaD,EAAIyV,QAAQ,SAAClZ,GAAW,gBAAC/D,GACxC,OAAA0L,KAAKuB,IAAIxL,EAAQsC,EAAOhF,MAAOiB,KAAayB,EAAQsC,EAAO6I,QAAS5M,EAAS4M,OAG/ElM,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAAA0L,KAAKuB,IAAIxL,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOa,KAAM5E,KAAayB,EAAQsC,EAAO6I,QAAS5M,EAAS4M,OAG/GlM,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAAA0L,KAAKuB,IAAIxL,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOa,KAAM5E,IAAYyB,EAAQsC,EAAO6I,QAAS5M,EAAS4M,OAG9GlM,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOa,KAAM5E,OAGxDU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,OAAAyB,EAAQsC,EAAOhF,MAAOiB,IAAYyB,EAAQsC,EAAOa,KAAM5E,OAGzDU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAOa,KAAM5E,OAGxDU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,OAAAyB,EAAQsC,EAAOhF,MAAOiB,IAAYyB,EAAQsC,EAAOa,KAAM5E,OAGzDU,EAAI+G,aAAaD,EAAImI,WAAW,SAAC5L,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAC9B2L,EAAMlK,EAAQsC,EAAO4H,IAAK3L,GAC1BgG,EAAMvE,EAAQsC,EAAOiC,IAAKhG,GAC1Bkd,EAAehc,EAAM6C,EAAOmZ,aAAcld,GAAS,GACnDmd,EAAejc,EAAM6C,EAAOoZ,aAAcnd,GAAS,GAQzD,OANmBjB,EAAQ4M,IAGTuR,EAAe,EAAI,IAFlBne,EAAQiH,IAGTmX,EAAe,GAAK,OAKxCzc,EAAI+G,aAAaD,EAAI4V,SAAS,SAACrZ,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAC9Bqd,EAAM5b,EAAQsC,EAAO6I,QAAS5M,EAAS4M,GAE7C,OAAO,kBAAQ7N,EAAOse,OAGxB3c,EAAI+G,aAAaD,EAAI8V,WAAW,SAACvZ,GAAW,gBAAC/D,GAC3C,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAC9Bqd,EAAM5b,EAAQsC,EAAO6I,QAAS5M,EAAS4M,GAE7C,OAAQ,kBAAQ7N,EAAOse,OAGzB3c,EAAI+G,aAAaD,EAAI+V,YAAY,SAACxZ,GAAW,gBAAC/D,GAC5C,OAAAyB,EAAQsC,EAAOhF,MAAOiB,IAAY,MAGpCU,EAAI+G,aAAaD,EAAIgW,YAAY,SAACzZ,GAAW,gBAAC/D,GAC5C,OAAAyB,EAAQsC,EAAOhF,MAAOiB,GAAW,MAGnCU,EAAI+G,aAAaD,EAAIiW,aAAa,SAAC1Z,GAAW,gBAAC/D,GAC7C,OAAA0L,KAAKuB,IAAIxL,EAAQsC,EAAOhF,MAAOiB,GAAWyB,EAAQsC,EAAO+Q,GAAI9U,KAAayB,EAAQsC,EAAO6I,QAAS5M,EAAS4M,OAK7GlM,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,QAAE+D,EAAOhF,MAAMiB,OAGjBU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GASpC,MAAO,CAAEpB,EANS,IAARG,EAMEwD,EALDxD,GAAS,EAAK,IAKVyD,EAJJzD,GAAS,GAAM,IAIR0D,EAHP1D,GAAS,GAAM,SAM5B2B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,uBAAM+D,EAAOhF,MAAMiB,KAAa,IAAI4C,SAGtClC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,OAAA+D,EAAOhF,MAAMiB,GAAW,OAG1BU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,QAe3B,SAAS+Z,GAAKtX,EAAWD,GAMvB,IALA,IAAMkb,EAAKhS,KAAKuB,IAAIxK,GACdkb,EAAKjS,KAAKuB,IAAIzK,GAChBuK,EAAIrB,KAAK1F,IAAI0X,EAAIC,GACjB3Q,EAAItB,KAAKC,IAAI+R,EAAIC,KAEZ,CACP,GAAU,IAAN3Q,EAAS,OAAOD,EAEpB,GAAU,KADVA,GAAKC,GACQ,OAAOA,EACpBA,GAAKD,GA4BT,IAAM4O,GAAO,GACPC,GAAM,ECvgBG,gBAASlb,GAEtB,IAAM8G,EAAM,YAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,OAAAxB,OAAOY,OAAO,UAKhBsB,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAAqC,EAAa0B,EAAOhF,MAAOiB,OAG7BU,EAAI+G,aAAaD,EAAIiQ,KAAK,SAAC1T,GAAW,gBAAC/D,GACrC,OAAA+D,EAAO1E,IAAIW,KAAYoC,EAAQ2B,EAAOvE,OAAQQ,OAGhDU,EAAI+G,aAAaD,EAAI7I,KAAK,SAACoF,GAAW,gBAAC/D,GACrC,OAAAoC,EAAQ2B,EAAOvE,OAAQQ,GAAS+D,EAAO1E,IAAIW,QAG7CU,EAAI+G,aAAaD,EAAI+G,KAAK,SAACxK,EAAQ9D,GAAU,gBAACD,GAC5C,IAAMR,EAAS4C,EAAQ2B,EAAOvE,OAAQQ,GAChCX,EAAM0E,EAAO1E,IAAIW,GACjBM,EAAQP,EAAUC,EAASC,GAEjCD,EAAQC,EAAMuX,eAAiBhY,EAAOH,GAEtC,IAAMN,EAAQgF,EAAOhF,MAAMiB,GAM3B,OAJAR,EAAOH,GAAON,EAEdsB,EAAaL,EAASM,GAEfd,MAGTkB,EAAI+G,aAAaD,EAAIkQ,QAAQ,SAAC3T,GAAW,gBAAC/D,GACxC,IAAMR,EAAS4C,EAAQ2B,EAAOvE,OAAQQ,GAChCX,EAAM0E,EAAO1E,IAAIW,GACjBjB,EAAQS,EAAOH,GAIrB,cAFOG,EAAOH,GAEPN,MAGT2B,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,yBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,QAG/DU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,GAAW,gBAAC/D,GACtC,sBAAKoC,EAAQ2B,EAAOvE,OAAQQ,QAK9BU,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,0BAAS+D,EAAOhF,MAAMiB,QAGxBU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAA2E,IAA3E,kBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,QAG/DU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAA2E,IAA3E,kBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,QAG/DU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,yBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,IAAY,MAG3EU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,yBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,KAAa,MAG5EU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,yBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,IAAY,MAG3EU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,yBAAQoC,EAAQ2B,EAAOhF,MAAOiB,GAAUoC,EAAQ2B,EAAOa,KAAM5E,KAAa,MAK5EU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,UAAa+D,EAAOhF,MAAOiB,EAAS,aAAW,WAAM,gBAGvDU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQgF,EAAOhF,MAAMiB,GAE3B,OAAI,mBAASjB,IAAU,kBAAQA,EAAMA,OAC5BA,EAAMA,MAGR,YAAUwJ,SAASC,UAAUzJ,IAC/B,CAAGH,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAGnE/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,UAAQ,WAAM,WAAI4C,YAGxDlC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,SAAA4V,GAAK,yBAAQA,GAAK,GAAK,CAACA,UAGvElV,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,UAAa+D,EAAOhF,MAAOiB,EAAS,SAAO,SAAA4V,GAAK,yBAAQA,GAAK,IAAI1T,IAAQ,IAAIA,IAAI,CAAC,CAAC,QAAS0T,YAG9FlV,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,WAAM,gBAGtDU,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAAA4V,GAAK,0BAASA,UAG9DlV,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,SAAA4V,GAAK,OAACA,WAKvD,SAAS,GAAa7W,EAAoBiB,EAAsBwW,EAAiC3R,GAE/F,IAAM4R,EAAM1X,EAAMiB,GAElB,OAAO,mBAASyW,IAAQD,EAAOC,EAAI1X,OAC/B0X,EAAI1X,MACJ8F,EAAU4R,GCjJD,gBAAS/V,GAEtB,IAAM8G,EAAM,UAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,aAKFU,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAA8B,EAAWiC,EAAOhF,MAAOiB,OAG3BU,EAAI+G,aAAaD,EAAI6L,QAAQ,SAACtP,GAAW,gBAAC/D,GACxC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAW6B,EAAMkC,EAAOsP,OAAQrT,OAGtDU,EAAI+G,aAAaD,EAAI+L,SAAS,SAACxP,GAAW,gBAAC/D,GACzC,OAAA6B,EAAMkC,EAAOwP,QAASvT,GAAW6B,EAAMkC,EAAOhF,MAAOiB,OAGvDU,EAAI+G,aAAaD,EAAIoW,OAAO,SAAC7Z,GAAW,gBAAC/D,GACvC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAS6d,kBAG/Bnd,EAAI+G,aAAaD,EAAIsW,OAAO,SAAC/Z,GAAW,gBAAC/D,GACvC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAS+d,kBAG/Brd,EAAI+G,aAAaD,EAAIwW,MAAM,SAACja,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC5B4G,EAAQnF,EAAQsC,EAAO6C,MAAO5G,GAEpC,OAAO4G,GAAS7H,EAAM6E,OAAS7E,EAAMkf,OAAOrX,GAAS/E,EAAMkC,EAAOma,QAASle,OAG7EU,EAAI+G,aAAaD,EAAI2W,SAAS,SAACpa,GAAW,gBAAC/D,GACzC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAASme,QAAQtc,EAAMkC,EAAO6N,KAAM5R,GAAU6B,EAAMkC,EAAOoa,QAASne,QAG1FU,EAAI+G,aAAaD,EAAI4W,QAAQ,SAACra,GAAW,gBAAC/D,GAIxC,IAHA,IAAMjB,EAAQ0C,EAAQsC,EAAOhF,MAAOiB,GAChC6S,EAAQpR,EAAQsC,EAAO8O,MAAO7S,GAC9Bqe,EAAW,KACNxL,GAAS,GAChBwL,GAAYtf,EAGd,OAAOsf,MAGT3d,EAAI+G,aAAaD,EAAId,OAAO,SAAC3C,GAAW,gBAAC/D,GACvC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAS0G,MAAM7E,EAAMkC,EAAO+Q,GAAI9U,GAAU4B,EAAamC,EAAOua,MAAOte,QAG3FU,EAAI+G,aAAaD,EAAI+W,OAAO,SAACxa,GAAW,gBAAC/D,GACvC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,OAGtBU,EAAI+G,aAAaD,EAAI9D,KAAK,SAACK,GAAW,gBAAC/D,GACrC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAS+c,UAAUtb,EAAQsC,EAAO6B,MAAO5F,EAAS,GAAI4B,EAAamC,EAAO8B,IAAK7F,QAGrGU,EAAI+G,aAAaD,EAAIgM,SAAS,SAACzP,GAAW,gBAAC/D,GACzC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAASwT,QAAQ3R,EAAMkC,EAAOya,OAAQxe,GAAU4B,EAAamC,EAAO6B,MAAO5F,QAGjGU,EAAI+G,aAAaD,EAAIiM,aAAa,SAAC1P,GAAW,gBAAC/D,GAC7C,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAASyT,YAAY5R,EAAMkC,EAAOya,OAAQxe,GAAU4B,EAAamC,EAAO6B,MAAO5F,QAGrGU,EAAI+G,aAAaD,EAAIiX,MAAM,SAAC1a,GAAW,gBAAC/D,GACtC,IAAIjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAQhC,OAPIkB,EAAM6C,EAAO6B,MAAO5F,GAAS,KAC/BjB,EAAQA,EAAMof,QAAQ,OAAQ,KAE5Bjd,EAAM6C,EAAO8B,IAAK7F,GAAS,KAC7BjB,EAAQA,EAAMof,QAAQ,OAAQ,KAGzBpf,MAGT2B,EAAI+G,aAAaD,EAAIkX,YAAY,SAAC3a,GAAW,gBAAC/D,GAC5C,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC5B4E,EAAO/C,EAAMkC,EAAOa,KAAM5E,GAEhC,OAAOjB,EAAMge,UAAU,EAAGnY,EAAKhB,UAAYgB,MAG7ClE,EAAI+G,aAAaD,EAAImX,UAAU,SAAC5a,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC5B4E,EAAO/C,EAAMkC,EAAOa,KAAM5E,GAEhC,OAAOjB,EAAMge,UAAUhe,EAAM6E,OAASgB,EAAKhB,UAAYgB,MAGzDlE,EAAI+G,aAAaD,EAAIoX,SAAS,SAAC7a,GAC7B,IAAM8a,EAAe,UACfC,EAAe,yBAEfC,EAAM,CACVvc,EAAG,EAAG6Y,EAAG,EAAGzb,EAAG,EAAGgW,EAAG,EACrBzX,EAAG,EAAGoE,EAAG,EAAG6P,EAAG,EAAGG,EAAG,EAAGyM,EAAG,EAAGnf,EAAG,EAAGkN,EAAG,EAAGkS,EAAG,EAC7C7gB,EAAG,EAAGY,EAAG,EACTjB,EAAG,EACHG,EAAG,EAAGqB,EAAG,EACTX,EAAG,GAGL,OAAO,SAACoB,GAWN,IAVA,IAAIjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC1BgG,EAAMpE,EAAamC,EAAOiC,IAAKhG,GAC/B2L,EAAMlK,EAAQsC,EAAO4H,IAAK3L,EAbN,GAmBtB4e,GAFJ7f,GADAA,GADAA,EAAQA,EAAM8e,eACAM,QAAQU,EAAc,KACtBZ,OAAO,GAAKlf,EAAMge,UAAU,GAAGoB,QAAQW,EAAc,KAE/Cb,OAAO,GAElBngB,EAAI,EAAGA,EAAIiB,EAAM6E,OAAQ9F,IAChC8gB,GAAWG,EAAIhgB,EAAMkf,OAAOngB,IAG9B,IAAIgD,EAAO8d,EAAQX,OAAO,GAC1B,IAASngB,EAAI,EAAGA,EAAI8gB,EAAQhb,OAAQ9F,IAC9B8gB,EAAQX,OAAOngB,KAAOgD,GACxB8d,EAAUA,EAAQ7B,UAAU,EAAGjf,GAAK8gB,EAAQ7B,UAAUjf,EAAI,GAC1DA,KAEAgD,EAAO8d,EAAQX,OAAOngB,GAQ1B,IAJIgL,SAAS9C,KACX4Y,EAAUA,EAAQ7B,UAAU,EAAG/W,EAAM,IAGhC4Y,EAAQhb,OAAS+H,GACtBiT,GAAW,IAGb,OAAOA,MAIXle,EAAI+G,aAAaD,EAAIsE,UAAU,SAAC/H,GA0B9B,OAAO,SAAC/D,GAIN,OA7Be,SAACyC,EAAWD,GAG3B,IAFA,IAAM0c,EAAiBC,MAAM3c,EAAEoB,OAAS,GAAGwb,KAAK,MAAMze,KAAI,WAAM,OAAAwe,MAAM1c,EAAEmB,OAAS,GAAGwb,KAAK,SAEhFthB,EAAI,EAAGA,GAAK2E,EAAEmB,OAAQ9F,GAAK,EAClCohB,EAAe,GAAGphB,GAAKA,EAGzB,IAAK,IAAIsU,EAAI,EAAGA,GAAK5P,EAAEoB,OAAQwO,GAAK,EAClC8M,EAAe9M,GAAG,GAAKA,EAGzB,IAASA,EAAI,EAAGA,GAAK5P,EAAEoB,OAAQwO,GAAK,EAClC,IAAStU,EAAI,EAAGA,GAAK2E,EAAEmB,OAAQ9F,GAAK,EAAG,CACrC,IAAMuhB,EAAY5c,EAAE3E,EAAI,KAAO0E,EAAE4P,EAAI,GAAK,EAAI,EAC9C8M,EAAe9M,GAAGtU,GAAK4N,KAAKC,IAC1BuT,EAAe9M,GAAGtU,EAAI,GAAK,EAC3BohB,EAAe9M,EAAI,GAAGtU,GAAK,EAC3BohB,EAAe9M,EAAI,GAAGtU,EAAI,GAAKuhB,GAKrC,OAAOH,EAAe1c,EAAEoB,QAAQnB,EAAEmB,QAO3BkI,CAHOjK,EAAMkC,EAAOhF,MAAOiB,GACrB6B,EAAMkC,EAAOa,KAAM5E,QAMpCU,EAAI+G,aAAaD,EAAI5D,QAAQ,SAACG,GAAW,gBAAC/D,GACxC,OAAA6B,EAAMkC,EAAOhF,MAAOiB,GAAS4D,WAG/BlD,EAAI+G,aAAaD,EAAImL,SAAS,SAAC5O,GAAW,gBAAC/D,GACzC,OAAA2S,GAAQ9Q,EAAMkC,EAAOhF,MAAOiB,GAAU6B,EAAMkC,EAAOa,KAAM5E,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,QAGvGU,EAAI+G,aAAaD,EAAI+X,MAAM,SAACxb,GAAW,gBAAC/D,GACtC,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC5Bwf,EAAU3d,EAAMkC,EAAOyb,QAASxf,GAChCsf,EAAape,EAAM6C,EAAOub,WAAYtf,GAAS,GAE/Cyf,EAAeD,EAClB9Y,MAAM,KACN/F,KAAI,SAAAoM,GAAK,OAAAA,EAAIA,EAAEoR,QAAQ,sBAAuB,QAAUpR,KACxD+G,KAAK,MAGF4L,EAAQ,IAAIC,OAAO,IAAMF,EAAe,IAAKH,EAAa,SAAM/e,GAEtE,QAASxB,EAAM6gB,MAAMF,OAGvBhf,EAAI+G,aAAaD,EAAIqY,KAAK,SAAC9b,GAAW,gBAAC/D,GACrC,IAAIjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAC1B8f,EAAUje,EAAMkC,EAAO+b,QAAS9f,IAAY,IAC5CqT,EAASnS,EAAM6C,EAAOsP,OAAQrT,GAC9B2L,EAAMlK,EAAQsC,EAAO4H,IAAK3L,GAC1BgG,EAAMpE,EAAamC,EAAOiC,IAAKhG,GAErC,GAAIqT,EACF,KAAOtU,EAAM6E,OAAS+H,GACpB5M,GAAgB+gB,OAGlB,KAAO/gB,EAAM6E,OAAS+H,GACpB5M,EAAQ+gB,EAAU/gB,EActB,YAVYwB,IAARyF,GACEjH,EAAM6E,OAASoC,IAEfjH,EADEsU,EACMtU,EAAMge,UAAU,EAAG/W,GAEnBjH,EAAMge,UAAU/W,EAAMjH,EAAM6E,OAAQoC,IAK3CjH,MAYT2B,EAAI+G,aAAaD,EAAIuY,UAAU,SAAChc,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQ8J,WAAWhH,EAAMkC,EAAOhF,MAAOiB,IAE7C,OAAO8I,SAAS/J,GACZA,EACA0C,EAAQsC,EAAOzC,aAActB,EAAS,OAK5CU,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,0BAAS+D,EAAOhF,MAAMiB,QAGxBU,EAAI+G,aAAaD,EAAI2O,SAAS,SAACpS,GAAW,gBAAC/D,GACzC,OAAwC,IAAxC6B,EAAMkC,EAAOhF,MAAOiB,GAAS4D,WAG/BlD,EAAI+G,aAAaD,EAAI4O,YAAY,SAACrS,GAAW,gBAAC/D,GAC5C,OAAwC,IAAxC6B,EAAMkC,EAAOhF,MAAOiB,GAAS4D,WAG/BlD,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAA0G,IAA1G2S,GAAQ9Q,EAAMkC,EAAOtB,EAAGzC,GAAU6B,EAAMkC,EAAOvB,EAAGxC,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,QAGhGU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAA0G,IAA1G2S,GAAQ9Q,EAAMkC,EAAOtB,EAAGzC,GAAU6B,EAAMkC,EAAOvB,EAAGxC,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,QAGhGU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,OAAA2S,GAAQ9Q,EAAMkC,EAAOhF,MAAOiB,GAAU6B,EAAMkC,EAAOa,KAAM5E,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,IAAU,MAGjHU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,OAAA2S,GAAQ9Q,EAAMkC,EAAOhF,MAAOiB,GAAU6B,EAAMkC,EAAOa,KAAM5E,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,KAAW,MAGlHU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,OAAA2S,GAAQ9Q,EAAMkC,EAAOhF,MAAOiB,GAAU6B,EAAMkC,EAAOa,KAAM5E,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,IAAU,MAGjHU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,OAAA2S,GAAQ9Q,EAAMkC,EAAOhF,MAAOiB,GAAU6B,EAAMkC,EAAOa,KAAM5E,GAAUkB,EAAM6C,EAAOub,WAAYtf,GAAS,KAAW,MAGlHU,EAAI+G,aAAaD,EAAIwY,SAAS,SAACjc,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAElC,OAAoD,IAA7CjB,EAAMkhB,cAAclhB,EAAM8e,mBAGnCnd,EAAI+G,aAAaD,EAAI0Y,SAAS,SAACnc,GAAW,gBAAC/D,GACzC,IAAMjB,EAAQ8C,EAAMkC,EAAOhF,MAAOiB,GAElC,OAAoD,IAA7CjB,EAAMkhB,cAAclhB,EAAMgf,mBAKnCrd,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,yBAAmB4E,KAAK/C,EAAMkC,EAAOhF,MAAOiB,QAG9CU,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,mBAAUuI,SAASC,UAAUzE,EAAOhF,MAAMiB,KAAa,CAAEpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,qBAGpH/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,uBAAM+D,EAAOhF,MAAMiB,KAAa,IAAI4C,SAGtClC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,OAAA8C,EAAQiB,EAAOhF,MAAOiB,OAGxBU,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,OAAAgD,EAAOe,EAAOhF,MAAOiB,OAGvBU,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,IAAMjB,EAAQ8J,WAAW9E,EAAOhF,MAAMiB,IAEtC,OAAO8I,SAAS/J,GAASA,EAAQ,MAGnC2B,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,OAAAiD,EAAUc,EAAOhF,MAAOiB,OAG1BU,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAAkD,EAASa,EAAOhF,MAAOiB,QAK3B,SAAS2S,GAAQlQ,EAAWD,EAAW8c,GAErC,OAAOA,EACH7c,EAAEob,cAAcoC,cAAczd,EAAEqb,eAChCpb,EAAEwd,cAAczd,GCnWP,gBAAS9B,GAEtB,IAAM8G,EAAM,WAIZ9G,EAAI+G,aAAaD,EAAIpI,QAAQ,SAAC2E,GAAW,gBAAC/D,GACxC,aAKFU,EAAI+G,aAAaD,EAAI0B,OAAO,SAACnF,GAAW,gBAAC/D,GACvC,OAAAgC,EAAW+B,EAAOhF,MAAOiB,OAG3BU,EAAI+G,aAAaD,EAAIE,KAAK,SAAC3D,GAAW,gBAAC/D,GACrC,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIG,MAAM,SAAC5D,GAAW,gBAAC/D,GACtC,sBAAK+D,EAAOhF,MAAMiB,QAGpBU,EAAI+G,aAAaD,EAAI7I,KAAK,SAACoF,GAAW,gBAAC/D,GACrC,OAAA+B,EAAMgC,EAAOhF,MAAOiB,GAASyB,EAAQsC,EAAO6C,MAAO5G,EAAS,QAG9DU,EAAI+G,aAAaD,EAAI+G,KAAK,SAACxK,GAAW,gBAAC/D,GACrC,IAAMmgB,EAAQpe,EAAMgC,EAAOhF,MAAOiB,GAC5B4G,EAAQnF,EAAQsC,EAAO6C,MAAO5G,EAAS,GACvCuX,EAAW4I,EAAMvZ,GAGvB,OAFAuZ,EAAMvZ,GAAS7C,EAAOqc,QAAQpgB,GAEvBuX,MAKT7W,EAAI+G,aAAaD,EAAIpG,SAAS,SAAC2C,GAAW,gBAAC/D,GACzC,yBAAQ+D,EAAOhF,MAAMiB,QAGvBU,EAAI+G,aAAaD,EAAItC,SAAS,SAACnB,GAAW,gBAAC/D,GACzC,OAAyD,IAAzD,kBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIO,YAAY,SAAChE,GAAW,gBAAC/D,GAC5C,OAAyD,IAAzD,kBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,QAG7CU,EAAI+G,aAAaD,EAAIQ,QAAQ,SAACjE,GAAW,gBAAC/D,GACxC,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,IAAY,MAGzDU,EAAI+G,aAAaD,EAAIS,eAAe,SAAClE,GAAW,gBAAC/D,GAC/C,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,KAAa,MAG1DU,EAAI+G,aAAaD,EAAIU,WAAW,SAACnE,GAAW,gBAAC/D,GAC3C,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,IAAY,MAGzDU,EAAI+G,aAAaD,EAAIW,kBAAkB,SAACpE,GAAW,gBAAC/D,GAClD,yBAAQ+D,EAAOhF,MAAMiB,GAAU+D,EAAOa,KAAK5E,KAAa,MAK1DU,EAAI+G,aAAaD,EAAIY,OAAO,SAACrE,GAAW,gBAAC/D,GACvC,OAAA+D,EAAOhF,MAAMiB,OAGfU,EAAI+G,aAAaD,EAAIa,WAAW,SAACtE,GAAW,gBAAC/D,GAC3C,UAAa+D,EAAOhF,MAAOiB,EAAS,aAAW,SAAC4V,GAAM,OAAAA,EAAEhE,MAAOgE,EAAEhE,KAAK,eAAsB,SAG9FlR,EAAI+G,aAAaD,EAAIc,SAAS,SAACvE,GAAW,gBAAC/D,GACzC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,WAAO,OAAGpB,EAAG,gBAAe2D,EAAG,gBAAeC,EAAG,gBAAeC,EAAG,wBAGlH/B,EAAI+G,aAAaD,EAAIiB,QAAQ,SAAC1E,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,UAAQ,SAAC4V,GAAM,OAAAA,EAAEhE,MAAOgE,EAAEhE,KAAK,WAAwB,IAAIhP,YAGjGlC,EAAI+G,aAAaD,EAAIkB,QAAQ,SAAC3E,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,WAAS,SAAC4V,GAAM,yBAAQA,GAAK,GAAK,CAACA,UAGzElV,EAAI+G,aAAaD,EAAImB,OAAO,SAAC5E,GAAW,gBAAC/D,GACvC,UAAa+D,EAAOhF,MAAOiB,EAAS,SAAO,SAAC4V,GAAM,yBAAQA,GAAK,IAAI1T,IAAQ,IAAIA,IAAI,CAAC,CAAC,QAAS0T,YAGhGlV,EAAI+G,aAAaD,EAAIoB,UAAU,SAAC7E,GAAW,gBAAC/D,GAC1C,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAAC4V,GAAM,OAAAA,EAAEhE,MAAOgE,EAAEhE,KAAK,aAAiB,SAGxFlR,EAAI+G,aAAaD,EAAIuB,UAAU,SAAChF,GAAW,gBAAC/D,GAC1C,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAACjB,GAAU,OAAGA,MAAK,UAGnE2B,EAAI+G,aAAaD,EAAIwB,QAAQ,SAACjF,GAAW,gBAAC/D,GACxC,UAAa+D,EAAOhF,MAAOiB,EAAS,YAAU,SAAC4V,GAAM,OAAAA,EAAEhE,MAAOgE,EAAEhE,KAAK,aAAkB,UAGzFlR,EAAI+G,aAAaD,EAAIyB,SAAS,SAAClF,GAAW,gBAAC/D,GACzC,OAAA+D,EAAOhF,MAAMiB,QAKjB,SAAS,GAAajB,EAAoBiB,EAAsBwW,EAAiC3R,GAE/F,IAAM4R,EAAM1X,EAAMiB,GAElB,OAAO,kBAAQyW,IAAQD,EAAOC,EAAI,IAC9BA,EAAI,GACJ5R,EAAU4R,GC1HhB,miBAgBA,EAAmB3W,GACnB,EAAWA,GACX,EAAeA,GACf,EAAaA,GACb,EAAYA,GACZ,EAAYA,GACZ,GAAWA,GACX,GAAcA,GACd,GAAcA,GACd,GAAYA,GACZ,GAAaA","file":"expangine-runtime-live.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"expangine-runtime\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"expangine-runtime\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime-live\"] = factory(require(\"expangine-runtime\"));\n\telse\n\t\troot[\"expangine-runtime-live\"] = factory(root[\"expangine-runtime\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Runtime, Command, defs } from 'expangine-runtime';\n\n\n\nexport type LiveContext = Record<string, any>;\n\nexport type LiveResult = any;\n\nexport type LiveCommand = Command<LiveContext, LiveResult>;\n\nexport type LiveCommandMap<K extends string | number | symbol = string> = Record<K, LiveCommand>;\n\nexport const LiveRuntime = new Runtime<LiveContext, LiveResult>(defs);\n","\nimport { isNumber, isString, isArray, isMap, isObject, isDate, isBoolean, isColor, Color } from 'expangine-runtime';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\n\nexport function saveScope<K extends string>(context: LiveContext, scope: Record<string, K>): Record<K, any> \n{\n  const popped = {} as Record<K, string>;\n\n  for (const prop in scope) \n  {\n    const alias = scope[prop];\n\n    popped[alias] = context[alias]\n  }\n\n  return popped;\n}\n\nexport function restoreScope<K extends string>(context: LiveContext, saved: Record<K, any>) \n{\n  for (const prop in saved)\n  { \n    if (saved[prop] === undefined)\n    {\n      delete context[prop];\n    }\n    else\n    {\n      context[prop] = saved[prop];\n    }\n  }\n}\n\nexport function preserveScope<R = any>(context: LiveContext, props: string[], run: () => R): R\n{\n  const saved = props.map((p) => context[p]);\n\n  const result = run();\n\n  saved.forEach((last, i) => \n    last === undefined\n      ? delete context[props[i]]\n      : context[props[i]] = last\n  );\n\n  return result;\n}\n\nexport function _optional (cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: LiveResult): LiveResult \n{\n  return cmd ? cmd(context) : defaultValue;\n}\n\nexport function _bool (cmd: LiveCommand | undefined, context: LiveContext, defaultValue: boolean = false): boolean\n{\n  return cmd ? !!cmd(context) : defaultValue;\n}\n\nexport function _typed<T> (isValid: (value: any) => value is T, invalidValueDefault: T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue;\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue;\n  };\n}\n\nexport function _typedDynamic<T> (isValid: (value: any) => value is T, invalidValueDefault: () => T) \n{\n  return (cmd: LiveCommand | undefined, context: LiveContext, invalidValue: () => T = invalidValueDefault) => \n  {\n    if (!cmd) \n    {\n      return invalidValue();\n    }\n\n    const value = cmd(context);\n\n    return isValid(value) ? value : invalidValue();\n  };\n}\n\nexport const _boolMaybe = _typed<boolean | undefined> (isBoolean, undefined);\n\nexport const _number = _typed (isNumber, Number.NaN);\n\nexport const _numberMaybe = _typed<number | undefined> (isNumber, undefined);\n\nexport const _text = _typed (isString, '');\n\nexport const _textMaybe = _typed<string | undefined> (isString, undefined);\n\nexport const _list  = _typedDynamic<any[]> (isArray, () => []);\n\nexport const _listMaybe = _typed<any[] | undefined> (isArray, undefined);\n\nexport const _map = _typedDynamic<Map<any, any>> (isMap, () => new Map());\n\nexport const _mapMaybe = _typed<Map<any, any> | undefined> (isMap, undefined);\n\nexport const _object = _typedDynamic<any>(isObject, () => ({}));\n\nexport const _objectMaybe = _typed<any | undefined>(isObject, undefined);\n\nexport const _color = _typedDynamic<Color>(isColor, () => ({ r: 255, g: 255, b: 255, a: 255 }));\n\nexport const _colorMaybe = _typed<any | undefined>(isColor, undefined);\n\nexport const _date = _typedDynamic<Date>(isDate, () => new Date());\n\nexport const _dateMaybe = _typed<Date | undefined> (isDate, undefined);\n\nexport function _asList(getValue: LiveCommand, context: LiveContext)\n{\n  return [ getValue(context) ];\n}\n\nexport function _asMap(getValue: LiveCommand, context: LiveContext)\n{\n  return new Map([['value', getValue(context) ]]);\n}\n\nexport function _asObject(getValue: LiveCommand, context: LiveContext)\n{\n  return { value: getValue(context) };\n}\n\nexport function _asTuple(getValue: LiveCommand, context: any)\n{\n  return [ getValue(context) ];\n}\n\nexport function _colorOrNumber(getValue: LiveCommand, context: any)\n{\n  const value = getValue(context);\n\n  if (isColor(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value))\n  {\n    return { r: value, g: value, b: value, a: value };\n  }\n\n  return { r: 255, g: 255, b: 255, a: 255 };\n}\n","\nimport { Runtime, ConstantExpression, GetExpression, OperationExpression, ChainExpression, \n  IfExpression, NotExpression, AndExpression, OrExpression, ForExpression, \n  WhileExpression, DefineExpression, SwitchExpression, SetExpression, \n  DoExpression, TemplateExpression, UpdateExpression, InvokeExpression, \n  ReturnExpression, NoExpression, TupleExpression, ObjectExpression,\n  isUndefined, objectMap } from 'expangine-runtime';\nimport { preserveScope } from './helper';\nimport { LiveCommand, LiveCommandMap, LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n\n  run.setExpression(ConstantExpression, (expr, _thisRun) => \n  {\n    return () => expr.value\n  });\n\n  run.setExpression(GetExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n\n    return (context) => \n    {\n      let value: any = context;\n\n      for (let i = 0; i < parts.length && !isUndefined(value); i++) \n      {\n        const next = parts[i](context);\n\n        if (isUndefined(value[next])) \n        {\n          return undefined;\n        }\n\n        value = value[next];\n      }\n      \n      return value;\n    };\n  });\n\n  run.setExpression(SetExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n    const last: number = parts.length - 1;\n    const getValue: LiveCommand = thisRun.getCommand(expr.value);\n\n    return (context) => \n    {\n      let value: any = context;\n\n      for (let i = 0; i < last && !isUndefined(value); i++) \n      {\n        const next = parts[i](context);\n\n        if (isUndefined(value[next])) \n        {\n          return false;\n        }\n\n        value = value[next];\n      }\n\n      if (!isUndefined(value)) \n      {\n        const dest = parts[last](context);\n        value[dest] = getValue(context);\n\n        return true;\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(UpdateExpression, (expr, thisRun) => \n  {\n    const parts: LiveCommand[] = expr.path.map(sub => thisRun.getCommand(sub));\n    const last: number = parts.length - 1;\n    const getValue: LiveCommand = thisRun.getCommand(expr.value);\n    const currentVariable: string = expr.currentVariable;\n\n    return (context) => \n    {\n      let value: any = context;\n\n      for (let i = 0; i < last && !isUndefined(value); i++) \n      {\n        const next = parts[i](context);\n\n        if (isUndefined(value[next])) \n        {\n          return false;\n        }\n\n        value = value[next];\n      }\n\n      if (!isUndefined(value)) \n      {\n        const dest = parts[last](context);\n\n        preserveScope(context, [currentVariable], () => \n        {\n          context[currentVariable] = value[dest];\n        \n          value[dest] = getValue(context);\n        });\n\n        return true;\n      }\n\n      return false;\n    };\n  });\n\n  run.setExpression(OperationExpression, (expr, thisRun) => \n  {\n    const params: LiveCommandMap = objectMap(expr.params, e => thisRun.getCommand(e));\n    const op = thisRun.getOperation(expr.name);\n\n    if (!op) \n    { \n      throw new Error(`Operation with ${expr.name} is not defined in the given runtime.`);\n    }\n    \n    const defaults = thisRun.getOperationScopeDefaults(expr.name);\n    let scopeAlias = expr.scopeAlias;\n\n    if (defaults) \n    {\n      for (const prop in defaults) \n      {\n        if (!(prop in scopeAlias)) \n        { \n          if (scopeAlias === expr.scopeAlias) \n          {\n            scopeAlias = { ...scopeAlias };\n          }\n\n          scopeAlias[prop] = defaults[prop];\n        }\n      }\n    }\n\n    const operationCommand = op(params, scopeAlias);\n\n    return (context) =>\n    {\n      if (thisRun.returnProperty in context) return;\n\n      return operationCommand(context);\n    };\n  });\n\n  run.setExpression(ChainExpression, (expr, thisRun) => \n  { \n    const chain: LiveCommand[] = expr.chain.map(data => thisRun.getCommand(data));\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      let last;\n\n      for (const cmd of chain)\n      {\n        last = cmd(context);\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n      }\n\n      return last;\n    };\n  });\n\n  run.setExpression(IfExpression, (expr, thisRun) => \n  {\n    const cases: [LiveCommand, LiveCommand][] = expr.cases.map(([test, result]) => [thisRun.getCommand(test), thisRun.getCommand(result)]);\n    const otherwise: LiveCommand = thisRun.getCommand(expr.otherwise);\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const caseExpression of cases)\n      {\n        const [test, result] = caseExpression;\n\n        if (test(context)) \n        {\n          return thisRun.returnProperty in context\n            ? undefined\n            : result(context);\n        }\n      }\n      \n      if (thisRun.returnProperty in context) return;\n\n      return otherwise(context);\n    };\n  });\n\n  run.setExpression(SwitchExpression, (expr, thisRun) => \n  {\n    const valueCommand: LiveCommand = thisRun.getCommand(expr.value);\n    const cases: [LiveCommand[], LiveCommand][] = expr.cases.map(([tests, result]) => [\n      tests.map(t => thisRun.getCommand(t)),\n      thisRun.getCommand(result)\n    ]);\n    const defaultCase: LiveCommand = thisRun.getCommand(expr.defaultCase);\n    const isEqual = thisRun.getOperation(expr.op);\n    const noScope = {};\n    \n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      const value = valueCommand(context);\n\n      if (thisRun.returnProperty in context) return;\n\n      for (const [tests, result] of cases)\n      {\n        let matches = false;\n\n        for (const test of tests) \n        { \n          if (isEqual({ value: () => value, test }, noScope)(context)) \n          {\n            matches = true;\n            break;\n          }\n\n          if (thisRun.returnProperty in context) return;\n        }\n\n        if (matches) \n        {\n          return result(context);\n        }\n      }\n\n      return defaultCase(context);\n    };\n  });\n\n  run.setExpression(NotExpression, (expr, thisRun) => \n  {\n    const expression: LiveCommand = thisRun.getCommand(expr.expression);\n\n    return (context) => !expression(context);\n  });\n\n  run.setExpression(AndExpression, (expr, thisRun) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n    const defaultResult: boolean = expressions.length > 0;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const and of expressions)\n      {\n        if (!and(context) || thisRun.returnProperty in context)\n        {\n          return false;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(OrExpression, (expr, thisRun) => \n  {\n    const expressions: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n    const defaultResult: boolean = expressions.length === 0;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      for (const or of expressions)\n      {\n        const pass = or(context);\n\n        if (pass || thisRun.returnProperty in context)\n        {\n          return pass;\n        }\n      }\n\n      return defaultResult;\n    };\n  });\n\n  run.setExpression(ForExpression, (expr, thisRun) => \n  {\n    const variable: string = expr.variable;\n    const start: LiveCommand = thisRun.getCommand(expr.start);\n    const end: LiveCommand = thisRun.getCommand(expr.end);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [variable, breakVariable], () => \n      {\n        context[breakVariable] = false;\n\n        let i = start(context);\n        let iterations = 0;\n        let stop = end(context);\n        let last;\n        const dir = i < stop ? 1 : -1;\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n\n        while ((dir === 1 ? i <= stop : i >= stop) && iterations++ < max) \n        {\n          context[variable] = i;\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n\n          i += dir;\n          stop = end(context);\n\n          if (thisRun.returnProperty in context) return;\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(WhileExpression, (expr, thisRun) => \n  {\n    const condition: LiveCommand = thisRun.getCommand(expr.condition);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        while (condition(context) && iterations++ < max)\n        {\n          if (thisRun.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n        }\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DoExpression, (expr, thisRun) => \n  {\n    const condition: LiveCommand = thisRun.getCommand(expr.condition);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n    const breakVariable: string = expr.breakVariable;\n    const max: number = expr.maxIterations;\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, [breakVariable], () =>\n      {\n        let iterations = 0;\n        let last;\n\n        context[breakVariable] = false;\n\n        do\n        {\n          if (thisRun.returnProperty in context) return;\n\n          last = body(context);\n\n          if (context[breakVariable] || thisRun.returnProperty in context) \n          {\n            break;\n          }\n\n        } while(condition(context) && iterations++ < max);\n\n        return last;\n      });\n    };\n  });\n\n  run.setExpression(DefineExpression, (expr, thisRun) => \n  {\n    const define: [string, LiveCommand][] = expr.define.map(([name, e]) => [name, thisRun.getCommand(e)]);\n    const vars: string[] = define.map(([name]) => name);\n    const body: LiveCommand = thisRun.getCommand(expr.body);\n\n    return (context) =>\n    {\n      if (thisRun.returnProperty in context) return;\n\n      return preserveScope(context, vars, () =>\n      {\n        for (const [name, defined] of define)\n        {\n          if (thisRun.returnProperty in context)\n          {\n            return;\n          }\n\n          context[name] = defined(context);\n        }\n\n        if (thisRun.returnProperty in context)\n        {\n          return;\n        }\n\n        return body(context);\n      });\n    };\n  });\n\n  run.setExpression(TemplateExpression, (expr, thisRun) => \n  {\n    const SECTION_TYPES = 2;\n    const SECTION_INDEX_CONSTANT = 0;\n\n    const params: LiveCommandMap = objectMap(expr.params, e => thisRun.getCommand(e));\n    const template: string = expr.template;\n\n    const sections = template.split(/[\\{\\}]/).map((section, index) => {\n      return index % SECTION_TYPES === SECTION_INDEX_CONSTANT\n        ? (_source: any) => section\n        : (source: any) => source && section in source ? source[section] : '';\n    });\n\n    return (context) =>\n    {\n      const source = objectMap(params, p => p(context));\n\n      return sections.reduce((out, section) => out + section(source), '');\n    };\n  });\n\n  run.setExpression(InvokeExpression, (expr, thisRun) =>\n  {\n    const func = thisRun.getFunction(expr.name);\n    const command = thisRun.getCommand(func.options.expression);\n    const args = objectMap(expr.args, a => thisRun.getCommand(a));\n\n    return (context) => \n    {\n      if (thisRun.returnProperty in context) return;\n\n      const params = objectMap(args, a => a(context));\n\n      command(params);\n\n      return params[thisRun.returnProperty];\n    };\n  });\n\n  run.setExpression(ReturnExpression, (expr, thisRun) =>\n  {\n    const returnValue = thisRun.getCommand(expr.value);\n\n    return (context) => context[thisRun.returnProperty] = returnValue(context);\n  });\n\n  run.setExpression(TupleExpression, (expr, thisRun) =>\n  {\n    const elements: LiveCommand[] = expr.expressions.map(e => thisRun.getCommand(e));\n\n    return (context) => elements.map(cmd => cmd(context));\n  });\n\n  run.setExpression(ObjectExpression, (expr, thisRun) =>\n  {\n    const props: LiveCommandMap = objectMap(expr.props, e => thisRun.getCommand(e));\n\n    return (context) => objectMap(props, cmd => cmd(context));\n  });\n\n  run.setExpression(NoExpression, () => () => undefined);\n\n}","import { Runtime, AnyOps, parse, compare, copy, toString, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _asList, _asTuple, _asMap, _asObject, restoreScope, saveScope } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = AnyOps;\n\n  // Operations\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.isDefined, (params) => (context) => {\n    const value = params.value(context);\n    \n    return value !== null && value !== undefined;\n  });\n\n  run.setOperation(ops.getDefined, (params, scope) => (context) => {\n    const value = params.value(context);\n    const isDefined = value !== null && value !== undefined;\n  \n    if (isDefined) {\n      const saved = saveScope(context, scope);\n      context[scope.defined] = value;\n      params.defined(context);\n      restoreScope(context, saved);\n    }\n\n    return isDefined;\n  });\n\n  run.setOperation(ops.coalesce, (params) => (context) => {\n    const a = params.a(context);\n    if (a !== null && a !== undefined) return a;\n    const b = params.b(context);\n    if (b !== null && b !== undefined) return b;\n    const c = params.c(context);\n    if (c !== null && c !== undefined) return c;\n    const d = params.d(context);\n    if (d !== null && d !== undefined) return d;\n    const e = params.e(context);\n    if (e !== null && e !== undefined) return e;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    true\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    toString(params.value(context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n};","\nimport { Runtime, BooleanOps, isBoolean, COMPONENT_MAX } from 'expangine-runtime';\nimport { _bool, _asList, _asObject, _asTuple, _asMap, _boolMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = BooleanOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    false\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _boolMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.and, (params) => (context) => \n    _bool(params.a, context) && _bool(params.b, context)\n  );\n\n  run.setOperation(ops.or, (params) => (context) => \n    _bool(params.a, context) || _bool(params.b, context)\n  );\n\n  run.setOperation(ops.xor, (params) => (context) => \n    _bool(params.a, context) !== _bool(params.b, context)\n  );\n\n  run.setOperation(ops.not, (params) => (context) => \n    !_bool(params.a, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    (_bool(params.value, context) ? 1 : 0) - (_bool(params.test, context) ? 1 : 0)\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isBoolean(params.value(context))\n  );\n\n  run.setOperation(ops.isTrue, (params) => (context) => \n    _bool(params.value, context, false)\n  );\n\n  run.setOperation(ops.isFalse, (params) => (context) => \n    !_bool(params.value, context, false)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = params.value(context);\n\n    return value ? 1 : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) ? 'true' : 'false'\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ColorOps, COMPONENT_MAX, Color, clampComponent, ColorType, ColorSpaceHSL, ColorNames, isColor, ColorSpaceRGB } from 'expangine-runtime';\nimport { _color, _colorMaybe, _number, saveScope, restoreScope, _colorOrNumber, _bool, _text, _object, _asList, _asMap, _asTuple } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: no-bitwise\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ColorOps;\n\n  // Static \n\n  run.setOperation(ops.create, () => () =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _colorMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0)\n  );\n\n  run.setOperation(ops.copy, (params) => (context) => \n    ({ ..._color(params.value, context) })\n  );\n\n  run.setOperation(ops.build, (params) => (context) => ({\n    r: _number(params.r, context, COMPONENT_MAX),\n    g: _number(params.g, context, COMPONENT_MAX),\n    b: _number(params.b, context, COMPONENT_MAX),\n    a: _number(params.a, context, COMPONENT_MAX),\n  }));\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.op, (params, scope) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const saved = saveScope(context, scope);\n    context[scope.value] = value.r;\n    context[scope.test] = test.r;\n    context[scope.component] = 'r';\n    const r = _number(params.r, context, COMPONENT_MAX);\n    context[scope.value] = value.g;\n    context[scope.test] = test.g;\n    context[scope.component] = 'g';\n    const g = _number(params.g, context, COMPONENT_MAX);\n    context[scope.value] = value.b;\n    context[scope.test] = test.b;\n    context[scope.component] = 'b';\n    const b = _number(params.b, context, COMPONENT_MAX);\n    context[scope.value] = value.a;\n    context[scope.test] = test.a;\n    context[scope.component] = 'a';\n    const a = _number(params.a, context, COMPONENT_MAX);\n    restoreScope(context, saved);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.clamp, (params) => (context) => {\n    const value = _color(params.value, context);\n    \n    return {\n      r: clampComponent(value.r),\n      g: clampComponent(value.g),\n      b: clampComponent(value.b),\n      a: clampComponent(value.a),\n    };\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r,\n      g: value.g + addend.g,\n      b: value.b + addend.b,\n      a: alpha ? value.a + addend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.adds, (params) => (context) => {\n    const value = _color(params.value, context);\n    const addend = _colorOrNumber(params.addend, context);\n    const scale = _colorOrNumber(params.addendScale, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r + addend.r * scale.r,\n      g: value.g + addend.g * scale.g,\n      b: value.b + addend.b * scale.b,\n      a: alpha ? value.a + addend.a * scale.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _color(params.value, context);\n    const subtrahend = _colorOrNumber(params.subtrahend, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r - subtrahend.r,\n      g: value.g - subtrahend.g,\n      b: value.b - subtrahend.b,\n      a: alpha ? value.a - subtrahend.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.mul, (params) => (context) => {\n    const value = _color(params.value, context);\n    const multiplier = _colorOrNumber(params.multiplier, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r * multiplier.r,\n      g: value.g * multiplier.g,\n      b: value.b * multiplier.b,\n      a: alpha ? value.a * multiplier.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.div, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: divSafe(value.r, divisor.r),\n      g: divSafe(value.g, divisor.g),\n      b: divSafe(value.b, divisor.b),\n      a: alpha ? divSafe(value.a, divisor.a) : value.a,\n    };\n  });\n\n  run.setOperation(ops.mod, (params) => (context) => {\n    const value = _color(params.value, context);\n    const divisor = _colorOrNumber(params.divisor, context);\n    const alpha = _bool(params.alpha, context, true);\n    \n    return {\n      r: value.r % divisor.r,\n      g: value.g % divisor.g,\n      b: value.b % divisor.b,\n      a: alpha ? value.a % divisor.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.format, (params) => (context) => {\n    const value = _color(params.value, context);\n    const formatId = _text(params.format, context);\n    const format = ColorType.getFormat(formatId);\n\n    if (!format) {\n      return '';\n    }\n\n    return format.formatter(value);\n  });\n\n  run.setOperation(ops.parse, (params) => (context) => {\n    const value = params.value(context);\n    \n    return ColorType.baseType.normalize(value);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _color(params.start, context);\n    const end = _color(params.end, context);\n    const delta = _number(params.delta, context, 0);\n\n    return {\n      r: (end.r - start.r) * delta + start.r,\n      g: (end.g - start.g) * delta + start.g,\n      b: (end.b - start.b) * delta + start.b,\n      a: (end.a - start.a) * delta + start.a,\n    };\n  });\n\n  run.setOperation(ops.lighten, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = _number(params.amount, context, 0);\n\n    return {\n      r: value.r + (COMPONENT_MAX - value.r) * amount,\n      g: value.g + (COMPONENT_MAX - value.g) * amount,\n      b: value.b + (COMPONENT_MAX - value.b) * amount,\n      a: value.a + (COMPONENT_MAX - value.a) * amount,\n    };\n  });\n\n  run.setOperation(ops.darken, (params) => (context) => {\n    const value = _color(params.value, context);\n    const amount = 1 - _number(params.amount, context, 0);\n\n    return {\n      r: value.r * amount,\n      g: value.g * amount,\n      b: value.b * amount,\n      a: value.a * amount,\n    };\n  });\n\n  run.setOperation(ops.toHSL, (params) => (context) =>\n    ColorSpaceHSL.fromColor(_color(params.value, context))\n  );\n\n  run.setOperation(ops.fromHSL, (params) => (context) =>\n    ColorSpaceHSL.toColor(_object(params.value, context))\n  );\n\n  run.setOperation(ops.luminance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const L = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722;\n\n    return L / COMPONENT_MAX;\n  });\n\n  run.setOperation(ops.contrast, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    const valueL = value.r * 0.2126 + value.g * 0.7152 + value.b * 0.0722; \n    const testL = test.r * 0.2126 + test.g * 0.7152 + test.b * 0.0722;\n    const L1 = Math.max(valueL, testL);\n    const L2 = Math.min(valueL, testL);\n\n    return (L1 + 0.05) / (L2 + 0.05);\n  });\n\n  run.setOperation(ops.invert, (params) => (context) => {\n    const value = _color(params.value, context);\n    const alpha = _bool(params.alpha, context, false);\n\n    return {\n      r: COMPONENT_MAX - value.r,\n      g: COMPONENT_MAX - value.g,\n      b: COMPONENT_MAX - value.b,\n      a: alpha ? COMPONENT_MAX - value.a : value.a,\n    };\n  });\n\n  run.setOperation(ops.opaque, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = COMPONENT_MAX;\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.alpha, (params) => (context) => {\n    const { r, g, b } = _color(params.value, context);\n    const a = _number(params.alpha, context, COMPONENT_MAX);\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.distance, (params) => (context) => {\n    const value = _color(params.value, context);\n    const test = _color(params.test, context);\n    \n    return dist(value, test);\n  });\n\n  run.setOperation(ops.named, (params) => (context) => {\n    const value = _color(params.name, context);\n\n    return value;\n  });\n\n  run.setOperation(ops.getName, (params) => (context) => {\n    const value = _color(params.value, context);\n    let closestName: string = '';\n    let closestDistance: number = -1;\n\n    for (const [name, named] of ColorNames.options.constants.entries()) {\n      const distance = dist(value, named);\n      if (closestDistance === -1 || distance < closestDistance) {\n        closestName = name;\n        closestDistance = distance;\n      }\n    }\n\n    return closestName;\n  });\n\n  run.setOperation(ops.blend, (params) => (context) => {\n    const top = _color(params.top, context);\n    const bottom = _color(params.bottom, context);\n    const modeName = params.mode(context);\n    const blender = BlendFunctions[modeName];\n\n    if (!blender) {\n      return top;\n    }\n\n    return {\n      r: blender(bottom.r, top.r),\n      g: blender(bottom.g, top.g),\n      b: blender(bottom.b, top.b),\n      a: top.a,\n    };\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isColor(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), _number(params.epsilon, context, 0)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compareColor(_color(params.value, context), _color(params.test, context), 0) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, () => () =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asDate, () => () =>\n    new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = _color(params.value, context);\n\n    return (value.r & 0xFF) | \n      ((value.g & 0xFF) << 8) |\n      ((value.b & 0xFF) << 16) |\n      ((value.a & 0xFF) << 24);\n  })\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    ColorSpaceRGB.formatMap.bestfit.formatter(_color(params.value, context))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compareColor(x: Color, y: Color, epsilon: number): number\n{\n  const r = Math.abs(x.r - y.r) <= epsilon;\n  const g = Math.abs(x.g - y.g) <= epsilon;\n  const b = Math.abs(x.b - y.b) <= epsilon;\n  const a = Math.abs(x.a - y.a) <= epsilon;\n\n  return r && g && b && a\n    ? 0\n    : (x.r + x.g + x.b + x.a) - (y.r + y.g + y.b + y.a);\n}\n\nfunction divSafe(a: number, b: number): number\n{\n  return b === 0 ? 0 : a / b;\n}\n\nfunction dist(a: Color, b: Color): number\n{\n  return Math.abs(a.r - b.r) + \n    Math.abs(a.g - b.g) + \n    Math.abs(a.b - b.b) + \n    Math.abs(a.a - b.a);\n}\n\nfunction mul(a: number, b: number): number\n{\n  return (a * b + COMPONENT_MAX) >> 8;\n}\n\nfunction div(a: number, b: number): number\n{\n  return b === 0 ? 0 : ((a << 8) - a) / b;\n}\n\nfunction inv(a: number): number\n{\n  return COMPONENT_MAX - a;\n}\n\nconst BlendFunctions: Record<string, (a: number, b: number) => number> = {\n  multiply:   (a, b) => mul(a, b),\n  screen:     (a, b) => inv(mul(inv(a), inv(b))),\n  overlay:    (a, b) => a < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  hard:       (a, b) => b < 127 ? 2 * mul(a, b) : inv(2 * mul(inv(a), inv(b))),\n  soft:       (a, b) => mul(inv(2 * b), mul(a, a)) + 2 * mul(b, a),\n  dodge:      (a, b) => div(a, inv(b)),\n  burn:       (a, b) => div(inv(b), a),\n  divide:     (a, b) => a === b ? COMPONENT_MAX : div(a, b),\n  addition:   (a, b) => clampComponent(a + b),\n  sub:        (a, b) => clampComponent(a - b),\n  diff:       (a, b) => clampComponent(b - a),\n  darken:     (a, b) => Math.min(a, b),\n  lighten:    (a, b) => Math.max(a, b),\n};","\nimport { Runtime, DateOps, DateType, currentLocale, compareDates, startOf, mutate, add, getters, setters, endOf, getDaysInMonth, getDaysInYear, getWeeksInYear, diff, adjusters, getDateOffset, isDaylightSavingTime, isLeapYear, Unit, parse, DateFormat, isDate, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _date, _text, _bool, _asList, _asMap, _asObject, _asTuple, _dateMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = DateOps;\n\n  const MILLIS_IN_SECONDS = 1000;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.now, (params) => (context) =>\n    new Date()\n  ),\n\n  run.setOperation(ops.today, (params) => (context) =>\n    startOf.day(new Date())\n  );\n\n  run.setOperation(ops.tomorrow, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, +1))\n  );\n\n  run.setOperation(ops.yesterday, (params) => (context) =>\n    mutate(mutate(new Date(), startOf.day), d => add.day(d, -1))\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _dateMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.parse, (params) => (context) => \n    _bool(params.parseAsUTC, context, false)\n      ? new DateType({ parseAsUTC: true }).normalize(params.value(context))\n      : DateType.baseType.normalize(params.value(context))\n  );\n\n  run.setOperation(ops.fromText, (params) => (context) => \n    DateType.baseType.normalize(_text(params.value, context))\n  );\n\n  run.setOperation(ops.fromTimestamp, (params) => (context) => \n    new Date(_number(params.value, context, Date.now()))\n  );\n\n  run.setOperation(ops.fromTimestampSeconds, (params) => (context) => \n    new Date(_number(params.value, context, Date.now() / MILLIS_IN_SECONDS) * MILLIS_IN_SECONDS)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() < test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.max, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n\n    return value.valueOf() > test.valueOf() ? value : test;\n  });\n\n  run.setOperation(ops.get, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    \n    return prop in getters ? getters[prop](value) : -1;\n  });\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const value = _date(params.value, context);\n    const prop = _text(params.property, context, 'timestamp');\n    const update = _number(params.set, context, 0);\n\n    return prop in setters ? setters[prop](value, update) : value;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 0);\n\n    return unit in add ? add[unit](value, amount) : value;\n  });\n\n  run.setOperation(ops.sub, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis');\n    const amount = _number(params.amount, context, 0);\n\n    return unit in add ? add[unit](value, -amount) : value;\n  });\n\n  run.setOperation(ops.startOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in startOf ? mutate(value, startOf[unit]) : value;\n  });\n\n  run.setOperation(ops.endOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'day');\n\n    return unit in endOf ? mutate(value, endOf[unit]) : value;\n  });\n\n  run.setOperation(ops.daysInMonth, (params) => (context) => \n    getDaysInMonth(_date(params.value, context))\n  );\n\n  run.setOperation(ops.daysInYear, (params) => (context) => \n    getDaysInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.weeksInYear, (params) => (context) => \n    getWeeksInYear(_date(params.value, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    new Date(_date(params.value, context).getTime())\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n\n    return unit in startOf ? compareDates(value, test, unit) : 0;\n  });\n\n  run.setOperation(ops.diff, (params) => (context) => {\n    const value = _date(params.value, context);\n    const test = _date(params.test, context);\n    const unit = _text(params.unit, context, 'millis');\n    const absolute = _bool(params.absolute, context, true);\n    const adjust = _text(params.adjust, context, 'down');\n\n    if (!(unit in diff) || !(adjust in adjusters))\n    {\n      return Number.NaN;\n    }\n\n    const amount = adjusters[adjust]( diff[unit](value, test) );\n\n    return absolute ? Math.abs(amount) : amount;\n  });\n\n  run.setOperation(ops.timezoneOffset, (params) => (context) => \n    getDateOffset(_date(params.value, context))\n  );\n\n  run.setOperation(ops.toText, (params) => (context) =>\n    DateFormat.format(_text(params.format, context), [_date(params.value, context), currentLocale])\n  );\n\n  run.setOperation(ops.toISOText, (params) => (context) => \n    _date(params.value, context).toISOString()\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isDate(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) === 0\n  );\n\n  run.setOperation(ops.isBefore, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isBeforeOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isAfter, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isAfterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _date(params.value, context);\n    const start = _date(params.start, context);\n    const end = _date(params.end, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    const startInclusive = _bool(params.startInclusive, context, true);\n    const endInclusive = _bool(params.endInclusive, context, false);\n\n    const startCompare = compareDates(value, start, unit);\n    const endCompare = compareDates(value, end, unit);\n    \n    const startOffset = startInclusive ? 0 : 1;\n    const endOffset = endInclusive ? 0 : -1;\n\n    return startCompare >= startOffset && endCompare <= endOffset;\n  });\n\n  run.setOperation(ops.isStartOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in startOf\n      ? mutate(value, startOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isEndOf, (params) => (context) => {\n    const value = _date(params.value, context);\n    const unit = _text(params.unit, context, 'millis') as Unit;\n    \n    return unit in endOf\n      ? mutate(value, endOf[unit]).getTime() === value.getTime()\n      : false;\n  });\n\n  run.setOperation(ops.isDST, (params) => (context) => \n    isDaylightSavingTime(_date(params.value, context))\n  );\n\n  run.setOperation(ops.isLeapYear, (params) => (context) => \n    isLeapYear(_date(params.value, context))\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    true\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX })\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    _date(params.value, context).getTime()\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}","import { Runtime, ListOps, getCompare, isBoolean, isEmpty, isDate, isNumber, isString, isArray, COMPONENT_MAX, isColor } from 'expangine-runtime';\nimport { _list, _optional, _number, saveScope, restoreScope, _text, _bool, _asTuple, _asObject, _numberMaybe, _listMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ListOps;\n\n  // Static\n\n  run.setOperation(ops.create, (params) => (context) => \n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.build, (params, scope) => (context) => {\n    const n = _number(params.count, context);\n    const list: any[] = [];\n\n    if (n <= 0) \n    {\n      return list;\n    }\n\n    const saved = saveScope(context, scope);\n\n    if (_bool(params.sameItem, context, false)) \n    {\n      context[scope.index] = 0;\n      context[scope.last] = undefined;\n      context[scope.list] = list;\n      context[scope.count] = n;\n\n      const item = params.item(context);\n\n      for (let i = 0; i < n; i++) \n      {\n        list[i] = item;\n      }\n    } \n    else \n    {\n      let last;\n\n      for (let i = 0; i < n; i++) \n      {\n        context[scope.index] = i;\n        context[scope.last] = last;\n        context[scope.list] = list;\n        context[scope.count] = n;\n\n        const item = params.item(context);\n\n        last = item;\n        list.push(item);\n      }\n    }\n\n    restoreScope(context, saved);\n\n    return list;\n  });\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.list, context)[_number(params.index, context)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context);\n    const prev = list[index];\n    list[index] = params.value(context);\n\n    return prev;\n  });\n\n  run.setOperation(ops.add, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addFirst, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.unshift(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.addLast, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    if (item !== undefined) {\n      list.push(item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.insert, (params) => (context) => {\n    const list = _list(params.list, context);\n    const item = _optional(params.item, context);\n    const index = _number(params.index, context, 0);\n    if (item !== undefined) {\n      list.splice(index, 0, item);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.remove, (params, scope) => (context) => \n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n, \n      (_, i, list) => (list.splice(i, 1), i), \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.removeFirst, (params, scope) => (context) => \n    _list(params.list, context).shift()\n  );\n\n  run.setOperation(ops.removeLast, (params, scope) => (context) => \n    _list(params.list, context).pop()\n  );\n\n  run.setOperation(ops.removeAt, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const index = _number(params.index, context, -1);\n    let item;\n    if (index >= 0 && index < list.length) {\n      item = list[index];\n      list.splice(index, 1);\n    }\n\n    return item;\n  });\n\n  run.setOperation(ops.removeWhere, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => n - 1, \n      n => -1,\n      [],\n      (item, index, list, removed) => {\n        if (params.where(context)) {\n          removed.push(item);\n          list.splice(index, 1);\n        }\n        \n        return removed;\n      }\n    )\n  );\n\n  run.setOperation(ops.contains, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => 0, \n      n => n,\n      () => true, \n      () => false\n    )\n  );\n\n  run.setOperation(ops.find, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return undefined;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      undefined,\n      (item, index) => {\n        if (params.where(context)) {\n          return item;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.copy, (params, scope) => (context) => \n    params.deepCopy\n      ? handleList(\n          _list(params.list, context), \n          context, \n          scope, \n          list => list.map(item => {\n            context[scope.copy] = item;\n            \n            return params.deepCopy(context);\n          })\n        )\n      : _list(params.list, context).slice()\n  );\n\n  run.setOperation(ops.reverse, (params) => (context) => {\n    const list = _list(params.list, context);\n    const half = Math.floor(list.length / 2); \n    \n    for (let i = 0, j = list.length - 1; i < half; i++, j--) { \n      swap(list, i, j);\n    }\n    \n    return list;\n  });\n\n  run.setOperation(ops.exclude, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const exclude = _list(params.exclude, context);\n\n    for (const item of exclude) \n    {\n      handleListIsEqual(list, context, params, scope, item, n => 0, n => n, (_, k) => (list.splice(k, 1), true), () => false);\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.overlap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const overlap = _list(params.overlap, context);\n    const overlapping: any[] = [];\n\n    for (const item of overlap) \n    {\n      if (handleListIsEqual(list, context, params, scope, item, n => 0, n => n, () => true, () => false))\n      {\n        overlapping.push(item)\n      }\n    }\n\n    return overlapping;\n  });\n\n  run.setOperation(ops.sort, (params, scope) => (context) =>\n    handleList(\n      _list(params.list, context), \n      context, \n      scope, \n      list => {\n        list.sort((value, test) => {\n          context[scope.list] = list;\n          context[scope.value] = value;\n          context[scope.test] = test;\n\n          return _number(params.compare, context, 0);\n        });\n\n        return list;\n      }\n    )\n  );\n\n  run.setOperation(ops.shuffle, (params) => (context) => {\n    const list = _list(params.list, context);\n    let times = _number(params.times, context, 1);\n    const n = list.length;\n\n    while (--times >= 0) {\n      for (let i = 0; i < n; i++) {\n        swap(list, i, Math.floor(Math.random() * n));\n      }\n    }\n\n    return list;\n  });\n\n  run.setOperation(ops.unique, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const skip = {};\n    const unique = [];\n\n    for (let i = 0; i < list.length - 1; i++) {\n      if (skip[i]) {\n        continue;\n      }\n\n      const item = list[i];\n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (!exists) {\n        unique.push(item);\n      }\n    }\n\n    return unique;\n  });\n\n  run.setOperation(ops.duplicates, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const once = _bool(params.once, context, false);\n    const skip = {};\n    const duplicates = [];\n\n    for (let i = 0; i < list.length; i++) {\n\n      const item = list[i];\n\n      if (skip[i]) {\n        if (once) {\n          continue;\n        } else {\n          duplicates.push(item);\n        }\n      }\n      \n      const exists = handleListIsEqual(list, context, params, scope, item, n => i + 1, n => n, (_, k) => skip[k] = true, () => false);\n\n      if (exists) {\n        duplicates.push(item);\n      }\n    }\n\n    return duplicates;\n  });\n\n  run.setOperation(ops.take, (params) => (context) => \n    _list(params.list, context).slice(0, _number(params.count, context))\n  );\n\n  run.setOperation(ops.skip, (params) => (context) => \n    _list(params.list, context).slice(_number(params.count, context))\n  );\n\n  run.setOperation(ops.drop, (params) => (context) => {\n    const list = _list(params.list, context);\n    const count = _number(params.count, context);\n\n    return list.slice(0, list.length - count);\n  });\n\n  run.setOperation(ops.append, (params) => (context) => {\n    const list = _list(params.list, context);\n    const append = _list(params.append, context);\n\n    return list.concat(append);\n  });\n\n  run.setOperation(ops.prepend, (params) => (context) => {\n    const list = _list(params.list, context);\n    const prepend = _list(params.prepend, context);\n\n    return prepend.concat(list);\n  });\n\n  run.setOperation(ops.indexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context), \n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n, _number(params.start, context, 0))), \n      n => n, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.lastIndexOf, (params, scope) => (context) =>\n    handleListIsEqual(\n      _list(params.list, context),\n      context, \n      params, \n      scope, \n      params.item(context), \n      n => Math.max(0, Math.min(n - 1, _number(params.start, context, n - 1))), \n      n => -1, \n      (_, i) => i, \n      () => -1\n    )\n  );\n\n  run.setOperation(ops.findIndex, (params, scope) => (context) => {\n    const reverse = _bool(params.reverse, context);\n    const list = _list(params.list, context);\n    const n = list.length;\n    const start = _number(params.start, context, reverse ? n - 1 : 0);\n    const clampedStart = Math.max(0, Math.min(n - 1, start));\n    const end = reverse ? -1 : n;\n    const inReverse = clampedStart > end;\n\n    if (reverse !== inReverse) {\n      return -1;\n    }\n\n    return handleListIteration(\n      list,\n      context,\n      scope,\n      () => start,\n      () => end,\n      -1,\n      (item, index) => {\n        if (params.where(context)) {\n          return index;\n        }\n      },\n      true\n    );\n  });\n\n  run.setOperation(ops.last, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[list.length - 1];\n  });\n\n  run.setOperation(ops.first, (params) => (context) => \n    _list(params.list, context)[0]\n  );\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _list(params.list, context).length\n  );\n\n  run.setOperation(ops.randomList, (params) => (context) => {\n    const list = _list(params.list, context);\n    const n = list.length;\n    const count = Math.min(_number(params.count, context, 0), n);\n\n    if (count === n)\n    {\n      return list.slice();\n    }\n\n    const taken = {};\n    const random = [];\n\n    while (random.length < count)\n    {\n      const i = Math.floor(Math.random() * n);\n\n      if (!taken[i])\n      {\n        random.push(list[i]);\n        taken[i] = true;\n      }\n    }\n\n    return random;\n  });\n\n  run.setOperation(ops.random, (params) => (context) => {\n    const list = _list(params.list, context);\n\n    return list[Math.floor(Math.random() * list.length)];\n  });\n\n  // Iteration\n\n  run.setOperation(ops.join, (params, scope) => (context) =>\n    _text(params.prefix, context) + \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n,\n      '',\n      (item, index, list, sum) => (\n        sum\n          ? sum \n            + _text(params.delimiter, context, ', ') \n            + _text(params.toText, context, item)\n          : sum\n            + _text(params.toText, context, item)\n      )\n    ) +\n    _text(params.suffix, context)\n  );\n\n  run.setOperation(ops.each, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const reverse = _bool(params.reverse, context, false);\n\n    handleListIteration(list, context, scope, \n      n => reverse ? n - 1 : 0, \n      n => reverse ? 0 - 1 : n, \n      undefined,\n      () => params.each(context)\n    );\n\n    return list;\n  });\n\n  run.setOperation(ops.filter, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context),\n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (params.filter(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.not, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, matches) => {\n        if (!params.not(context)) {\n          matches.push(item);\n        }\n        \n        return matches;\n      }\n    )\n  );\n\n  run.setOperation(ops.map, (params, scope) => (context) => \n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      [],\n      (item, index, list, mapped) => {\n        mapped.push(params.transform(context));\n        \n        return mapped;\n      }\n    )\n  );\n\n  run.setOperation(ops.split, (params, scope) => (context) =>\n    handleListIteration(\n      _list(params.list, context), \n      context, \n      scope, \n      n => 0, \n      n => n, \n      { pass: [], fail: [] },\n      (item, index, list, result) => {\n        if (params.pass(context)) {\n          result.pass.push(item);\n        } else {\n          result.fail.push(item);\n        }\n\n        return result;\n      }\n    )\n  );\n\n  run.setOperation(ops.reduce, (params, scope) => (context) =>\n    handleListIteration(_list(params.list, context), context, scope, \n      n => 0, \n      n => n, \n      params.initial(context),\n      (item, index, list, reduced) => {\n        context[scope.reduced] = reduced;\n\n        return params.reduce(context);\n      }\n    )\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context) => {\n    const list = _list(params.value, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return list.length - test.length;\n    }\n\n    let less = 0, more = 0;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n    });\n\n    return getCompare(less, more);\n  });\n\n  run.setOperation(ops.group, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      type Grouping = { by: any, group: any[] };\n\n      const map = new Map<any, Grouping>();\n      const groups: Grouping[] = [];\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const by = params.by(context);\n        const grouping = map.get(by);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (grouping) {\n          grouping.group.push(keyValue);\n        } else {\n          const newGrouping: Grouping = {\n            by, group: [ keyValue ],\n          };\n          groups.push(newGrouping);\n          map.set(by, newGrouping);\n        }\n      }\n\n      return groups;\n    });\n  });\n\n  run.setOperation(ops.toListMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map<any, any[]>();\n\n      for (let i = 0; i < list.length; i++) {\n        const value = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = value;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const keyList = map.get(key);\n        const keyValue = _optional(params.getValue, context, value);\n\n        if (keyList) {\n          keyList.push(keyValue);\n        } else {\n          map.set(key, [\n            keyValue\n          ]);\n        }\n      }\n\n      return map;\n    });\n  });\n\n  run.setOperation(ops.toMap, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n\n    return handleList(list, context, scope, () => {\n      const map = new Map();\n\n      for (let i = 0; i < list.length; i++) {\n        const item = list[i];\n\n        context[scope.index] = i;\n        context[scope.item] = item;\n        context[scope.list] = list;\n\n        const key = params.getKey(context);\n        const value = _optional(params.getValue, context, item);\n\n        map.set(key, value);\n      }\n\n      return map;\n    });\n  });\n\n  // Aggregates\n\n  run.setOperation(ops.min, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.min(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.max, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : Math.max(value, agg);\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.sum, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      null,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg = agg === null ? value : value + agg;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.avg, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0 },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg.count === 0 ? null : agg.sum / agg.count,\n    )\n  );\n\n  run.setOperation(ops.std, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / agg.count;\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.variance, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { count: 0, sum: 0, values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.count++;\n          agg.sum += value;\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => {\n         if (agg.count === 0) {\n           return null;\n         }\n         if (agg.count === 1) {\n           return 0;\n         }\n         const avg = agg.sum / agg.count;\n         const squareSum = agg.values.reduce((sum, v) => sum + (v - avg) * (v - avg), 0);\n         const squareAvg = squareSum / (agg.count - 1);\n\n         return Math.sqrt(squareAvg);\n      },\n    )\n  );\n\n  run.setOperation(ops.median, (params, scope) => (context) => \n    handleAggregate(\n      _list(params.list, context),\n      context,\n      scope,\n      { values: [] as number[] },\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          agg.values.push(value);\n        }\n        \n        return agg;\n      },\n      (agg) => agg.values.length === 0\n        ? null\n        : agg.values.length % 2 === 1\n          ? agg.values[Math.floor(agg.values.length / 2)]\n          : (\n              agg.values[Math.floor(agg.values.length / 2) - 1] +\n              agg.values[Math.floor(agg.values.length / 2)]\n          ) / 2,\n    )\n  );\n\n  run.setOperation(ops.bitand, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0xffffffff,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg & value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg | value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  run.setOperation(ops.bitxor, (params, scope) => (context) => \n    handleAggregate<number | null>(\n      _list(params.list, context),\n      context,\n      scope,\n      0,\n      (item, index, list, agg) => {\n        const value = _numberMaybe(params.value, context);\n        if (value !== undefined) {\n          // tslint:disable-next-line: no-bitwise\n          agg = agg ^ value;\n        }\n        \n        return agg;\n      },\n      (agg) => agg,\n    )\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params, scope) => (context) =>\n    _list(params.list, context).length > 0\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const list = _list(params.list, context);\n    const test = _list(params.test, context);\n    \n    if (list.length !== test.length) \n    {\n      return false;\n    }\n\n    let equal = true;\n\n    handleList(list, context, scope, () => {\n      for (let i = 0; i < list.length; i++) {\n        context[scope.list] = list;\n        context[scope.value] = list[i];\n        context[scope.test] = test[i];\n\n        if (!params.isEqual(context)) {\n          equal = false;\n          break;\n        }\n      }\n    });\n\n    return equal;\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => !isEmpty(v))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _list(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => {\n    const value = _list(params.value, context);\n\n    return new Map(value.map((v, i) => [i.toString(), v]));\n  });\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.length)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, () => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}\n\nfunction swap(arr: any[], i: number, k: number)\n{\n  const temp = arr[i];\n  arr[i] = arr[k];\n  arr[k] = temp;\n}\n\nfunction handleList<R>(list: any[], context: object, scope: Record<string, string>, handle: (list: any[]) => R): R\n{\n  const saved = saveScope(context, scope);\n\n  const result = handle(list);\n\n  restoreScope(context, saved);\n\n  return result;\n}\n\nfunction handleAggregate<A>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  initialAggregate: A,\n  aggregate: (current: any, index: number, list: any[], aggregate: A) => A,\n  getAggregate: (aggregate: A) => number | null,\n): number | null {\n  return handleList(list, context, scope, () =>\n  {\n    let agg: A | null = initialAggregate;\n\n    for (let i = 0; i < list.length; i++)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      agg = aggregate(item, i, list, agg);\n    }\n\n    return getAggregate(agg);\n  });\n}\n\nfunction handleListIteration<R>(\n  list: any[],\n  context: object,\n  scope: Record<'list' | 'item' | 'index', string>,\n  start: (n: number) => number,\n  end: (n: number) => number,\n  initialResult: R,\n  onItem: (current: any, index: number, list: any[], lastResult: R) => R,\n  earlyExit: boolean = false\n): R \n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n    let result = initialResult;\n\n    while (i !== e)\n    {\n      const item = list[i];\n\n      context[scope.list] = list;\n      context[scope.item] = item;\n      context[scope.index] = i;\n\n      const newResult = onItem(item, i, list, result);\n\n      if (earlyExit)\n      {\n        if (newResult !== undefined)\n        {\n          return newResult;\n        }\n      }\n      else\n      {\n        result = newResult;\n      }\n\n      if (list[i] === item || i !== 1)\n      {\n        i += d;\n      }\n    }\n\n    return result;\n  });\n}\n\nfunction handleListIsEqual<R>(\n  list: any[],\n  context: object, \n  params: Record<'list' | 'isEqual', LiveCommand>, \n  scope: Record<'list' | 'value' | 'test', string>, \n  value: any, \n  start: (n: number) => number,\n  end: (n: number) => number,\n  handleMatch: (current: any, index: number, list: any[]) => R | undefined,\n  getDefaultResult: (list: any[]) => R\n): R\n{\n  return handleList(list, context, scope, () => \n  {\n    const n = list.length;\n    let i = start(n);\n    const e = end(n);\n    const d = i < e ? 1 : -1;\n\n    while (i !== e)\n    {\n      const test = list[i];\n      const next = list[i + d];\n\n      context[scope.list] = list;\n      context[scope.value] = value;\n      context[scope.test] = test;\n\n      if (params.isEqual(context)) \n      {\n        const matchResult = handleMatch(test, i, list);\n\n        if (matchResult !== undefined)\n        {\n          return matchResult;\n        }\n        else if (list[i] === next)\n        {\n          i -= d;\n        }\n      }\n\n      i += d;\n    }\n\n    return getDefaultResult(list);\n  });\n}","import { Runtime, MapOps, toArray, getCompare, isMap, isBoolean, isDate, isNumber, isObject, isString, isArray, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { saveScope, restoreScope, _map, _optional, _number, _mapMaybe } from './helper';\nimport { LiveCommand, LiveContext, LiveResult } from './LiveRuntime';\n\n\n// tslint:disable: no-magic-numbers\n// tslint:disable: one-variable-per-declaration\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = MapOps;\n    \n  // Static\n\n  run.setOperation(ops.create, (params) => (context) =>\n    new Map()\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _mapMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) => \n    _map(params.map, context).get(params.key(context))\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const key = params.key(context);\n    const existing = map.get(key);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = existing;\n\n    const value = params.value(context);\n\n    map.set(key, value);\n\n    restoreScope(context, saved);\n\n    return existing;\n  });\n\n  run.setOperation(ops.has, (params) => (context) =>\n    _map(params.map, context).has(params.key(context))\n  );\n\n  run.setOperation(ops.delete, (params) => (context) =>\n    _map(params.map, context).delete(params.key(context))\n  );\n\n  run.setOperation(ops.keys, (params) => (context) =>\n    toArray(_map(params.map, context).keys())\n  );\n\n  run.setOperation(ops.values, (params) => (context) =>\n    toArray(_map(params.map, context).values())\n  );\n\n  run.setOperation(ops.entries, (params) => (context) => {\n    const map = _map(params.map, context);\n    const entries: { keys: any[], values: any[] } = { keys: [], values: [] };\n\n    for (const [key, value] of map.entries()) {\n      entries.keys.push(key);\n      entries.values.push(value);\n    }\n\n    return entries;\n  });\n\n  run.setOperation(ops.pairs, (params) => (context) => {\n    const map = _map(params.map, context);\n    const pairs: Array<{ key: any, value: any }> = [];\n\n    for (const [key, value] of map.entries()) {\n      pairs.push({ key, value });\n    }\n\n    return pairs;\n  });\n\n  run.setOperation(ops.clear, (params) => (context) => {\n    const map = _map(params.map, context);\n    map.clear();\n\n    return map;\n  });\n\n  run.setOperation(ops.count, (params) => (context) =>\n    _map(params.map, context).size\n  );\n\n  run.setOperation(ops.cmp, (params, scope) => (context => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    return handleMap(map, context, scope, () => {\n      let less = 0, more = 0;\n\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          more++;\n          continue;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        const d = _number(params.compare, context, 0);\n\n        if (d < 0) less++;\n        else if (d > 0) more++;\n      }\n\n      for (const key of test.keys()) {\n        if (!map.has(key)) {\n          less++;\n        }\n      }\n\n      return getCompare(less, more);\n    });\n  }));\n\n  run.setOperation(ops.copy, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.deepCopy && !params.deepCopyKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesCopy: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesCopy.push([\n          _optional(params.deepCopyKey, context, key),\n          _optional(params.deepCopy, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesCopy);\n  });\n\n  run.setOperation(ops.map, (params, scope) => (context) => {\n    const map = _map(params.map, context);\n    const entries = map.entries();\n\n    if (!params.transform && !params.transformKey) {\n      return new Map(toArray(entries));\n    }\n    const entriesTransformed: [any, any][] = [];\n    handleMap(map, context, scope, () => {  \n      for (const [key, value] of entries) {\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.map] = map;\n\n        entriesTransformed.push([\n          _optional(params.transformKey, context, key),\n          _optional(params.transform, context, value)\n        ]);\n      }\n    });\n\n    return new Map(entriesTransformed);\n  });\n\n  run.setOperation(ops.toPlainObject, (params) => (context) => {\n    const map = _map(params.map, context);\n    const plain = Object.create(null);\n\n    for (const [key, value] of map.entries()) {\n      plain[key] = value;\n    }\n\n    return plain;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isMap(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params, scope) => (context) => {\n    const map = _map(params.value, context);\n    const test = _map(params.test, context);\n\n    if (map.size !== test.size) {\n      return false;\n    }\n\n    return handleMap(map, context, scope, () => {\n      for (const [key, value] of map.entries()) {\n        if (!test.has(key)) {\n          return false;\n        }\n\n        context[scope.key] = key;\n        context[scope.value] = value;\n        context[scope.test] = test.get(key);\n\n        if (!params.isEqual(context)) { \n          return false;\n        }\n      }\n\n      return true;\n    });\n  });\n\n  run.setOperation(ops.isNotEqual, (params, scope) => (context) =>\n    !run.getOperation(ops.isEqual.id)(params, scope)(context)\n  );\n\n  run.setOperation(ops.isLess, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params, scope) => (context) =>\n    run.getOperation(ops.cmp.id)(params, scope)(context) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.size > 0)\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => new Date())\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    toArray(_map(params.value, context).values())\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.size)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => [v])\n  );\n\n}\n\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isMap(val) && isType(val.get('value'))\n    ? val.get('value')\n    : otherwise(val);\n}\n\nfunction handleMap<R>(map: Map<any, any>, context: LiveContext, scope: Record<string, string>, handle: (map: Map<any, any>) => R): R\n{\n  const saved = saveScope(context, scope);\n  \n  const result = handle(map);\n\n  restoreScope(context, saved);\n\n  return result;\n}","import { Runtime, NumberOps, parse, isNumber, isUndefined, isString, isWhole } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _textMaybe, _asTuple, _asObject, _asMap, _asList } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nconst DEFAULT_BASE = 10;\n\nexport default function(run: Runtime<LiveContext, LiveResult>, epsilon: number = 0.000001)\n{\n  const ops = NumberOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    0\n  );\n\n  run.setOperation(ops.pi, (params) => (context) =>\n    Math.PI\n  );\n\n  run.setOperation(ops.pi2, (params) => (context) =>\n    Math.PI + Math.PI\n  );\n\n  run.setOperation(ops.piHalf, (params) => (context) =>\n    // tslint:disable-next-line: no-magic-numbers\n    Math.PI * 0.5\n  );\n\n  run.setOperation(ops.e, (params) => (context) =>\n    Math.E\n  );\n\n  run.setOperation(ops.sqrt2, (params) => (context) =>\n    Math.SQRT2\n  );\n\n  run.setOperation(ops.sqrt12, (params) => (context) =>\n    Math.SQRT1_2\n  );\n\n  run.setOperation(ops.ln2, (params) => (context) =>\n    Math.LN2\n  );\n\n  run.setOperation(ops.ln10, (params) => (context) =>\n    Math.LN10\n  );\n\n  run.setOperation(ops.log2e, (params) => (context) =>\n    Math.LOG2E\n  );\n\n  run.setOperation(ops.log10e, (params) => (context) =>\n    Math.LOG10E\n  );\n\n  // Binary Operations\n\n  run.setOperation(ops.add, (params) => (context) => \n    _number(params.value, context) + _number(params.addend, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _number(params.value, context) - _number(params.subtrahend, context)\n  );\n\n  run.setOperation(ops.mul, (params) => (context) => \n    _number(params.value, context) * _number(params.multiplier, context)\n  );\n\n  run.setOperation(ops.div, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.mod, (params) => (context) => \n    _number(params.value, context) % _number(params.divisor, context)\n  );\n\n  run.setOperation(ops.min, (params) => (context) => \n    Math.min(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.max, (params) => (context) => \n    Math.max(_number(params.a, context), _number(params.b, context))\n  );\n\n  run.setOperation(ops.pow, (params) => (context) => \n    Math.pow(_number(params.value, context), _number(params.exponent, context))\n  );\n\n  run.setOperation(ops.atan2, (params) => (context) => \n    Math.atan2(_number(params.y, context), _number(params.x, context))\n  );\n\n  run.setOperation(ops.hypot, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n\n    return Math.sqrt(a * a + b * b);\n  });\n\n  run.setOperation(ops.choose, (params) => (context) => {\n    const n = _number(params.n, context);\n    const k = _number(params.k, context);\n    if (!isFinite(n) || !isFinite(k)) {\n      return Number.NaN;\n    }\n\n    return choose(n, k);\n  });\n\n  run.setOperation(ops.gcd, (params) => (context) => {\n    const a = _number(params.a, context);\n    const b = _number(params.b, context);\n    if (!isFinite(a) || !isFinite(b)) {\n      return Number.NaN;\n    }\n\n    return gcd(a, b);\n  });\n\n  run.setOperation(ops.bitAnd, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) & _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitOr, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) | _number(params.b, context)\n  );\n\n  run.setOperation(ops.bitXor, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    _number(params.a, context) ^ _number(params.b, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    _number(params.value, context) - _number(params.test, context)\n  );\n\n  // Unary Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _numberMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.sqrt, (params) => (context) => \n    Math.sqrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sq, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value * value;\n  });\n\n  run.setOperation(ops.cbrt, (params) => (context) => \n    Math.cbrt(_number(params.value, context))\n  );\n\n  run.setOperation(ops.floor, (params) => (context) => \n    Math.floor(_number(params.value, context))\n  );\n\n  run.setOperation(ops.ceil, (params) => (context) => \n    Math.ceil(_number(params.value, context))\n  );\n\n  run.setOperation(ops.up, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.down, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value > 0 ? Math.ceil(value) : Math.floor(value);\n  });\n\n  run.setOperation(ops.round, (params) => (context) => \n    Math.round(_number(params.value, context))\n  );\n\n  run.setOperation(ops.abs, (params) => (context) => \n    Math.abs(_number(params.value, context))\n  );\n\n  run.setOperation(ops.neg, (params) => (context) => \n    -_number(params.value, context)\n  );\n\n  run.setOperation(ops.sign, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return value === 0 ? 0 : value < 0 ? -1 : 1;\n  });\n\n  run.setOperation(ops.log, (params) => (context) => \n    Math.log(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sin, (params) => (context) => \n    Math.sin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cos, (params) => (context) => \n    Math.cos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.tan, (params) => (context) => \n    Math.tan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.sinh, (params) => (context) => \n    Math.sinh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.cosh, (params) => (context) => \n    Math.cosh(_number(params.value, context))\n  );\n\n  run.setOperation(ops.asin, (params) => (context) => \n    Math.asin(_number(params.value, context))\n  );\n\n  run.setOperation(ops.acos, (params) => (context) => \n    Math.acos(_number(params.value, context))\n  );\n\n  run.setOperation(ops.atan, (params) => (context) => \n    Math.atan(_number(params.value, context))\n  );\n\n  run.setOperation(ops.factorial, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    return isFinite(value) ? factorial(value) : value;\n  });\n\n  run.setOperation(ops.bitFlip, (params) => (context) => \n    // tslint:disable-next-line: no-bitwise\n    ~_number(params.value, context)\n  );\n\n  // Other\n\n  run.setOperation(ops.clamp, (params) => (context) => \n    Math.max(_number(params.min, context), Math.min(_number(params.value, context), _number(params.max, context)))\n  );\n\n  run.setOperation(ops.triangleHeight, (params) => (context) => {\n    const base = _number(params.base, context);\n    const side1 = _number(params.side1, context);\n    const side2 = _number(params.side2, context);\n    if (!isFinite(base) || !isFinite(side1) || !isFinite(side2)) {\n      return Number.NaN;\n    }\n\n    return triangleHeight(base, side1, side2);\n  });\n\n  run.setOperation(ops.lerp, (params) => (context) => {\n    const start = _number(params.start, context);\n    const end = _number(params.end, context);\n    const delta = _number(params.delta, context);\n\n    return (end - start) * delta + start;\n  });\n\n  // Generators\n\n  run.setOperation(ops.rnd, (params) => (context) => {\n    const min = _number(params.min, context, 0);\n    const max = _number(params.max, context, 1);\n    const gap = max - min;\n    const whole = _bool(params.whole, context, false);\n    const include = _bool(params.includeMax, context, true);\n\n    return whole\n      ? include\n        ? Math.floor((gap + 1) * Math.random()) + min\n        : Math.floor(gap * Math.random()) + min\n      : Math.random() * gap + min;\n  });\n\n  // Formatters\n\n  run.setOperation(ops.toBaseText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const base = _number(params.base, context, DEFAULT_BASE);\n    const min = _number(params.minDigits, context, 0);\n    \n    let x = value.toString(base);\n\n    while (x.length < min) x = '0' + x;\n    \n    return x;\n  });\n\n  run.setOperation(ops.toText, (params) => (context) => {\n    const value = _number(params.value, context);\n    if (!isFinite(value)) {\n      return value;\n    }\n    const prefix = _text(params.prefix, context);\n    const suffix = _text(params.suffix, context);\n    const minPlaces = _numberMaybe(params.minPlaces, context);\n    const maxPlaces = _numberMaybe(params.maxPlaces, context);\n    const useExponent = _bool(params.useExponent, context, false);\n    const separator = _textMaybe(params.thousandSeparator, context);\n    \n    let to = '';\n\n    if (useExponent) {\n      to = value.toExponential(isUndefined(maxPlaces) ? minPlaces : maxPlaces);\n    } else if (isNumber(minPlaces)) {\n      to = value.toFixed(minPlaces);\n    } else {\n      to = value.toPrecision(maxPlaces);\n    }\n\n    const SEPARATOR_NUMBER = 1.1;\n    const SEPARATOR_OFFSET = 3;\n\n    if (isString(separator)) {\n      const systemSeparator = SEPARATOR_NUMBER.toLocaleString().substring(1, SEPARATOR_OFFSET - 1);\n      let index = to.indexOf(systemSeparator);\n      if (index === -1) {\n        index = to.length;\n      }\n      index -= SEPARATOR_OFFSET;\n      while (index > 0) {\n        to = to.substring(0, index) + separator + to.substring(index);\n        index -= SEPARATOR_OFFSET;\n      }\n    }\n    \n    return prefix + to + suffix;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isNumber(params.value(context))\n  );\n\n  run.setOperation(ops.isZero, (params) => (context) => \n    Math.abs(_number(params.value, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    Math.abs(_number(params.value, context) - _number(params.test, context)) > _number(params.epsilon, context, epsilon)\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    _number(params.value, context) < _number(params.test, context)\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    _number(params.value, context) <= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    _number(params.value, context) > _number(params.test, context)\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    _number(params.value, context) >= _number(params.test, context)\n  );\n\n  run.setOperation(ops.isBetween, (params) => (context) => {\n    const value = _number(params.value, context);\n    const min = _number(params.min, context);\n    const max = _number(params.max, context);\n    const minInclusive = _bool(params.minInclusive, context, true);\n    const maxInclusive = _bool(params.maxInclusive, context, true);\n\n    const minCompare = value - min;\n    const maxCompare = value - max;\n\n    const minOffset = minInclusive ? 0 : 1;\n    const maxOffset = maxInclusive ? 0 : -1;\n\n    return minCompare >= minOffset && maxCompare <= maxOffset;\n  });\n\n  run.setOperation(ops.isWhole, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isDecimal, (params) => (context) => {\n    const value = _number(params.value, context);\n    const eps = _number(params.epsilon, context, epsilon);\n\n    return !isWhole(value, eps);\n  });\n\n  run.setOperation(ops.isPositive, (params) => (context) =>\n    _number(params.value, context) >= 0\n  );\n\n  run.setOperation(ops.isNegative, (params) => (context) =>\n    _number(params.value, context) < 0\n  );\n\n  run.setOperation(ops.isDivisible, (params) => (context) =>\n    Math.abs(_number(params.value, context) % _number(params.by, context)) <= _number(params.epsilon, context, epsilon)\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    !!params.value(context)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = _number(params.value, context);\n\n    // tslint:disable: no-magic-numbers no-bitwise\n    const r = value & 0xFF;\n    const g = (value >> 8) & 0xFF;\n    const b = (value >> 16) & 0xFF;\n    const a = (value >> 24) & 0xFF;\n    // tslint:enable: no-magic-numbers no-bitwise\n\n    return { r, g, b, a };\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) =>\n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) =>\n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context) + ''\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\n\nfunction factorial (x: number): number {\n  let f = x;\n  while (--x > 1) {\n    f *= x;\n  }\n\n  return f;\n}\n\nfunction gcd (a: number, b: number): number {\n  const as = Math.abs(a);\n  const bs = Math.abs(b);\n  let x = Math.max(as, bs);\n  let y = Math.min(as, bs);\n\n  for (;;) {\n    if (y === 0) return x;\n    x %= y;\n    if (x === 0) return y;\n    y %= x;\n  }\n}\n\nfunction choose(n: number, k: number): number \n{\n  let num = 1; \n  let den = 1;\n  let denom = 0;\n\n  // tslint:disable-next-line: no-bitwise\n  if (k > (n >> 1))\n  {\n    k = n - k;\n  }\n\n  while (k >= 1)\n  {\n    num *= n--;\n    den *= k--;\n    denom = gcd( num, den );\n    num /= denom;\n    den /= denom;\n  }\n\n  return num;\n}\n\nconst HALF = 0.5;\nconst TWO = 2;\n\nfunction triangleHeight(base: number, side1: number, side2: number): number \n{\n  const p = (base + side1 + side2) * HALF;\n  const area = Math.sqrt( p * (p - base) * (p - side1) * (p - side2) );\n  const height = area * TWO / base;\n\n  return height;\n}","import { Runtime, ObjectOps, compare, copy, toString, isEmpty, isObject, isBoolean, isDate, isArray, isMap, isNumber, isString, isColor, COMPONENT_MAX, ColorType } from 'expangine-runtime';\nimport { _object, restoreScope, saveScope, _objectMaybe } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = ObjectOps;\n\n  // Static \n\n  run.setOperation(ops.create, (params) => (context) =>\n    Object.create(null)\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _objectMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.has, (params) => (context) =>\n    params.key(context) in _object(params.object, context)\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _object(params.object, context)[params.key(context)]\n  );\n\n  run.setOperation(ops.set, (params, scope) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const saved = saveScope(context, scope);\n\n    context[scope.existingValue] = object[key];\n\n    const value = params.value(context);\n\n    object[key] = value;\n\n    restoreScope(context, saved);\n\n    return object;\n  });\n\n  run.setOperation(ops.delete, (params) => (context) => {\n    const object = _object(params.object, context);\n    const key = params.key(context);\n    const value = object[key];\n\n    delete object[key];\n\n    return value;\n  });\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(_object(params.object, context))\n  );\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isObject(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_object(params.value, context), _object(params.test, context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, () => true)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) => {\n    const value = params.value(context);\n\n    if (isObject(value) && isColor(value.value)) {\n      return value.value;\n    }\n\n    return ColorType.baseType.normalize(value) \n      || ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX });\n  });\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, () => new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, v => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, () => 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, v => toString(v))\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    tryCastValue(params.value, context, isArray, v => [v])\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isObject(val) && isType(val.value)\n    ? val.value\n    : otherwise(val);\n}","import { Runtime, TextOps, isString, parse, ColorType, COMPONENT_MAX } from 'expangine-runtime';\nimport { _number, _bool, _text, _numberMaybe, _asList, _asMap, _asObject, _asTuple, _textMaybe } from './helper';\nimport { LiveContext, LiveResult } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TextOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) => \n    ''\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _textMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.append, (params) => (context) => \n    _text(params.value, context) + _text(params.append, context)\n  );\n\n  run.setOperation(ops.prepend, (params) => (context) => \n    _text(params.prepend, context) + _text(params.value, context)\n  );\n\n  run.setOperation(ops.lower, (params) => (context) => \n    _text(params.value, context).toLowerCase()\n  );\n\n  run.setOperation(ops.upper, (params) => (context) => \n    _text(params.value, context).toUpperCase()\n  );\n\n  run.setOperation(ops.char, (params) => (context) => {\n    const value = _text(params.value, context);\n    const index = _number(params.index, context);\n\n    return index <= value.length ? value.charAt(index) : _text(params.outside, context);\n  });\n\n  run.setOperation(ops.replace, (params) => (context) => \n    _text(params.value, context).replace(_text(params.find, context), _text(params.replace, context))\n  );\n\n  run.setOperation(ops.repeat, (params) => (context) => {\n    const value = _number(params.value, context);\n    let times = _number(params.times, context);\n    let repeated = '';\n    while (--times >= 0){ \n      repeated += value;\n    }\n\n    return repeated;\n  });\n\n  run.setOperation(ops.split, (params) => (context) => \n    _text(params.value, context).split(_text(params.by, context), _numberMaybe(params.limit, context))\n  );\n\n  run.setOperation(ops.chars, (params) => (context) => \n    _text(params.value, context)\n  );\n\n  run.setOperation(ops.sub, (params) => (context) => \n    _text(params.value, context).substring(_number(params.start, context, 0), _numberMaybe(params.end, context))\n  );\n\n  run.setOperation(ops.indexOf, (params) => (context) => \n    _text(params.value, context).indexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.lastIndexOf, (params) => (context) => \n    _text(params.value, context).lastIndexOf(_text(params.search, context), _numberMaybe(params.start, context))\n  );\n\n  run.setOperation(ops.trim, (params) => (context) => {\n    let value = _text(params.value, context);\n    if (_bool(params.start, context, true)) {\n      value = value.replace(/^\\w+/, '');\n    }\n    if (_bool(params.end, context, true)) {\n      value = value.replace(/\\w+$/, '');\n    }\n\n    return value;\n  });\n\n  run.setOperation(ops.startsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(0, test.length) === test;\n  });\n\n  run.setOperation(ops.endsWith, (params) => (context) => {\n    const value = _text(params.value, context);\n    const test = _text(params.test, context);\n\n    return value.substring(value.length - test.length) === test;\n  });\n\n  run.setOperation(ops.soundex, (params) => {\n    const LETTERS_ONLY = /[^a-z]/g;\n    const ALLOWED_ONLY = /[^bfpvcgjkqsxzdtlmnr]/g;\n    const SOUNDEX_MIN_DEFAULT = 4;\n    const MAP = {\n      b: 1, f: 1, p: 1, v: 1,\n      c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2,\n      d: 3, t: 3,\n      l: 4,\n      m: 5, n: 5,\n      r: 6\n    };\n\n    return (context) => {\n      let value = _text(params.value, context);\n      const max = _numberMaybe(params.max, context);\n      const min = _number(params.min, context, SOUNDEX_MIN_DEFAULT);\n\n      value = value.toLowerCase();\n      value = value.replace(LETTERS_ONLY, '');\n      value = value.charAt(0) + value.substring(1).replace(ALLOWED_ONLY, '');\n\n      let soundex = value.charAt(0);\n\n      for (let i = 1; i < value.length; i++) {\n        soundex += MAP[value.charAt(i)];\n      }\n      \n      let last = soundex.charAt(1)\n      for (let i = 2; i < soundex.length; i++) { \n        if (soundex.charAt(i) === last) {\n          soundex = soundex.substring(0, i) + soundex.substring(i + 1);\n          i--;\n        } else {\n          last = soundex.charAt(i);\n        }\n      }\n\n      if (isFinite(max)) {\n        soundex = soundex.substring(0, max + 1);\n      }\n\n      while (soundex.length < min) {\n        soundex += '0';\n      }\n\n      return soundex;\n    };\n  });\n\n  run.setOperation(ops.distance, (params) => {\n    const distance = (a: string, b: string): number => {\n      const distanceMatrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));\n\n      for (let i = 0; i <= a.length; i += 1) {\n        distanceMatrix[0][i] = i;\n      }\n\n      for (let j = 0; j <= b.length; j += 1) {\n        distanceMatrix[j][0] = j;\n      }\n\n      for (let j = 1; j <= b.length; j += 1) {\n        for (let i = 1; i <= a.length; i += 1) {\n          const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n          distanceMatrix[j][i] = Math.min(\n            distanceMatrix[j][i - 1] + 1,\n            distanceMatrix[j - 1][i] + 1,\n            distanceMatrix[j - 1][i - 1] + indicator,\n          );\n        }\n      }\n\n      return distanceMatrix[b.length][a.length];\n    };\n    \n    return (context) => {\n      const value = _text(params.value, context);\n      const test = _text(params.test, context);\n\n      return distance(value, test);\n    };\n  });\n\n  run.setOperation(ops.length, (params) => (context) =>\n    _text(params.value, context).length\n  );\n\n  run.setOperation(ops.compare, (params) => (context) =>\n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false))\n  );\n\n  run.setOperation(ops.like, (params) => (context) => {\n    const value = _text(params.value, context);\n    const pattern = _text(params.pattern, context);\n    const ignoreCase = _bool(params.ignoreCase, context, false);\n    \n    const regexPattern = pattern\n      .split('%')\n      .map(x => x ? x.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : x)\n      .join('.*')\n    ;\n\n    const regex = new RegExp('^' + regexPattern + '$', ignoreCase ? 'i' : undefined);\n\n    return !!value.match(regex);\n  });\n\n  run.setOperation(ops.pad, (params) => (context) => {\n    let value = _text(params.value, context);\n    const padding = _text(params.padding, context) || ' ';\n    const append = _bool(params.append, context);\n    const min = _number(params.min, context);\n    const max = _numberMaybe(params.max, context);\n\n    if (append) { \n      while (value.length < min) {\n        value = value + padding;\n      }\n    } else {\n      while (value.length < min) {\n        value = padding + value;\n      }\n    }\n\n    if (max !== undefined) {\n      if (value.length > max) {\n        if (append) {\n          value = value.substring(0, max);\n        } else {\n          value = value.substring(max - value.length, max);\n        }\n      }\n    }\n\n    return value;\n  });\n\n\n  // Other\n\n\n  // Generators\n\n\n  // Formatters\n\n  run.setOperation(ops.toNumber, (params) => (context) => {\n    const value = parseFloat(_text(params.value, context));\n\n    return isFinite(value) \n      ? value \n      : _number(params.invalidValue, context, 0);\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isString(params.value(context))\n  );\n\n  run.setOperation(ops.isEmpty, (params) => (context) => \n    _text(params.value, context).length === 0\n  );\n\n  run.setOperation(ops.isNotEmpty, (params) => (context) => \n    _text(params.value, context).length !== 0\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(_text(params.a, context), _text(params.b, context), _bool(params.ignoreCase, context, false)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(_text(params.value, context), _text(params.test, context), _bool(params.ignoreCase, context, false)) >= 0\n  );\n\n  run.setOperation(ops.isLower, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toLowerCase()) === 0;\n  });\n\n  run.setOperation(ops.isUpper, (params) => (context) => {\n    const value = _text(params.value, context);\n\n    return value.localeCompare(value.toUpperCase()) === 0;\n  });\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    /^(true|t|1|y|x)$/.test(_text(params.value, context))\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    ColorType.baseType.normalize(params.value(context)) || { r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    parse(params.value(context)) || new Date()\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    _asList(params.value, context)\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    _asMap(params.value, context)\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => {\n    const value = parseFloat(params.value(context));\n\n    return isFinite(value) ? value : 0;\n  });\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    _asObject(params.value, context)\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    params.value(context)\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    _asTuple(params.value, context)\n  );\n\n}\n\nfunction compare(a: string, b: string, ignoreCase: boolean): number \n{\n  return ignoreCase\n    ? a.toLowerCase().localeCompare(b.toLowerCase())\n    : a.localeCompare(b);\n}","import { Runtime, TupleOps, compare, copy, isBoolean, isDate, isEmpty, isNumber, isString, isArray, isMap, isObject, isColor, COMPONENT_MAX } from 'expangine-runtime';\nimport { _list, _number, _listMaybe } from './helper';\nimport { LiveContext, LiveResult, LiveCommand } from './LiveRuntime';\n\n\nexport default function(run: Runtime<LiveContext, LiveResult>)\n{\n  const ops = TupleOps;\n\n  // Statics\n\n  run.setOperation(ops.create, (params) => (context) =>\n    []\n  );\n\n  // Operations\n\n  run.setOperation(ops.maybe, (params) => (context) => \n    _listMaybe(params.value, context)\n  );\n\n  run.setOperation(ops.cmp, (params) => (context) => \n    compare(params.value(context), params.test(context))\n  );\n\n  run.setOperation(ops.copy, (params) => (context) =>\n    copy(params.value(context))\n  );\n\n  run.setOperation(ops.get, (params) => (context) =>\n    _list(params.value, context)[_number(params.index, context, 0)]\n  );\n\n  run.setOperation(ops.set, (params) => (context) => {\n    const tuple = _list(params.value, context);\n    const index = _number(params.index, context, 0);\n    const existing = tuple[index];\n    tuple[index] = params.element(context);\n    \n    return existing;\n  });\n\n  // Comparisons\n\n  run.setOperation(ops.isValid, (params) => (context) => \n    isArray(params.value(context))\n  );\n\n  run.setOperation(ops.isEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) === 0\n  );\n\n  run.setOperation(ops.isNotEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) !== 0\n  );\n\n  run.setOperation(ops.isLess, (params) => (context) => \n    compare(params.value(context), params.test(context)) < 0\n  );\n\n  run.setOperation(ops.isLessOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) <= 0\n  );\n\n  run.setOperation(ops.isGreater, (params) => (context) => \n    compare(params.value(context), params.test(context)) > 0\n  );\n\n  run.setOperation(ops.isGreaterOrEqual, (params) => (context) => \n    compare(params.value(context), params.test(context)) >= 0\n  );\n\n  // Casts\n\n  run.setOperation(ops.asAny, (params) => (context) =>\n    params.value(context)\n  );\n\n  run.setOperation(ops.asBoolean, (params) => (context) =>\n    tryCastValue(params.value, context, isBoolean, (v) => v.find ? v.find(isBoolean) || false : false)\n  );\n\n  run.setOperation(ops.asColor, (params) => (context) =>\n    tryCastValue(params.value, context, isColor, () =>  ({ r: COMPONENT_MAX, g: COMPONENT_MAX, b: COMPONENT_MAX, a: COMPONENT_MAX }))\n  );\n\n  run.setOperation(ops.asDate, (params) => (context) =>\n    tryCastValue(params.value, context, isDate, (v) => v.find ? v.find(isDate) || new Date() : new Date())\n  );\n\n  run.setOperation(ops.asList, (params) => (context) => \n    tryCastValue(params.value, context, isArray, (v) => isEmpty(v) ? [] : [v])\n  );\n\n  run.setOperation(ops.asMap, (params) => (context) => \n    tryCastValue(params.value, context, isMap, (v) => isEmpty(v) ? new Map() : new Map([['value', v]]))\n  );\n\n  run.setOperation(ops.asNumber, (params) => (context) => \n    tryCastValue(params.value, context, isNumber, (v) => v.find ? v.find(isNumber) || 0 : 0)\n  );\n\n  run.setOperation(ops.asObject, (params) => (context) => \n    tryCastValue(params.value, context, isObject, (value) => ({ value }))\n  );\n\n  run.setOperation(ops.asText, (params) => (context) => \n    tryCastValue(params.value, context, isString, (v) => v.find ? v.find(isString) || '' : '')\n  );\n\n  run.setOperation(ops.asTuple, (params) => (context) => \n    params.value(context)\n  );\n\n}\n\nfunction tryCastValue(value: LiveCommand, context: LiveContext, isType: (value: any) => boolean, otherwise: (value: any) => any)\n{\n  const val = value(context);\n\n  return isArray(val) && isType(val[0])\n    ? val[0]\n    : otherwise(val);\n}","export * from './LiveRuntime';\n\nimport { LiveRuntime } from './LiveRuntime';\nimport { default as addLiveExpressions } from './Expressions';\nimport { default as addLiveAny } from './Any';\nimport { default as addLiveBoolean } from './Boolean';\nimport { default as addLiveColor } from './Color';\nimport { default as addLiveDate } from './Date';\nimport { default as addLiveList } from './List';\nimport { default as addLiveMap } from './Map';\nimport { default as addLiveNumber } from './Number';\nimport { default as addLiveObject } from './Object';\nimport { default as addLiveText } from './Text';\nimport { default as addLiveTuple } from './Tuple';\n\n\naddLiveExpressions(LiveRuntime);\naddLiveAny(LiveRuntime);\naddLiveBoolean(LiveRuntime);\naddLiveColor(LiveRuntime);\naddLiveDate(LiveRuntime);\naddLiveList(LiveRuntime);\naddLiveMap(LiveRuntime);\naddLiveNumber(LiveRuntime);\naddLiveObject(LiveRuntime);\naddLiveText(LiveRuntime);\naddLiveTuple(LiveRuntime);\n\n\nexport {\n  addLiveExpressions,\n  addLiveAny,\n  addLiveBoolean,\n  addLiveColor,\n  addLiveDate,\n  addLiveList,\n  addLiveMap,\n  addLiveNumber,\n  addLiveObject,\n  addLiveText,\n  addLiveTuple,\n};"],"sourceRoot":""}