import { Runtime, Command, Expression, CommandProvider } from 'expangine-runtime';
export declare type LiveContext = Record<string, any> | (any[] & Record<string, any>);
export declare type LiveResult = any;
export declare type LiveCommand = Command<LiveContext, LiveResult>;
export declare type LiveCommandMap<K extends string | number | symbol = string> = Record<K, LiveCommand>;
export declare type LiveProvider = CommandProvider<LiveContext, LiveResult>;
export interface LiveRuntimeOperations {
    objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;
    objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;
    objectHas<O extends object>(obj: O, prop: string | number | symbol): boolean;
    dataSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): boolean;
    dataGet<O extends object, K extends keyof O>(obj: O, prop: K): O[K];
    dataRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;
    dataHas<O extends object>(obj: O, prop: string | number | symbol): boolean;
    dataCopy<V>(value: V): V;
    enterScope<R = any>(context: LiveContext, props: string[], run: (innerContext: LiveContext) => R): R;
    arrayAdd<T>(arr: T[], item: T): void;
    arrayAddFirst<T>(arr: T[], item: T): void;
    arrayRemoveLast<T>(arr: T[]): T;
    arrayRemoveFirst<T>(arr: T[]): T;
    arrayRemoveAt<T>(arr: T[], index: number): T;
    arrayInsert<T>(arr: T[], index: number, item: T): void;
    arraySet<T>(arr: T[], index: number, item: T): T;
    arraySplice<T>(arr: T[], index: number, remove: number, ...items: T[]): T[];
    arrayClear<T>(arr: T[]): T[];
}
export declare class LiveRuntimeImpl extends Runtime<LiveContext, LiveResult> implements LiveRuntimeOperations {
    strict: boolean;
    objectSet: LiveRuntimeOperations['objectSet'];
    objectRemove: LiveRuntimeOperations['objectRemove'];
    objectHas: LiveRuntimeOperations['objectHas'];
    dataSet: LiveRuntimeOperations['dataSet'];
    dataGet: LiveRuntimeOperations['dataGet'];
    dataRemove: LiveRuntimeOperations['dataRemove'];
    dataHas: LiveRuntimeOperations['dataHas'];
    dataCopy: LiveRuntimeOperations['dataCopy'];
    arrayAdd: LiveRuntimeOperations['arrayAdd'];
    arrayAddFirst: LiveRuntimeOperations['arrayAddFirst'];
    arrayRemoveLast: LiveRuntimeOperations['arrayRemoveLast'];
    arrayRemoveFirst: LiveRuntimeOperations['arrayRemoveFirst'];
    arrayRemoveAt: LiveRuntimeOperations['arrayRemoveAt'];
    arrayInsert: LiveRuntimeOperations['arrayInsert'];
    arraySet: LiveRuntimeOperations['arraySet'];
    arraySplice: LiveRuntimeOperations['arraySplice'];
    arrayClear: LiveRuntimeOperations['arrayClear'];
    enterScope: LiveRuntimeOperations['enterScope'];
    constructor();
    wrapCommandWithReturn(cmd: LiveCommand): LiveCommand;
    getCommandWithReturn(expr: Expression, provider?: LiveProvider): LiveCommand;
    run(expr: any, context: LiveContext, provider?: LiveProvider): LiveResult;
}
export declare const LiveRuntime: LiveRuntimeImpl;
